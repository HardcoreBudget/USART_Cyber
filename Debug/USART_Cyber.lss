
USART_Cyber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019a  00800060  000063c8  0000645c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008001fa  008001fa  000065f6  2**0
                  ALLOC
  3 .stab         000061b0  00000000  00000000  000065f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025d7  00000000  00000000  0000c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ed7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ef1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000128a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001489c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_1>
       8:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__vector_2>
       c:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_3>
      10:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_4>
      14:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_5>
      18:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_10>
      2c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_13>
      38:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f3 e6       	ldi	r31, 0x63	; 99
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <main>
      8a:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 31 	jmp	0x6264	; 0x6264 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 31 	jmp	0x629c	; 0x629c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 31 	jmp	0x6264	; 0x6264 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 31 	jmp	0x629c	; 0x629c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 42 31 	jmp	0x6284	; 0x6284 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5e 31 	jmp	0x62bc	; 0x62bc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 56       	subi	r30, 0x69	; 105
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_voidInit>:
static void (*Global_UDRECallBack)(void)= NULL;
static void (*Global_RXCCallBack)(void)= NULL;


void USART_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if SPEED_OPERATION == USART_DOUBLE_SPEED_MODE
#define UBRR_VALUE ((F_OSC/(8 * USART_BAUDRATE))-1)
	SET_BIT(UCSRA,UCSRA_U2X);    /* Configure UART double speed rate*/
     e36:	ab e2       	ldi	r26, 0x2B	; 43
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e2       	ldi	r30, 0x2B	; 43
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	SET_BIT(UCSRC, UCSRC_URSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24

#if MODE_OF_OPERATION == USART_ASYNCHRONOUS
	CLR_BIT(UCSRC, UCSRC_UMSEL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
     e60:	a0 e4       	ldi	r26, 0x40	; 64
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e0 e4       	ldi	r30, 0x40	; 64
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
#endif
#endif

#if FRAME_SIZE == 8
	SET_BIT(UCSRC, UCSRC_UCSZ0);
     e6e:	a0 e4       	ldi	r26, 0x40	; 64
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e0 e4       	ldi	r30, 0x40	; 64
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSRC_UCSZ1);
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
#endif

#if PARITY_MODE == USART_PARITY_DISABLED
	CLR_BIT(UCSRC, UCSRC_UPM1);
     e8a:	a0 e4       	ldi	r26, 0x40	; 64
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e0 e4       	ldi	r30, 0x40	; 64
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UPM0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
#endif

#if STOP_BIT_SELECT == USART_STOP_2BIT
	SET_BIT(UCSRC, UCSRC_USBS);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24
#elif STOP_BIT_SELECT == USART_STOP_1BIT
	CLR_BIT(UCSRC, UCSRC_USBS);
#endif

	/* Write data in UBRR*/
	CLR_BIT(UCSRC, UCSRC_URSEL);
     eb4:	a0 e4       	ldi	r26, 0x40	; 64
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e0 e4       	ldi	r30, 0x40	; 64
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	8c 93       	st	X, r24

	UCSRC = 0; // writing to UBRRH
     ec2:	e0 e4       	ldi	r30, 0x40	; 64
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	10 82       	st	Z, r1
	UBRRL = UBRR_VALUE;
     ec8:	e9 e2       	ldi	r30, 0x29	; 41
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8f ec       	ldi	r24, 0xCF	; 207
     ece:	80 83       	st	Z, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	SET_BIT(UCSRB, UCSRB_RXEN);
     ed0:	aa e2       	ldi	r26, 0x2A	; 42
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ea e2       	ldi	r30, 0x2A	; 42
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_TXEN);
     ede:	aa e2       	ldi	r26, 0x2A	; 42
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e2       	ldi	r30, 0x2A	; 42
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <USART_voidEnableUDREInterrupt>:


void USART_voidEnableUDREInterrupt(){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
     efa:	aa e2       	ldi	r26, 0x2A	; 42
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ea e2       	ldi	r30, 0x2A	; 42
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 62       	ori	r24, 0x20	; 32
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <USART_voidDisableUDREInterrupt>:

void USART_voidDisableUDREInterrupt(){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
     f16:	aa e2       	ldi	r26, 0x2A	; 42
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <USART_voidEnableRXCInterrupt>:

void USART_voidEnableRXCInterrupt(){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RXCIE);
     f32:	aa e2       	ldi	r26, 0x2A	; 42
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e2       	ldi	r30, 0x2A	; 42
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <USART_voidDisableRXCInterrupt>:

void USART_voidDisableRXCInterrupt(){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_RXCIE);
     f4e:	aa e2       	ldi	r26, 0x2A	; 42
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <USART_voidSendByte>:

void USART_voidSendByte(const u8 data)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UCSRA_UDRE));
     f6e:	eb e2       	ldi	r30, 0x2B	; 43
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	82 95       	swap	r24
     f76:	86 95       	lsr	r24
     f78:	87 70       	andi	r24, 0x07	; 7
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	81 70       	andi	r24, 0x01	; 1
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 f3       	breq	.-24     	; 0xf6e <USART_voidSendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
     f86:	ec e2       	ldi	r30, 0x2C	; 44
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <USART_voidSendInterruptByte>:

void USART_voidSendInterruptByte(const u8 data){
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     fa2:	ec e2       	ldi	r30, 0x2C	; 44
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	80 83       	st	Z, r24
}
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <USART_u8ReceiveInterruptByte>:

u8 USART_u8ReceiveInterruptByte(){
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA, UCSRA_RXC));
     fce:	eb e2       	ldi	r30, 0x2B	; 43
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	dc f7       	brge	.-10     	; 0xfce <USART_u8ReceiveByte+0x8>
	return UDR;
     fd8:	ec e2       	ldi	r30, 0x2C	; 44
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <USART_voidSendString>:

void USART_voidSendString(const u8* str)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <USART_voidSendString+0x6>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	0a c0       	rjmp	.+20     	; 0x1008 <USART_voidSendString+0x24>
	while(*str != '\0')
	{
		USART_voidSendByte(*str);
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	0e 94 b1 07 	call	0xf62	; 0xf62 <USART_voidSendByte>
		str++;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_voidSendString(const u8* str)
{
	while(*str != '\0')
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	89 f7       	brne	.-30     	; 0xff4 <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*str);
		str++;
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <USART_voidReceiveString>:

void USART_voidReceiveString(u8* str)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <USART_voidReceiveString+0xa>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <USART_voidReceiveString+0x36>
	while(str[i] != '\0')
	{
		str[i++] = USART_u8ReceiveByte();
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	8c 01       	movw	r16, r24
    1040:	02 0f       	add	r16, r18
    1042:	13 1f       	adc	r17, r19
    1044:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <USART_u8ReceiveByte>
    1048:	f8 01       	movw	r30, r16
    104a:	80 83       	st	Z, r24
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* str)
{
	u8 i = 0;
	while(str[i] != '\0')
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	31 f7       	brne	.-52     	; 0x1034 <USART_voidReceiveString+0x18>
	{
		str[i++] = USART_u8ReceiveByte();
	}
	str[i]= '\0';
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	fc 01       	movw	r30, r24
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	10 82       	st	Z, r1
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <USART_voidRXCSetCallBack>:

void USART_voidRXCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <USART_voidRXCSetCallBack+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
	Global_RXCCallBack = Copy_pvCallBackFunc;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	90 93 fd 01 	sts	0x01FD, r25
    10a0:	80 93 fc 01 	sts	0x01FC, r24
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <USART_voidUDRESetCallBack>:

void USART_voidUDRESetCallBack(void (*Copy_pvCallBackFunc)(void)){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <USART_voidUDRESetCallBack+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
	Global_UDRECallBack = Copy_pvCallBackFunc;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	90 93 fb 01 	sts	0x01FB, r25
    10c4:	80 93 fa 01 	sts	0x01FA, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <__vector_13>:

void  __vector_13 (void)	__attribute__((signal));
void  __vector_13 (void)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	if(Global_RXCCallBack != NULL)
    10fc:	80 91 fc 01 	lds	r24, 0x01FC
    1100:	90 91 fd 01 	lds	r25, 0x01FD
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	29 f0       	breq	.+10     	; 0x1112 <__vector_13+0x40>
	{
		Global_RXCCallBack();
    1108:	e0 91 fc 01 	lds	r30, 0x01FC
    110c:	f0 91 fd 01 	lds	r31, 0x01FD
    1110:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_14>:


void  __vector_14 (void)	__attribute__((signal));
void  __vector_14 (void)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if(Global_UDRECallBack != NULL)
    1162:	80 91 fa 01 	lds	r24, 0x01FA
    1166:	90 91 fb 01 	lds	r25, 0x01FB
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <__vector_14+0x40>
	{
		Global_UDRECallBack();
    116e:	e0 91 fa 01 	lds	r30, 0x01FA
    1172:	f0 91 fb 01 	lds	r31, 0x01FB
    1176:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <TMR2_voidInit>:

/*Define Pointer to TIMER2 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR2_voidInit(){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
#if       TIMER2_Mode == TIMER2_Normal
	/*Choose Normal Mode*/
	CLR_BIT(TCCR2, TCCR2_WGM20);
    11a6:	a5 e4       	ldi	r26, 0x45	; 69
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e4       	ldi	r30, 0x45	; 69
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7b       	andi	r24, 0xBF	; 191
    11b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_WGM21);
    11b4:	a5 e4       	ldi	r26, 0x45	; 69
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e4       	ldi	r30, 0x45	; 69
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	87 7f       	andi	r24, 0xF7	; 247
    11c0:	8c 93       	st	X, r24

	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE2);
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	8c 93       	st	X, r24

	/*Set PRESCALAR 64*/
	SET_BIT(TCCR2, TCCR2_CS22);
    11d0:	a5 e4       	ldi	r26, 0x45	; 69
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e4       	ldi	r30, 0x45	; 69
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	84 60       	ori	r24, 0x04	; 4
    11dc:	8c 93       	st	X, r24
	SET_BIT(TCCR2, TCCR2_CS21);
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_CS22);
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8b 7f       	andi	r24, 0xFB	; 251
    11f8:	8c 93       	st	X, r24
	/*Set PRESCALAR 1*/
	SET_BIT(TCCR2, TCCR2_CS22);
	CLR_BIT(TCCR2, TCCR2_CS21);
	CLR_BIT(TCCR2, TCCR2_CS22);
#endif
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <TMR2_voidSetDuty>:

void TMR2_voidSetDuty(u8 Copy_u8DutyCycle){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8DutyCycle;               /*Sets OCR2 value*/
    120c:	e3 e4       	ldi	r30, 0x43	; 67
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	80 83       	st	Z, r24
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <TMR2_voidTimer2CTCSetCallBack>:

void TMR2_voidTimer2CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <TMR2_voidTimer2CTCSetCallBack+0x6>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	90 93 01 02 	sts	0x0201, r25
    1232:	80 93 00 02 	sts	0x0200, r24
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TMR2_voidTimer2OVSetCallBack>:

void TMR2_voidTimer2OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TMR2_voidTimer2OVSetCallBack+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	90 93 ff 01 	sts	0x01FF, r25
    1256:	80 93 fe 01 	sts	0x01FE, r24
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TMR2_voidSetBusyWait>:

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TMR2_voidSetBusyWait+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <TMR2_voidSetBusyWait+0x8>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9d 83       	std	Y+5, r25	; 0x05
    1274:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 2;
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 2;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <TMR2_voidSetBusyWait+0x5c>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF2)){
    1284:	e8 e5       	ldi	r30, 0x58	; 88
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	86 95       	lsr	r24
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	90 70       	andi	r25, 0x00	; 0
    1294:	88 23       	and	r24, r24
    1296:	51 f0       	breq	.+20     	; 0x12ac <TMR2_voidSetBusyWait+0x48>
			counter++;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF2);
    129e:	a8 e5       	ldi	r26, 0x58	; 88
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e5       	ldi	r30, 0x58	; 88
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	8c 93       	st	X, r24
		}
		if(counter == 4){
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <TMR2_voidSetBusyWait+0x5c>
			Local_u8Counter++;
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	9b 83       	std	Y+3, r25	; 0x03
    12ba:	8a 83       	std	Y+2, r24	; 0x02
			counter = 2;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	89 83       	std	Y+1, r24	; 0x01
}

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 2;
	u8 counter = 2;
	while(Local_u8Counter != Copy_u8WaitTime){
    12c0:	2a 81       	ldd	r18, Y+2	; 0x02
    12c2:	3b 81       	ldd	r19, Y+3	; 0x03
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	d9 f6       	brne	.-74     	; 0x1284 <TMR2_voidSetBusyWait+0x20>
		if(counter == 4){
			Local_u8Counter++;
			counter = 2;
		}
	}
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TMR2_u8GetTCNT>:

u8 TMR2_u8GetTCNT(){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    12e6:	e4 e4       	ldi	r30, 0x44	; 68
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TMR2_voidSetTCNT>:

void TMR2_voidSetTCNT(u8 value){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    12fe:	e4 e4       	ldi	r30, 0x44	; 68
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <__vector_5>:

//TIMER OVERFLOW ISR
void  __vector_5 (void)	__attribute__((signal));
void  __vector_5 (void)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    1338:	80 91 fe 01 	lds	r24, 0x01FE
    133c:	90 91 ff 01 	lds	r25, 0x01FF
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	29 f0       	breq	.+10     	; 0x134e <__vector_5+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    1344:	e0 91 fe 01 	lds	r30, 0x01FE
    1348:	f0 91 ff 01 	lds	r31, 0x01FF
    134c:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_4>:

//ON COMPARE ISR
void  __vector_4 (void)	__attribute__((signal));
void  __vector_4 (void)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    139e:	80 91 00 02 	lds	r24, 0x0200
    13a2:	90 91 01 02 	lds	r25, 0x0201
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	29 f0       	breq	.+10     	; 0x13b4 <__vector_4+0x40>
	{
		Global_pvTimerCTCCallBack();
    13aa:	e0 91 00 02 	lds	r30, 0x0200
    13ae:	f0 91 01 02 	lds	r31, 0x0201
    13b2:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <TMR1_voidInit>:
#include"../../../Library/Bit_Math.h"
#include "../Header/TMR1_Interface.h"

static void (*Global_pvTimerICUCallBack)(void)= NULL;

void TMR1_voidInit(){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
	TCCR1B = 0;
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	10 82       	st	Z, r1
#endif
#endif

#elif TIMER1_Mode == TIMER1_ICU
#if TIMER1_DefaultEdge == TIMER1_RISING
	SET_BIT(TCCR1B,TCCR1B_ICES);
    13ee:	ae e4       	ldi	r26, 0x4E	; 78
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ee e4       	ldi	r30, 0x4E	; 78
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 64       	ori	r24, 0x40	; 64
    13fa:	8c 93       	st	X, r24
#endif

#if TIMER1_NoiseOption == TIMER1_ACTIVENOISECANCELLER
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
#elif TIMER1_NoiseOption == TIMER1_NONOISECANCELLER
	CLR_BIT(TCCR1B,TCCR1B_ICNC1);
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8f 77       	andi	r24, 0x7F	; 127
    1408:	8c 93       	st	X, r24
#endif

	TCNT1 = 0; /*init timer1 counter 0*/
    140a:	ec e4       	ldi	r30, 0x4C	; 76
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	11 82       	std	Z+1, r1	; 0x01
    1410:	10 82       	st	Z, r1
	ICR1 = 0;  /*init Input Capture register counter 0*/
    1412:	e6 e4       	ldi	r30, 0x46	; 70
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	10 82       	st	Z, r1

	/* Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	8c 93       	st	X, r24
#endif
	SET_BIT(TCCR1B,TCCR1B_CS10);
    1428:	ae e4       	ldi	r26, 0x4E	; 78
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ee e4       	ldi	r30, 0x4E	; 78
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    1444:	ae e4       	ldi	r26, 0x4E	; 78
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ee e4       	ldi	r30, 0x4E	; 78
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	8c 93       	st	X, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 value){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <TMR1_voidSetICR+0x6>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1466:	e6 e4       	ldi	r30, 0x46	; 70
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <TMR1_voidSetTimerValue>:

void TMR1_voidSetTimerValue(u16 value){
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <TMR1_voidSetTimerValue+0x6>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    148a:	ec e4       	ldi	r30, 0x4C	; 76
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <TMR1_u16ReadTimerValue>:
u16 TMR1_u16ReadTimerValue(){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    14a8:	ec e4       	ldi	r30, 0x4C	; 76
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
}
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u16 duty){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <TMR1_voidSetDutyCycle+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    14c4:	ea e4       	ldi	r30, 0x4A	; 74
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TMR1_ICUsetEdgeDetectionMode>:

void TMR1_ICUsetEdgeDetectionMode(u8 edge)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	41 f4       	brne	.+16     	; 0x14fc <TMR1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	8c 93       	st	X, r24
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <TMR1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	39 f4       	brne	.+14     	; 0x1510 <TMR1_ICUsetEdgeDetectionMode+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES);
    1502:	ae e4       	ldi	r26, 0x4E	; 78
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ee e4       	ldi	r30, 0x4E	; 78
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	8c 93       	st	X, r24
	}
}
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <TMR1_ICUgetInputCaptureValue>:

u16 TMR1_ICUgetInputCaptureValue()
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1520:	e6 e4       	ldi	r30, 0x46	; 70
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <TMR1_ICUclearTimerValue>:

void TMR1_ICUclearTimerValue()
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1536:	ec e4       	ldi	r30, 0x4C	; 76
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	11 82       	std	Z+1, r1	; 0x01
    153c:	10 82       	st	Z, r1
}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <TMR1_ICUDeInit>:

void TMR1_ICUDeInit()
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    154c:	ef e4       	ldi	r30, 0x4F	; 79
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	10 82       	st	Z, r1
	TCCR1B = 0;
    1552:	ee e4       	ldi	r30, 0x4E	; 78
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	10 82       	st	Z, r1
	TCNT1  = 0;
    1558:	ec e4       	ldi	r30, 0x4C	; 76
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	11 82       	std	Z+1, r1	; 0x01
    155e:	10 82       	st	Z, r1
	ICR1   = 0;
    1560:	e6 e4       	ldi	r30, 0x46	; 70
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	11 82       	std	Z+1, r1	; 0x01
    1566:	10 82       	st	Z, r1

	/* Disable the interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1568:	a9 e5       	ldi	r26, 0x59	; 89
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e9 e5       	ldi	r30, 0x59	; 89
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 7d       	andi	r24, 0xDF	; 223
    1574:	8c 93       	st	X, r24
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <TMR1_voidTimer1ICUSetCallBack>:

void TMR1_voidTimer1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <TMR1_voidTimer1ICUSetCallBack+0x6>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	90 93 03 02 	sts	0x0203, r25
    1592:	80 93 02 02 	sts	0x0202, r24
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    15ca:	80 91 02 02 	lds	r24, 0x0202
    15ce:	90 91 03 02 	lds	r25, 0x0203
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    15d6:	e0 91 02 02 	lds	r30, 0x0202
    15da:	f0 91 03 02 	lds	r31, 0x0203
    15de:	09 95       	icall
	}
}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <TMR0_voidInit>:

/*Define Pointer to TIMER0 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR0_voidInit(){
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0 , TCCR0_COM01);
#endif
#elif     TIMER0_Mode == TIMER0_PWM

	/*Choose Fast PWM Mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
    160e:	a3 e5       	ldi	r26, 0x53	; 83
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e3 e5       	ldi	r30, 0x53	; 83
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 64       	ori	r24, 0x40	; 64
    161a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    161c:	a3 e5       	ldi	r26, 0x53	; 83
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e3 e5       	ldi	r30, 0x53	; 83
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	8c 93       	st	X, r24

	/*SET OC0 ON TOP CLEAR OC0 ON COMPARE*/
	CLR_BIT(TCCR0, TCCR0_COM00);
    162a:	a3 e5       	ldi	r26, 0x53	; 83
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7e       	andi	r24, 0xEF	; 239
    1636:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
    1638:	a3 e5       	ldi	r26, 0x53	; 83
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e3 e5       	ldi	r30, 0x53	; 83
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 62       	ori	r24, 0x20	; 32
    1644:	8c 93       	st	X, r24

	OCR0=0;
    1646:	ec e5       	ldi	r30, 0x5C	; 92
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
	/*Set PRESCALAR*/
	SET_BIT(TCCR0, TCCR0_CS00);
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	81 60       	ori	r24, 0x01	; 1
    1658:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS01);
    165a:	a3 e5       	ldi	r26, 0x53	; 83
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e5       	ldi	r30, 0x53	; 83
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8d 7f       	andi	r24, 0xFD	; 253
    1666:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS02);
    1668:	a3 e5       	ldi	r26, 0x53	; 83
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e3 e5       	ldi	r30, 0x53	; 83
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	84 60       	ori	r24, 0x04	; 4
    1674:	8c 93       	st	X, r24
	/*Set PRESCALAR Falling*/
	CLR_BIT(TCCR0, TCCR0_CS00);
	SET_BIT(TCCR0, TCCR0_CS01);
	SET_BIT(TCCR0, TCCR0_CS02);
#endif
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <TMR0_voidSetDuty>:

void TMR0_voidSetDuty(u8 Copy_u8DutyCycle){
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    1688:	ec e5       	ldi	r30, 0x5C	; 92
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	80 83       	st	Z, r24
}
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <TMR0_voidTimer0CTCSetCallBack>:

void TMR0_voidTimer0CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <TMR0_voidTimer0CTCSetCallBack+0x6>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	90 93 07 02 	sts	0x0207, r25
    16ae:	80 93 06 02 	sts	0x0206, r24
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <TMR0_voidTimer0OVSetCallBack>:

void TMR0_voidTimer0OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <TMR0_voidTimer0OVSetCallBack+0x6>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	90 93 05 02 	sts	0x0205, r25
    16d2:	80 93 04 02 	sts	0x0204, r24
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <TMR0_voidSetBusyWait>:

void TMR0_voidSetBusyWait(u16 Copy_u8WaitTime){
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <TMR0_voidSetBusyWait+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <TMR0_voidSetBusyWait+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 0;
    16f2:	1b 82       	std	Y+3, r1	; 0x03
    16f4:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter = 0;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	1d c0       	rjmp	.+58     	; 0x1734 <TMR0_voidSetBusyWait+0x54>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF0)){
    16fa:	e8 e5       	ldi	r30, 0x58	; 88
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	86 95       	lsr	r24
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	88 23       	and	r24, r24
    170c:	51 f0       	breq	.+20     	; 0x1722 <TMR0_voidSetBusyWait+0x42>
			counter++;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF0);
    1714:	a8 e5       	ldi	r26, 0x58	; 88
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e5       	ldi	r30, 0x58	; 88
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	8c 93       	st	X, r24
		}
		if(counter == 4){
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	31 f4       	brne	.+12     	; 0x1734 <TMR0_voidSetBusyWait+0x54>
			Local_u8Counter++;
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	9b 83       	std	Y+3, r25	; 0x03
    1730:	8a 83       	std	Y+2, r24	; 0x02
			counter = 0;
    1732:	19 82       	std	Y+1, r1	; 0x01
}

void TMR0_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 0;
	u8 counter = 0;
	while(Local_u8Counter != Copy_u8WaitTime){
    1734:	2a 81       	ldd	r18, Y+2	; 0x02
    1736:	3b 81       	ldd	r19, Y+3	; 0x03
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	e1 f6       	brne	.-72     	; 0x16fa <TMR0_voidSetBusyWait+0x1a>
		if(counter == 4){
			Local_u8Counter++;
			counter = 0;
		}
	}
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <TMR0_u8GetTCNT>:

u8 TMR0_u8GetTCNT(){
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    175a:	e2 e5       	ldi	r30, 0x52	; 82
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <TMR0_voidSetTCNT>:

void TMR0_voidSetTCNT(u8 value){
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    1772:	e2 e5       	ldi	r30, 0x52	; 82
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	80 83       	st	Z, r24
}
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__vector_11>:

//TIMER OVERFLOW ISR
void  __vector_11 (void)	__attribute__((signal));
void  __vector_11 (void)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    17ac:	80 91 04 02 	lds	r24, 0x0204
    17b0:	90 91 05 02 	lds	r25, 0x0205
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_11+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    17b8:	e0 91 04 02 	lds	r30, 0x0204
    17bc:	f0 91 05 02 	lds	r31, 0x0205
    17c0:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_10>:

//ON COMPARE ISR
void  __vector_10 (void)	__attribute__((signal));
void  __vector_10 (void)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    1812:	80 91 06 02 	lds	r24, 0x0206
    1816:	90 91 07 02 	lds	r25, 0x0207
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	29 f0       	breq	.+10     	; 0x1828 <__vector_10+0x40>
	{
		Global_pvTimerCTCCallBack();
    181e:	e0 91 06 02 	lds	r30, 0x0206
    1822:	f0 91 07 02 	lds	r31, 0x0207
    1826:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	ff 91       	pop	r31
    182e:	ef 91       	pop	r30
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <I2C_Master_voidInit>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/I2C_Interface.h"

void I2C_Master_voidInit(void){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
#if I2C_PRESCALER == I2C_PRESCALER_1
	/*Set Prescaler Values*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    1856:	a1 e2       	ldi	r26, 0x21	; 33
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e2       	ldi	r30, 0x21	; 33
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    1864:	a1 e2       	ldi	r26, 0x21	; 33
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e1 e2       	ldi	r30, 0x21	; 33
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8d 7f       	andi	r24, 0xFD	; 253
    1870:	8c 93       	st	X, r24
	SET_BIT(TWSR, TWSR_TWPS0);
	SET_BIT(TWSR, TWSR_TWPS1);
#endif

	/*Set TWBR with the Value =>100KHZ*/
	TWBR = I2C_TWBR_VALUE;
    1872:	e0 e2       	ldi	r30, 0x20	; 32
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	88 e4       	ldi	r24, 0x48	; 72
    1878:	80 83       	st	Z, r24

	/*Enable  I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
    187a:	a6 e5       	ldi	r26, 0x56	; 86
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e6 e5       	ldi	r30, 0x56	; 86
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	84 60       	ori	r24, 0x04	; 4
    1886:	8c 93       	st	X, r24
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address iN TWAR*/
	TWAR = I2C_Address;
    189a:	e2 e2       	ldi	r30, 0x22	; 34
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	Set_Bit(TWCR,TWCR_TWEA);
    18a2:	a6 e5       	ldi	r26, 0x56	; 86
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e6 e5       	ldi	r30, 0x56	; 86
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 64       	ori	r24, 0x40	; 64
    18ae:	8c 93       	st	X, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	Clear_Bit(TWCR,TWCR_TWEA);
#endif
	/*Enable I2C*/
	SET_BIT(TWCR, TWCR_TWEN);
    18b0:	a6 e5       	ldi	r26, 0x56	; 86
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e5       	ldi	r30, 0x56	; 86
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	84 60       	ori	r24, 0x04	; 4
    18bc:	8c 93       	st	X, r24
}
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <I2C_Master_enuSendStartCond>:

I2C_Error_State I2C_Master_enuSendStartCond(void){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    18d0:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    18d2:	e6 e5       	ldi	r30, 0x56	; 86
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	84 ee       	ldi	r24, 0xE4	; 228
    18d8:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    18da:	e6 e5       	ldi	r30, 0x56	; 86
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	88 23       	and	r24, r24
    18e2:	dc f7       	brge	.-10     	; 0x18da <I2C_Master_enuSendStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckStart){
    18e4:	e1 e2       	ldi	r30, 0x21	; 33
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 7f       	andi	r24, 0xF8	; 248
    18f0:	90 70       	andi	r25, 0x00	; 0
    18f2:	88 30       	cpi	r24, 0x08	; 8
    18f4:	91 05       	cpc	r25, r1
    18f6:	11 f0       	breq	.+4      	; 0x18fc <I2C_Master_enuSendStartCond+0x36>
		state = ErrorStartCondition;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State I2C_Master_enuSendRepeatedStartCond(void){
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    1910:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1912:	e6 e5       	ldi	r30, 0x56	; 86
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	84 ee       	ldi	r24, 0xE4	; 228
    1918:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    191a:	e6 e5       	ldi	r30, 0x56	; 86
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	88 23       	and	r24, r24
    1922:	dc f7       	brge	.-10     	; 0x191a <I2C_Master_enuSendRepeatedStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckReStart){
    1924:	e1 e2       	ldi	r30, 0x21	; 33
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	88 7f       	andi	r24, 0xF8	; 248
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	80 31       	cpi	r24, 0x10	; 16
    1934:	91 05       	cpc	r25, r1
    1936:	11 f0       	breq	.+4      	; 0x193c <I2C_Master_enuSendRepeatedStartCond+0x36>
		state = ErrorRestartCondition;
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
}
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <I2C_Master_enuSendSlaveAddressWithRead>:


I2C_Error_State I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address){
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <I2C_Master_enuSendSlaveAddressWithRead+0x6>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    1952:	19 82       	std	Y+1, r1	; 0x01

	/*Load the slave address*/
	TWDR = I2C_Address;
    1954:	e3 e2       	ldi	r30, 0x23	; 35
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 83       	st	Z, r24
	/*Select the read mode*/
	SET_BIT(TWDR, 0);
    195c:	a3 e2       	ldi	r26, 0x23	; 35
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e3 e2       	ldi	r30, 0x23	; 35
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	81 60       	ori	r24, 0x01	; 1
    1968:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    196a:	e6 e5       	ldi	r30, 0x56	; 86
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	84 ec       	ldi	r24, 0xC4	; 196
    1970:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 23       	and	r24, r24
    197a:	dc f7       	brge	.-10     	; 0x1972 <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithAck){
    197c:	e1 e2       	ldi	r30, 0x21	; 33
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	88 7f       	andi	r24, 0xF8	; 248
    1988:	90 70       	andi	r25, 0x00	; 0
    198a:	80 34       	cpi	r24, 0x40	; 64
    198c:	91 05       	cpc	r25, r1
    198e:	11 f0       	breq	.+4      	; 0x1994 <I2C_Master_enuSendSlaveAddressWithRead+0x4e>
		state = ErrorSlaveAddressReadWithAck;
    1990:	85 e0       	ldi	r24, 0x05	; 5
    1992:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithOutAck){
		state = ErrorSlaveAddressReadWithoutAck;
	}
#endif
	return state;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    19ac:	19 82       	std	Y+1, r1	; 0x01
	/*Load the slave address*/
	TWDR = I2C_Address;
    19ae:	e3 e2       	ldi	r30, 0x23	; 35
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24

	/*Select the write mode*/
	CLR_BIT(TWDR, 0);
    19b6:	a3 e2       	ldi	r26, 0x23	; 35
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e3 e2       	ldi	r30, 0x23	; 35
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8e 7f       	andi	r24, 0xFE	; 254
    19c2:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    19c4:	e6 e5       	ldi	r30, 0x56	; 86
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	84 ec       	ldi	r24, 0xC4	; 196
    19ca:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    19cc:	e6 e5       	ldi	r30, 0x56	; 86
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	88 23       	and	r24, r24
    19d4:	dc f7       	brge	.-10     	; 0x19cc <I2C_Master_enuSendSlaveAddressWithWrite+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithAck){
    19d6:	e1 e2       	ldi	r30, 0x21	; 33
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	88 7f       	andi	r24, 0xF8	; 248
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	88 31       	cpi	r24, 0x18	; 24
    19e6:	91 05       	cpc	r25, r1
    19e8:	11 f0       	breq	.+4      	; 0x19ee <I2C_Master_enuSendSlaveAddressWithWrite+0x4e>
		state = ErrorSlaveAddressWriteWithAck;
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithOutAck){
		state = ErrorSlaveAddressWriteWithoutAck;
	}
#endif
	return state;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <I2C_Master_enuSendu8Data>:


I2C_Error_State I2C_Master_enuSendu8Data(u8 I2C_Data){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <I2C_Master_enuSendu8Data+0x6>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    1a06:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWDR = I2C_Data;
    1a08:	e3 e2       	ldi	r30, 0x23	; 35
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1a10:	e6 e5       	ldi	r30, 0x56	; 86
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	84 ec       	ldi	r24, 0xC4	; 196
    1a16:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1a18:	e6 e5       	ldi	r30, 0x56	; 86
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	88 23       	and	r24, r24
    1a20:	dc f7       	brge	.-10     	; 0x1a18 <I2C_Master_enuSendu8Data+0x1e>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithAck){
    1a22:	e1 e2       	ldi	r30, 0x21	; 33
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	88 7f       	andi	r24, 0xF8	; 248
    1a2e:	90 70       	andi	r25, 0x00	; 0
    1a30:	88 32       	cpi	r24, 0x28	; 40
    1a32:	91 05       	cpc	r25, r1
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <I2C_Master_enuSendu8Data+0x40>
		state = ErrorWriteDataWithAck;
    1a36:	87 e0       	ldi	r24, 0x07	; 7
    1a38:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithOutAck){
		state = ErrorWriteDataWithoutAck;
	}
#endif
	return state;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <I2C_Master_enuReadu8Data>:

I2C_Error_State I2C_Master_enuReadu8Data(u8* I2C_Data){
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <I2C_Master_enuReadu8Data+0x6>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <I2C_Master_enuReadu8Data+0x8>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	9b 83       	std	Y+3, r25	; 0x03
    1a54:	8a 83       	std	Y+2, r24	; 0x02
	if(I2C_Data != NULL){
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	f9 f0       	breq	.+62     	; 0x1a9c <I2C_Master_enuReadu8Data+0x56>
		I2C_Error_State state = NoError;
    1a5e:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
		/*Enable  ACK*/
		TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1a60:	e6 e5       	ldi	r30, 0x56	; 86
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	84 ec       	ldi	r24, 0xC4	; 196
    1a66:	80 83       	st	Z, r24
		/*Disable  ACK*/
		TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

		/*Wait for the flag*/
		while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1a68:	e6 e5       	ldi	r30, 0x56	; 86
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 23       	and	r24, r24
    1a70:	dc f7       	brge	.-10     	; 0x1a68 <I2C_Master_enuReadu8Data+0x22>

		/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithAck){
    1a72:	e1 e2       	ldi	r30, 0x21	; 33
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	88 7f       	andi	r24, 0xF8	; 248
    1a7e:	90 70       	andi	r25, 0x00	; 0
    1a80:	80 35       	cpi	r24, 0x50	; 80
    1a82:	91 05       	cpc	r25, r1
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <I2C_Master_enuReadu8Data+0x44>
			state = ErrorReadDataWithAck;
    1a86:	89 e0       	ldi	r24, 0x09	; 9
    1a88:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
			state = ErrorReadDataWithoutAck;
		}
#endif
		*I2C_Data = TWDR;
    1a8a:	e3 e2       	ldi	r30, 0x23	; 35
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	ea 81       	ldd	r30, Y+2	; 0x02
    1a92:	fb 81       	ldd	r31, Y+3	; 0x03
    1a94:	80 83       	st	Z, r24
		return state;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	8c 83       	std	Y+4, r24	; 0x04
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <I2C_Master_enuReadu8Data+0x5a>
	}

	return -1;
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	8c 83       	std	Y+4, r24	; 0x04
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <I2C_Master_voidFlush>:
I2C_Error_State I2C_Master_voidFlush(){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    1aba:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1abc:	e6 e5       	ldi	r30, 0x56	; 86
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	84 e8       	ldi	r24, 0x84	; 132
    1ac2:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1ac4:	e6 e5       	ldi	r30, 0x56	; 86
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	dc f7       	brge	.-10     	; 0x1ac4 <I2C_Master_voidFlush+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
    1ace:	e1 e2       	ldi	r30, 0x21	; 33
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	88 7f       	andi	r24, 0xF8	; 248
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	88 35       	cpi	r24, 0x58	; 88
    1ade:	91 05       	cpc	r25, r1
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <I2C_Master_voidFlush+0x36>
		state = ErrorReadDataWithoutAck;
    1ae2:	8a e0       	ldi	r24, 0x0A	; 10
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <I2C_Master_enuSendStopCond>:

void I2C_Master_enuSendStopCond(void){
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1af8:	e6 e5       	ldi	r30, 0x56	; 86
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	84 e9       	ldi	r24, 0x94	; 148
    1afe:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWSTO) == 1);
    1b00:	e6 e5       	ldi	r30, 0x56	; 86
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	82 95       	swap	r24
    1b08:	8f 70       	andi	r24, 0x0F	; 15
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	a9 f7       	brne	.-22     	; 0x1b00 <I2C_Master_enuSendStopCond+0x10>

}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <I2C_Slave_enuReadu8Data>:

I2C_Error_State I2C_Slave_enuReadu8Data(u8* I2C_Data){
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <I2C_Slave_enuReadu8Data+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01

	return 0;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <GIE_voidEnable>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/GIE_Interface.h"

void GIE_voidEnable(){
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1b3e:	af e5       	ldi	r26, 0x5F	; 95
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	ef e5       	ldi	r30, 0x5F	; 95
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	8c 93       	st	X, r24
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <GIE_voidDisable>:

void GIE_voidDisable(){
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1b5a:	af e5       	ldi	r26, 0x5F	; 95
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ef e5       	ldi	r30, 0x5F	; 95
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 77       	andi	r24, 0x7F	; 127
    1b66:	8c 93       	st	X, r24
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <EXTI0_voidInit>:
void (*Global_EXTI0_CallBack)(void)= NULL;
void (*Global_EXTI1_CallBack)(void)= NULL;
void (*Global_EXTI2_CallBack)(void)= NULL;

//init the INT with sensing mood in preprocessing stage
void EXTI0_voidInit(void){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#elif 	INT0_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1b76:	a5 e5       	ldi	r26, 0x55	; 85
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e5       	ldi	r30, 0x55	; 85
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	81 60       	ori	r24, 0x01	; 1
    1b82:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1b84:	a5 e5       	ldi	r26, 0x55	; 85
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e5 e5       	ldi	r30, 0x55	; 85
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <EXTI1_voidInit>:
void EXTI1_voidInit(void){
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#elif 	INT1_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1ba0:	a5 e5       	ldi	r26, 0x55	; 85
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e5       	ldi	r30, 0x55	; 85
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	84 60       	ori	r24, 0x04	; 4
    1bac:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1bae:	a5 e5       	ldi	r26, 0x55	; 85
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e5 e5       	ldi	r30, 0x55	; 85
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 60       	ori	r24, 0x08	; 8
    1bba:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <EXTI2_voidInit>:
void EXTI2_voidInit(void){
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT0*/
#if 	INT2_SENSE == EXTI_FALLING
	CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#elif 	INT2_SENSE == EXTI_RISING
	SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1bca:	a4 e5       	ldi	r26, 0x54	; 84
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e5       	ldi	r30, 0x54	; 84
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <EXTI0_voidEnable>:

//enable EXTI
void EXTI0_voidEnable(void){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1be6:	ab e5       	ldi	r26, 0x5B	; 91
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	eb e5       	ldi	r30, 0x5B	; 91
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 64       	ori	r24, 0x40	; 64
    1bf2:	8c 93       	st	X, r24
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <EXTI1_voidEnable>:
void EXTI1_voidEnable(void){
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1c02:	ab e5       	ldi	r26, 0x5B	; 91
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e5       	ldi	r30, 0x5B	; 91
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	8c 93       	st	X, r24
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <EXTI2_voidEnable>:
void EXTI2_voidEnable(void){
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1c1e:	ab e5       	ldi	r26, 0x5B	; 91
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	eb e5       	ldi	r30, 0x5B	; 91
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 62       	ori	r24, 0x20	; 32
    1c2a:	8c 93       	st	X, r24
}
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <EXTI0_voidDisable>:

//disable EXTI
void EXTI0_voidDisable(void){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1c3a:	ab e5       	ldi	r26, 0x5B	; 91
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	eb e5       	ldi	r30, 0x5B	; 91
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7b       	andi	r24, 0xBF	; 191
    1c46:	8c 93       	st	X, r24
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1c56:	ab e5       	ldi	r26, 0x5B	; 91
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	eb e5       	ldi	r30, 0x5B	; 91
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8f 77       	andi	r24, 0x7F	; 127
    1c62:	8c 93       	st	X, r24
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1c72:	ab e5       	ldi	r26, 0x5B	; 91
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	eb e5       	ldi	r30, 0x5B	; 91
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7d       	andi	r24, 0xDF	; 223
    1c7e:	8c 93       	st	X, r24
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <EXTI0_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXTI0_voidSetSignalch(u8 SenseCpy){
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <EXTI0_voidSetSignalch+0x6>
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3b 83       	std	Y+3, r19	; 0x03
    1c9c:	2a 83       	std	Y+2, r18	; 0x02
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	99 f1       	breq	.+102    	; 0x1d0e <EXTI0_voidSetSignalch+0x88>
    1ca8:	2a 81       	ldd	r18, Y+2	; 0x02
    1caa:	3b 81       	ldd	r19, Y+3	; 0x03
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <EXTI0_voidSetSignalch+0x36>
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	c9 f1       	breq	.+114    	; 0x1d2c <EXTI0_voidSetSignalch+0xa6>
    1cba:	46 c0       	rjmp	.+140    	; 0x1d48 <EXTI0_voidSetSignalch+0xc2>
    1cbc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cbe:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	31 f0       	breq	.+12     	; 0x1cd2 <EXTI0_voidSetSignalch+0x4c>
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <EXTI0_voidSetSignalch+0x6a>
    1cd0:	3b c0       	rjmp	.+118    	; 0x1d48 <EXTI0_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1cd2:	a5 e5       	ldi	r26, 0x55	; 85
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e5 e5       	ldi	r30, 0x55	; 85
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1ce0:	a5 e5       	ldi	r26, 0x55	; 85
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e5       	ldi	r30, 0x55	; 85
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	82 60       	ori	r24, 0x02	; 2
    1cec:	8c 93       	st	X, r24
    1cee:	2c c0       	rjmp	.+88     	; 0x1d48 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1cf0:	a5 e5       	ldi	r26, 0x55	; 85
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e5       	ldi	r30, 0x55	; 85
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1cfe:	a5 e5       	ldi	r26, 0x55	; 85
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e5       	ldi	r30, 0x55	; 85
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	82 60       	ori	r24, 0x02	; 2
    1d0a:	8c 93       	st	X, r24
    1d0c:	1d c0       	rjmp	.+58     	; 0x1d48 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1d0e:	a5 e5       	ldi	r26, 0x55	; 85
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e5       	ldi	r30, 0x55	; 85
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	81 60       	ori	r24, 0x01	; 1
    1d1a:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1d1c:	a5 e5       	ldi	r26, 0x55	; 85
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e5       	ldi	r30, 0x55	; 85
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8d 7f       	andi	r24, 0xFD	; 253
    1d28:	8c 93       	st	X, r24
    1d2a:	0e c0       	rjmp	.+28     	; 0x1d48 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1d2c:	a5 e5       	ldi	r26, 0x55	; 85
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e5       	ldi	r30, 0x55	; 85
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8e 7f       	andi	r24, 0xFE	; 254
    1d38:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1d3a:	a5 e5       	ldi	r26, 0x55	; 85
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e5       	ldi	r30, 0x55	; 85
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8d 7f       	andi	r24, 0xFD	; 253
    1d46:	8c 93       	st	X, r24
		break;
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <EXTI1_voidSetSignalch>:
void EXTI1_voidSetSignalch(u8 SenseCpy){
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <EXTI1_voidSetSignalch+0x6>
    1d5a:	0f 92       	push	r0
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3b 83       	std	Y+3, r19	; 0x03
    1d6a:	2a 83       	std	Y+2, r18	; 0x02
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	91 05       	cpc	r25, r1
    1d74:	99 f1       	breq	.+102    	; 0x1ddc <EXTI1_voidSetSignalch+0x88>
    1d76:	2a 81       	ldd	r18, Y+2	; 0x02
    1d78:	3b 81       	ldd	r19, Y+3	; 0x03
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <EXTI1_voidSetSignalch+0x36>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	c9 f1       	breq	.+114    	; 0x1dfa <EXTI1_voidSetSignalch+0xa6>
    1d88:	46 c0       	rjmp	.+140    	; 0x1e16 <EXTI1_voidSetSignalch+0xc2>
    1d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	31 05       	cpc	r19, r1
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <EXTI1_voidSetSignalch+0x4c>
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	83 30       	cpi	r24, 0x03	; 3
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	81 f0       	breq	.+32     	; 0x1dbe <EXTI1_voidSetSignalch+0x6a>
    1d9e:	3b c0       	rjmp	.+118    	; 0x1e16 <EXTI1_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1da0:	a5 e5       	ldi	r26, 0x55	; 85
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e5       	ldi	r30, 0x55	; 85
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8b 7f       	andi	r24, 0xFB	; 251
    1dac:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1dae:	a5 e5       	ldi	r26, 0x55	; 85
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e5 e5       	ldi	r30, 0x55	; 85
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 60       	ori	r24, 0x08	; 8
    1dba:	8c 93       	st	X, r24
    1dbc:	2c c0       	rjmp	.+88     	; 0x1e16 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1dbe:	a5 e5       	ldi	r26, 0x55	; 85
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 e5       	ldi	r30, 0x55	; 85
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	84 60       	ori	r24, 0x04	; 4
    1dca:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1dcc:	a5 e5       	ldi	r26, 0x55	; 85
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e5 e5       	ldi	r30, 0x55	; 85
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	88 60       	ori	r24, 0x08	; 8
    1dd8:	8c 93       	st	X, r24
    1dda:	1d c0       	rjmp	.+58     	; 0x1e16 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1ddc:	a5 e5       	ldi	r26, 0x55	; 85
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e5       	ldi	r30, 0x55	; 85
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	84 60       	ori	r24, 0x04	; 4
    1de8:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1dea:	a5 e5       	ldi	r26, 0x55	; 85
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e5       	ldi	r30, 0x55	; 85
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	87 7f       	andi	r24, 0xF7	; 247
    1df6:	8c 93       	st	X, r24
    1df8:	0e c0       	rjmp	.+28     	; 0x1e16 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1dfa:	a5 e5       	ldi	r26, 0x55	; 85
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e5       	ldi	r30, 0x55	; 85
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8b 7f       	andi	r24, 0xFB	; 251
    1e06:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1e08:	a5 e5       	ldi	r26, 0x55	; 85
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e5 e5       	ldi	r30, 0x55	; 85
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	87 7f       	andi	r24, 0xF7	; 247
    1e14:	8c 93       	st	X, r24
		break;
	}
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <EXTI2_voidSetSignalch>:
void EXTI2_voidSetSignalch(u8 SenseCpy){
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <EXTI2_voidSetSignalch+0x6>
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3b 83       	std	Y+3, r19	; 0x03
    1e38:	2a 83       	std	Y+2, r18	; 0x02
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <EXTI2_voidSetSignalch+0x2e>
    1e44:	2a 81       	ldd	r18, Y+2	; 0x02
    1e46:	3b 81       	ldd	r19, Y+3	; 0x03
    1e48:	23 30       	cpi	r18, 0x03	; 3
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	49 f0       	breq	.+18     	; 0x1e60 <EXTI2_voidSetSignalch+0x3e>
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <EXTI2_voidSetSignalch+0x4c>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1e50:	a4 e5       	ldi	r26, 0x54	; 84
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e4 e5       	ldi	r30, 0x54	; 84
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 7b       	andi	r24, 0xBF	; 191
    1e5c:	8c 93       	st	X, r24
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <EXTI2_voidSetSignalch+0x4c>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1e60:	a4 e5       	ldi	r26, 0x54	; 84
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e4 e5       	ldi	r30, 0x54	; 84
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 64       	ori	r24, 0x40	; 64
    1e6c:	8c 93       	st	X, r24
		break;
	}
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <EXTI0_VID_SET_CALL_BACK>:

//callback function
void EXTI0_VID_SET_CALL_BACK(void (*PTR)(void)){
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <EXTI0_VID_SET_CALL_BACK+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI0_CallBack = PTR;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	90 93 09 02 	sts	0x0209, r25
    1e90:	80 93 08 02 	sts	0x0208, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <EXTI1_VID_SET_CALL_BACK>:
void EXTI1_VID_SET_CALL_BACK(void (*PTR)(void)){
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <EXTI1_VID_SET_CALL_BACK+0x6>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI1_CallBack = PTR;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	90 93 0b 02 	sts	0x020B, r25
    1eb4:	80 93 0a 02 	sts	0x020A, r24
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <EXTI2_VID_SET_CALL_BACK>:
void EXTI2_VID_SET_CALL_BACK(void (*PTR)(void)){
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <EXTI2_VID_SET_CALL_BACK+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI2_CallBack = PTR;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	90 93 0d 02 	sts	0x020D, r25
    1ed8:	80 93 0c 02 	sts	0x020C, r24
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <__vector_1>:

void __vector_1 (void){
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	2f 93       	push	r18
    1ef2:	3f 93       	push	r19
    1ef4:	4f 93       	push	r20
    1ef6:	5f 93       	push	r21
    1ef8:	6f 93       	push	r22
    1efa:	7f 93       	push	r23
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI0_CallBack != NULL){
    1f10:	80 91 08 02 	lds	r24, 0x0208
    1f14:	90 91 09 02 	lds	r25, 0x0209
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_1+0x40>
		Global_EXTI0_CallBack();
    1f1c:	e0 91 08 02 	lds	r30, 0x0208
    1f20:	f0 91 09 02 	lds	r31, 0x0209
    1f24:	09 95       	icall
	}
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <__vector_2>:
void __vector_2 (void){
    1f4c:	1f 92       	push	r1
    1f4e:	0f 92       	push	r0
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	0f 92       	push	r0
    1f54:	11 24       	eor	r1, r1
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	6f 93       	push	r22
    1f60:	7f 93       	push	r23
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI1_CallBack != NULL){
    1f76:	80 91 0a 02 	lds	r24, 0x020A
    1f7a:	90 91 0b 02 	lds	r25, 0x020B
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <__vector_2+0x40>
		Global_EXTI1_CallBack();
    1f82:	e0 91 0a 02 	lds	r30, 0x020A
    1f86:	f0 91 0b 02 	lds	r31, 0x020B
    1f8a:	09 95       	icall
	}
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	ff 91       	pop	r31
    1f92:	ef 91       	pop	r30
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

00001fb2 <__vector_3>:
void __vector_3 (void){
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	2f 93       	push	r18
    1fbe:	3f 93       	push	r19
    1fc0:	4f 93       	push	r20
    1fc2:	5f 93       	push	r21
    1fc4:	6f 93       	push	r22
    1fc6:	7f 93       	push	r23
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	af 93       	push	r26
    1fce:	bf 93       	push	r27
    1fd0:	ef 93       	push	r30
    1fd2:	ff 93       	push	r31
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI2_CallBack != NULL){
    1fdc:	80 91 0c 02 	lds	r24, 0x020C
    1fe0:	90 91 0d 02 	lds	r25, 0x020D
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	29 f0       	breq	.+10     	; 0x1ff2 <__vector_3+0x40>
		Global_EXTI2_CallBack();
    1fe8:	e0 91 0c 02 	lds	r30, 0x020C
    1fec:	f0 91 0d 02 	lds	r31, 0x020D
    1ff0:	09 95       	icall
	}
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	ff 91       	pop	r31
    1ff8:	ef 91       	pop	r30
    1ffa:	bf 91       	pop	r27
    1ffc:	af 91       	pop	r26
    1ffe:	9f 91       	pop	r25
    2000:	8f 91       	pop	r24
    2002:	7f 91       	pop	r23
    2004:	6f 91       	pop	r22
    2006:	5f 91       	pop	r21
    2008:	4f 91       	pop	r20
    200a:	3f 91       	pop	r19
    200c:	2f 91       	pop	r18
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	0f 90       	pop	r0
    2014:	1f 90       	pop	r1
    2016:	18 95       	reti

00002018 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	6c ef       	ldi	r22, 0xFC	; 252
    2024:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	6f ef       	ldi	r22, 0xFF	; 255
    202c:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    2030:	83 e0       	ldi	r24, 0x03	; 3
    2032:	62 e8       	ldi	r22, 0x82	; 130
    2034:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	6e ef       	ldi	r22, 0xFE	; 254
    203c:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	27 97       	sbiw	r28, 0x07	; 7
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	6a 83       	std	Y+2, r22	; 0x02
    205e:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	85 30       	cpi	r24, 0x05	; 5
    2064:	08 f0       	brcs	.+2      	; 0x2068 <DIO_voidSetPinDir+0x22>
    2066:	f4 c0       	rjmp	.+488    	; 0x2250 <DIO_voidSetPinDir+0x20a>
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <DIO_voidSetPinDir+0x2a>
    206e:	f0 c0       	rjmp	.+480    	; 0x2250 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	08 f0       	brcs	.+2      	; 0x2078 <DIO_voidSetPinDir+0x32>
    2076:	ec c0       	rjmp	.+472    	; 0x2250 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	09 f0       	breq	.+2      	; 0x2080 <DIO_voidSetPinDir+0x3a>
    207e:	70 c0       	rjmp	.+224    	; 0x2160 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3f 83       	std	Y+7, r19	; 0x07
    2088:	2e 83       	std	Y+6, r18	; 0x06
    208a:	8e 81       	ldd	r24, Y+6	; 0x06
    208c:	9f 81       	ldd	r25, Y+7	; 0x07
    208e:	82 30       	cpi	r24, 0x02	; 2
    2090:	91 05       	cpc	r25, r1
    2092:	51 f1       	breq	.+84     	; 0x20e8 <DIO_voidSetPinDir+0xa2>
    2094:	2e 81       	ldd	r18, Y+6	; 0x06
    2096:	3f 81       	ldd	r19, Y+7	; 0x07
    2098:	23 30       	cpi	r18, 0x03	; 3
    209a:	31 05       	cpc	r19, r1
    209c:	34 f4       	brge	.+12     	; 0x20aa <DIO_voidSetPinDir+0x64>
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <DIO_voidSetPinDir+0x7a>
    20a8:	d3 c0       	rjmp	.+422    	; 0x2250 <DIO_voidSetPinDir+0x20a>
    20aa:	2e 81       	ldd	r18, Y+6	; 0x06
    20ac:	3f 81       	ldd	r19, Y+7	; 0x07
    20ae:	23 30       	cpi	r18, 0x03	; 3
    20b0:	31 05       	cpc	r19, r1
    20b2:	71 f1       	breq	.+92     	; 0x2110 <DIO_voidSetPinDir+0xca>
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	91 05       	cpc	r25, r1
    20bc:	e9 f1       	breq	.+122    	; 0x2138 <DIO_voidSetPinDir+0xf2>
    20be:	c8 c0       	rjmp	.+400    	; 0x2250 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    20c0:	aa e3       	ldi	r26, 0x3A	; 58
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ea e3       	ldi	r30, 0x3A	; 58
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_voidSetPinDir+0x98>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_voidSetPinDir+0x94>
    20e2:	84 2b       	or	r24, r20
    20e4:	8c 93       	st	X, r24
    20e6:	b4 c0       	rjmp	.+360    	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    20e8:	a7 e3       	ldi	r26, 0x37	; 55
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e7 e3       	ldi	r30, 0x37	; 55
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 2e       	mov	r0, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <DIO_voidSetPinDir+0xc0>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <DIO_voidSetPinDir+0xbc>
    210a:	84 2b       	or	r24, r20
    210c:	8c 93       	st	X, r24
    210e:	a0 c0       	rjmp	.+320    	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    2110:	a4 e3       	ldi	r26, 0x34	; 52
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e4 e3       	ldi	r30, 0x34	; 52
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_voidSetPinDir+0xe8>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_voidSetPinDir+0xe4>
    2132:	84 2b       	or	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	8c c0       	rjmp	.+280    	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    2138:	a1 e3       	ldi	r26, 0x31	; 49
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e1 e3       	ldi	r30, 0x31	; 49
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_voidSetPinDir+0x110>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_voidSetPinDir+0x10c>
    215a:	84 2b       	or	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	78 c0       	rjmp	.+240    	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	88 23       	and	r24, r24
    2164:	09 f0       	breq	.+2      	; 0x2168 <DIO_voidSetPinDir+0x122>
    2166:	74 c0       	rjmp	.+232    	; 0x2250 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	3d 83       	std	Y+5, r19	; 0x05
    2170:	2c 83       	std	Y+4, r18	; 0x04
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	91 05       	cpc	r25, r1
    217a:	61 f1       	breq	.+88     	; 0x21d4 <DIO_voidSetPinDir+0x18e>
    217c:	2c 81       	ldd	r18, Y+4	; 0x04
    217e:	3d 81       	ldd	r19, Y+5	; 0x05
    2180:	23 30       	cpi	r18, 0x03	; 3
    2182:	31 05       	cpc	r19, r1
    2184:	34 f4       	brge	.+12     	; 0x2192 <DIO_voidSetPinDir+0x14c>
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	91 05       	cpc	r25, r1
    218e:	69 f0       	breq	.+26     	; 0x21aa <DIO_voidSetPinDir+0x164>
    2190:	5f c0       	rjmp	.+190    	; 0x2250 <DIO_voidSetPinDir+0x20a>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	23 30       	cpi	r18, 0x03	; 3
    2198:	31 05       	cpc	r19, r1
    219a:	89 f1       	breq	.+98     	; 0x21fe <DIO_voidSetPinDir+0x1b8>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <DIO_voidSetPinDir+0x162>
    21a6:	40 c0       	rjmp	.+128    	; 0x2228 <DIO_voidSetPinDir+0x1e2>
    21a8:	53 c0       	rjmp	.+166    	; 0x2250 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    21aa:	aa e3       	ldi	r26, 0x3A	; 58
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ea e3       	ldi	r30, 0x3A	; 58
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_voidSetPinDir+0x182>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_voidSetPinDir+0x17e>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	3e c0       	rjmp	.+124    	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    21d4:	a7 e3       	ldi	r26, 0x37	; 55
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e7 e3       	ldi	r30, 0x37	; 55
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_voidSetPinDir+0x1ac>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_voidSetPinDir+0x1a8>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	29 c0       	rjmp	.+82     	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    21fe:	a4 e3       	ldi	r26, 0x34	; 52
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e4 e3       	ldi	r30, 0x34	; 52
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <DIO_voidSetPinDir+0x1d6>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <DIO_voidSetPinDir+0x1d2>
    2220:	80 95       	com	r24
    2222:	84 23       	and	r24, r20
    2224:	8c 93       	st	X, r24
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    2228:	a1 e3       	ldi	r26, 0x31	; 49
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e1 e3       	ldi	r30, 0x31	; 49
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	48 2f       	mov	r20, r24
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <DIO_voidSetPinDir+0x200>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <DIO_voidSetPinDir+0x1fc>
    224a:	80 95       	com	r24
    224c:	84 23       	and	r24, r20
    224e:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    2250:	27 96       	adiw	r28, 0x07	; 7
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	27 97       	sbiw	r28, 0x07	; 7
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	6a 83       	std	Y+2, r22	; 0x02
    227a:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	85 30       	cpi	r24, 0x05	; 5
    2280:	08 f0       	brcs	.+2      	; 0x2284 <DIO_voidSetPinValue+0x22>
    2282:	f4 c0       	rjmp	.+488    	; 0x246c <DIO_voidSetPinValue+0x20a>
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 23       	and	r24, r24
    2288:	09 f4       	brne	.+2      	; 0x228c <DIO_voidSetPinValue+0x2a>
    228a:	f0 c0       	rjmp	.+480    	; 0x246c <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	08 f0       	brcs	.+2      	; 0x2294 <DIO_voidSetPinValue+0x32>
    2292:	ec c0       	rjmp	.+472    	; 0x246c <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	09 f0       	breq	.+2      	; 0x229c <DIO_voidSetPinValue+0x3a>
    229a:	70 c0       	rjmp	.+224    	; 0x237c <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	3f 83       	std	Y+7, r19	; 0x07
    22a4:	2e 83       	std	Y+6, r18	; 0x06
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	91 05       	cpc	r25, r1
    22ae:	51 f1       	breq	.+84     	; 0x2304 <DIO_voidSetPinValue+0xa2>
    22b0:	2e 81       	ldd	r18, Y+6	; 0x06
    22b2:	3f 81       	ldd	r19, Y+7	; 0x07
    22b4:	23 30       	cpi	r18, 0x03	; 3
    22b6:	31 05       	cpc	r19, r1
    22b8:	34 f4       	brge	.+12     	; 0x22c6 <DIO_voidSetPinValue+0x64>
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	91 05       	cpc	r25, r1
    22c2:	61 f0       	breq	.+24     	; 0x22dc <DIO_voidSetPinValue+0x7a>
    22c4:	d3 c0       	rjmp	.+422    	; 0x246c <DIO_voidSetPinValue+0x20a>
    22c6:	2e 81       	ldd	r18, Y+6	; 0x06
    22c8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ca:	23 30       	cpi	r18, 0x03	; 3
    22cc:	31 05       	cpc	r19, r1
    22ce:	71 f1       	breq	.+92     	; 0x232c <DIO_voidSetPinValue+0xca>
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	91 05       	cpc	r25, r1
    22d8:	e9 f1       	breq	.+122    	; 0x2354 <DIO_voidSetPinValue+0xf2>
    22da:	c8 c0       	rjmp	.+400    	; 0x246c <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    22dc:	ab e3       	ldi	r26, 0x3B	; 59
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	eb e3       	ldi	r30, 0x3B	; 59
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <DIO_voidSetPinValue+0x98>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <DIO_voidSetPinValue+0x94>
    22fe:	84 2b       	or	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	b4 c0       	rjmp	.+360    	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    2304:	a8 e3       	ldi	r26, 0x38	; 56
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e3       	ldi	r30, 0x38	; 56
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_voidSetPinValue+0xc0>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_voidSetPinValue+0xbc>
    2326:	84 2b       	or	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	a0 c0       	rjmp	.+320    	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    232c:	a5 e3       	ldi	r26, 0x35	; 53
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e5 e3       	ldi	r30, 0x35	; 53
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 2e       	mov	r0, r18
    2344:	02 c0       	rjmp	.+4      	; 0x234a <DIO_voidSetPinValue+0xe8>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <DIO_voidSetPinValue+0xe4>
    234e:	84 2b       	or	r24, r20
    2350:	8c 93       	st	X, r24
    2352:	8c c0       	rjmp	.+280    	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    2354:	a2 e3       	ldi	r26, 0x32	; 50
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e2 e3       	ldi	r30, 0x32	; 50
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <DIO_voidSetPinValue+0x110>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <DIO_voidSetPinValue+0x10c>
    2376:	84 2b       	or	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	78 c0       	rjmp	.+240    	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	88 23       	and	r24, r24
    2380:	09 f0       	breq	.+2      	; 0x2384 <DIO_voidSetPinValue+0x122>
    2382:	74 c0       	rjmp	.+232    	; 0x246c <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	3d 83       	std	Y+5, r19	; 0x05
    238c:	2c 83       	std	Y+4, r18	; 0x04
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	9d 81       	ldd	r25, Y+5	; 0x05
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	91 05       	cpc	r25, r1
    2396:	61 f1       	breq	.+88     	; 0x23f0 <DIO_voidSetPinValue+0x18e>
    2398:	2c 81       	ldd	r18, Y+4	; 0x04
    239a:	3d 81       	ldd	r19, Y+5	; 0x05
    239c:	23 30       	cpi	r18, 0x03	; 3
    239e:	31 05       	cpc	r19, r1
    23a0:	34 f4       	brge	.+12     	; 0x23ae <DIO_voidSetPinValue+0x14c>
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	91 05       	cpc	r25, r1
    23aa:	69 f0       	breq	.+26     	; 0x23c6 <DIO_voidSetPinValue+0x164>
    23ac:	5f c0       	rjmp	.+190    	; 0x246c <DIO_voidSetPinValue+0x20a>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	23 30       	cpi	r18, 0x03	; 3
    23b4:	31 05       	cpc	r19, r1
    23b6:	89 f1       	breq	.+98     	; 0x241a <DIO_voidSetPinValue+0x1b8>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	84 30       	cpi	r24, 0x04	; 4
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <DIO_voidSetPinValue+0x162>
    23c2:	40 c0       	rjmp	.+128    	; 0x2444 <DIO_voidSetPinValue+0x1e2>
    23c4:	53 c0       	rjmp	.+166    	; 0x246c <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    23c6:	ab e3       	ldi	r26, 0x3B	; 59
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	eb e3       	ldi	r30, 0x3B	; 59
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	48 2f       	mov	r20, r24
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <DIO_voidSetPinValue+0x182>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <DIO_voidSetPinValue+0x17e>
    23e8:	80 95       	com	r24
    23ea:	84 23       	and	r24, r20
    23ec:	8c 93       	st	X, r24
    23ee:	3e c0       	rjmp	.+124    	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    23f0:	a8 e3       	ldi	r26, 0x38	; 56
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e8 e3       	ldi	r30, 0x38	; 56
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	48 2f       	mov	r20, r24
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	02 2e       	mov	r0, r18
    2408:	02 c0       	rjmp	.+4      	; 0x240e <DIO_voidSetPinValue+0x1ac>
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	0a 94       	dec	r0
    2410:	e2 f7       	brpl	.-8      	; 0x240a <DIO_voidSetPinValue+0x1a8>
    2412:	80 95       	com	r24
    2414:	84 23       	and	r24, r20
    2416:	8c 93       	st	X, r24
    2418:	29 c0       	rjmp	.+82     	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    241a:	a5 e3       	ldi	r26, 0x35	; 53
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e5 e3       	ldi	r30, 0x35	; 53
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	48 2f       	mov	r20, r24
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 2e       	mov	r0, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_voidSetPinValue+0x1d6>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	0a 94       	dec	r0
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <DIO_voidSetPinValue+0x1d2>
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	8c 93       	st	X, r24
    2442:	14 c0       	rjmp	.+40     	; 0x246c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    2444:	a2 e3       	ldi	r26, 0x32	; 50
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e2 e3       	ldi	r30, 0x32	; 50
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	48 2f       	mov	r20, r24
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	02 2e       	mov	r0, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_voidSetPinValue+0x200>
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	0a 94       	dec	r0
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_voidSetPinValue+0x1fc>
    2466:	80 95       	com	r24
    2468:	84 23       	and	r24, r20
    246a:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    246c:	27 96       	adiw	r28, 0x07	; 7
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <DIO_u8GetPinValue+0x6>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <DIO_u8GetPinValue+0x8>
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	85 30       	cpi	r24, 0x05	; 5
    2494:	08 f0       	brcs	.+2      	; 0x2498 <DIO_u8GetPinValue+0x1a>
    2496:	74 c0       	rjmp	.+232    	; 0x2580 <DIO_u8GetPinValue+0x102>
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	88 23       	and	r24, r24
    249c:	09 f4       	brne	.+2      	; 0x24a0 <DIO_u8GetPinValue+0x22>
    249e:	70 c0       	rjmp	.+224    	; 0x2580 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	88 30       	cpi	r24, 0x08	; 8
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <DIO_u8GetPinValue+0x2a>
    24a6:	6c c0       	rjmp	.+216    	; 0x2580 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3d 83       	std	Y+5, r19	; 0x05
    24b0:	2c 83       	std	Y+4, r18	; 0x04
    24b2:	4c 81       	ldd	r20, Y+4	; 0x04
    24b4:	5d 81       	ldd	r21, Y+5	; 0x05
    24b6:	42 30       	cpi	r20, 0x02	; 2
    24b8:	51 05       	cpc	r21, r1
    24ba:	49 f1       	breq	.+82     	; 0x250e <DIO_u8GetPinValue+0x90>
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	83 30       	cpi	r24, 0x03	; 3
    24c2:	91 05       	cpc	r25, r1
    24c4:	34 f4       	brge	.+12     	; 0x24d2 <DIO_u8GetPinValue+0x54>
    24c6:	2c 81       	ldd	r18, Y+4	; 0x04
    24c8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ca:	21 30       	cpi	r18, 0x01	; 1
    24cc:	31 05       	cpc	r19, r1
    24ce:	61 f0       	breq	.+24     	; 0x24e8 <DIO_u8GetPinValue+0x6a>
    24d0:	57 c0       	rjmp	.+174    	; 0x2580 <DIO_u8GetPinValue+0x102>
    24d2:	4c 81       	ldd	r20, Y+4	; 0x04
    24d4:	5d 81       	ldd	r21, Y+5	; 0x05
    24d6:	43 30       	cpi	r20, 0x03	; 3
    24d8:	51 05       	cpc	r21, r1
    24da:	61 f1       	breq	.+88     	; 0x2534 <DIO_u8GetPinValue+0xb6>
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	91 05       	cpc	r25, r1
    24e4:	d1 f1       	breq	.+116    	; 0x255a <DIO_u8GetPinValue+0xdc>
    24e6:	4c c0       	rjmp	.+152    	; 0x2580 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    24e8:	e9 e3       	ldi	r30, 0x39	; 57
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a9 01       	movw	r20, r18
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_u8GetPinValue+0x82>
    24fc:	55 95       	asr	r21
    24fe:	47 95       	ror	r20
    2500:	8a 95       	dec	r24
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <DIO_u8GetPinValue+0x7e>
    2504:	ca 01       	movw	r24, r20
    2506:	58 2f       	mov	r21, r24
    2508:	51 70       	andi	r21, 0x01	; 1
    250a:	5b 83       	std	Y+3, r21	; 0x03
    250c:	3b c0       	rjmp	.+118    	; 0x2584 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    250e:	e6 e3       	ldi	r30, 0x36	; 54
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a9 01       	movw	r20, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <DIO_u8GetPinValue+0xa8>
    2522:	55 95       	asr	r21
    2524:	47 95       	ror	r20
    2526:	8a 95       	dec	r24
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <DIO_u8GetPinValue+0xa4>
    252a:	ca 01       	movw	r24, r20
    252c:	58 2f       	mov	r21, r24
    252e:	51 70       	andi	r21, 0x01	; 1
    2530:	5b 83       	std	Y+3, r21	; 0x03
    2532:	28 c0       	rjmp	.+80     	; 0x2584 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    2534:	e3 e3       	ldi	r30, 0x33	; 51
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a9 01       	movw	r20, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <DIO_u8GetPinValue+0xce>
    2548:	55 95       	asr	r21
    254a:	47 95       	ror	r20
    254c:	8a 95       	dec	r24
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <DIO_u8GetPinValue+0xca>
    2550:	ca 01       	movw	r24, r20
    2552:	58 2f       	mov	r21, r24
    2554:	51 70       	andi	r21, 0x01	; 1
    2556:	5b 83       	std	Y+3, r21	; 0x03
    2558:	15 c0       	rjmp	.+42     	; 0x2584 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    255a:	e0 e3       	ldi	r30, 0x30	; 48
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a9 01       	movw	r20, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <DIO_u8GetPinValue+0xf4>
    256e:	55 95       	asr	r21
    2570:	47 95       	ror	r20
    2572:	8a 95       	dec	r24
    2574:	e2 f7       	brpl	.-8      	; 0x256e <DIO_u8GetPinValue+0xf0>
    2576:	ca 01       	movw	r24, r20
    2578:	58 2f       	mov	r21, r24
    257a:	51 70       	andi	r21, 0x01	; 1
    257c:	5b 83       	std	Y+3, r21	; 0x03
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <DIO_voidTogglePin+0x6>
    259c:	00 d0       	rcall	.+0      	; 0x259e <DIO_voidTogglePin+0x8>
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	85 30       	cpi	r24, 0x05	; 5
    25aa:	08 f0       	brcs	.+2      	; 0x25ae <DIO_voidTogglePin+0x18>
    25ac:	77 c0       	rjmp	.+238    	; 0x269c <DIO_voidTogglePin+0x106>
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 23       	and	r24, r24
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <DIO_voidTogglePin+0x20>
    25b4:	73 c0       	rjmp	.+230    	; 0x269c <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	88 30       	cpi	r24, 0x08	; 8
    25ba:	08 f0       	brcs	.+2      	; 0x25be <DIO_voidTogglePin+0x28>
    25bc:	6f c0       	rjmp	.+222    	; 0x269c <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3c 83       	std	Y+4, r19	; 0x04
    25c6:	2b 83       	std	Y+3, r18	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	91 05       	cpc	r25, r1
    25d0:	51 f1       	breq	.+84     	; 0x2626 <DIO_voidTogglePin+0x90>
    25d2:	2b 81       	ldd	r18, Y+3	; 0x03
    25d4:	3c 81       	ldd	r19, Y+4	; 0x04
    25d6:	23 30       	cpi	r18, 0x03	; 3
    25d8:	31 05       	cpc	r19, r1
    25da:	34 f4       	brge	.+12     	; 0x25e8 <DIO_voidTogglePin+0x52>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	91 05       	cpc	r25, r1
    25e4:	61 f0       	breq	.+24     	; 0x25fe <DIO_voidTogglePin+0x68>
    25e6:	5a c0       	rjmp	.+180    	; 0x269c <DIO_voidTogglePin+0x106>
    25e8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ea:	3c 81       	ldd	r19, Y+4	; 0x04
    25ec:	23 30       	cpi	r18, 0x03	; 3
    25ee:	31 05       	cpc	r19, r1
    25f0:	71 f1       	breq	.+92     	; 0x264e <DIO_voidTogglePin+0xb8>
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	84 30       	cpi	r24, 0x04	; 4
    25f8:	91 05       	cpc	r25, r1
    25fa:	e9 f1       	breq	.+122    	; 0x2676 <DIO_voidTogglePin+0xe0>
    25fc:	4f c0       	rjmp	.+158    	; 0x269c <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    25fe:	ab e3       	ldi	r26, 0x3B	; 59
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	eb e3       	ldi	r30, 0x3B	; 59
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	48 2f       	mov	r20, r24
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	02 2e       	mov	r0, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_voidTogglePin+0x86>
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	0a 94       	dec	r0
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_voidTogglePin+0x82>
    2620:	84 27       	eor	r24, r20
    2622:	8c 93       	st	X, r24
    2624:	3b c0       	rjmp	.+118    	; 0x269c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    2626:	a8 e3       	ldi	r26, 0x38	; 56
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e8 e3       	ldi	r30, 0x38	; 56
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <DIO_voidTogglePin+0xae>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <DIO_voidTogglePin+0xaa>
    2648:	84 27       	eor	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	27 c0       	rjmp	.+78     	; 0x269c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    264e:	a5 e3       	ldi	r26, 0x35	; 53
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e5 e3       	ldi	r30, 0x35	; 53
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_voidTogglePin+0xd6>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_voidTogglePin+0xd2>
    2670:	84 27       	eor	r24, r20
    2672:	8c 93       	st	X, r24
    2674:	13 c0       	rjmp	.+38     	; 0x269c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    2676:	a2 e3       	ldi	r26, 0x32	; 50
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e2 e3       	ldi	r30, 0x32	; 50
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	48 2f       	mov	r20, r24
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	02 2e       	mov	r0, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <DIO_voidTogglePin+0xfe>
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	0a 94       	dec	r0
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <DIO_voidTogglePin+0xfa>
    2698:	84 27       	eor	r24, r20
    269a:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <DIO_voidSetPortDir+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <DIO_voidSetPortDir+0x8>
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	85 30       	cpi	r24, 0x05	; 5
    26be:	b0 f5       	brcc	.+108    	; 0x272c <DIO_voidSetPortDir+0x82>
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	88 23       	and	r24, r24
    26c4:	99 f1       	breq	.+102    	; 0x272c <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3c 83       	std	Y+4, r19	; 0x04
    26ce:	2b 83       	std	Y+3, r18	; 0x03
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 05       	cpc	r25, r1
    26d8:	d9 f0       	breq	.+54     	; 0x2710 <DIO_voidSetPortDir+0x66>
    26da:	2b 81       	ldd	r18, Y+3	; 0x03
    26dc:	3c 81       	ldd	r19, Y+4	; 0x04
    26de:	23 30       	cpi	r18, 0x03	; 3
    26e0:	31 05       	cpc	r19, r1
    26e2:	34 f4       	brge	.+12     	; 0x26f0 <DIO_voidSetPortDir+0x46>
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	61 f0       	breq	.+24     	; 0x2706 <DIO_voidSetPortDir+0x5c>
    26ee:	1e c0       	rjmp	.+60     	; 0x272c <DIO_voidSetPortDir+0x82>
    26f0:	2b 81       	ldd	r18, Y+3	; 0x03
    26f2:	3c 81       	ldd	r19, Y+4	; 0x04
    26f4:	23 30       	cpi	r18, 0x03	; 3
    26f6:	31 05       	cpc	r19, r1
    26f8:	81 f0       	breq	.+32     	; 0x271a <DIO_voidSetPortDir+0x70>
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	84 30       	cpi	r24, 0x04	; 4
    2700:	91 05       	cpc	r25, r1
    2702:	81 f0       	breq	.+32     	; 0x2724 <DIO_voidSetPortDir+0x7a>
    2704:	13 c0       	rjmp	.+38     	; 0x272c <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    2706:	ea e3       	ldi	r30, 0x3A	; 58
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	80 83       	st	Z, r24
    270e:	0e c0       	rjmp	.+28     	; 0x272c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    2710:	e7 e3       	ldi	r30, 0x37	; 55
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	80 83       	st	Z, r24
    2718:	09 c0       	rjmp	.+18     	; 0x272c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    271a:	e4 e3       	ldi	r30, 0x34	; 52
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	80 83       	st	Z, r24
    2722:	04 c0       	rjmp	.+8      	; 0x272c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    2724:	e1 e3       	ldi	r30, 0x31	; 49
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	80 83       	st	Z, r24
			break;
		}
	}
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <DIO_voidSetPortValue+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <DIO_voidSetPortValue+0x8>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	85 30       	cpi	r24, 0x05	; 5
    274e:	b0 f5       	brcc	.+108    	; 0x27bc <DIO_voidSetPortValue+0x82>
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	88 23       	and	r24, r24
    2754:	99 f1       	breq	.+102    	; 0x27bc <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	3c 83       	std	Y+4, r19	; 0x04
    275e:	2b 83       	std	Y+3, r18	; 0x03
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	91 05       	cpc	r25, r1
    2768:	d9 f0       	breq	.+54     	; 0x27a0 <DIO_voidSetPortValue+0x66>
    276a:	2b 81       	ldd	r18, Y+3	; 0x03
    276c:	3c 81       	ldd	r19, Y+4	; 0x04
    276e:	23 30       	cpi	r18, 0x03	; 3
    2770:	31 05       	cpc	r19, r1
    2772:	34 f4       	brge	.+12     	; 0x2780 <DIO_voidSetPortValue+0x46>
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	91 05       	cpc	r25, r1
    277c:	61 f0       	breq	.+24     	; 0x2796 <DIO_voidSetPortValue+0x5c>
    277e:	1e c0       	rjmp	.+60     	; 0x27bc <DIO_voidSetPortValue+0x82>
    2780:	2b 81       	ldd	r18, Y+3	; 0x03
    2782:	3c 81       	ldd	r19, Y+4	; 0x04
    2784:	23 30       	cpi	r18, 0x03	; 3
    2786:	31 05       	cpc	r19, r1
    2788:	81 f0       	breq	.+32     	; 0x27aa <DIO_voidSetPortValue+0x70>
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	84 30       	cpi	r24, 0x04	; 4
    2790:	91 05       	cpc	r25, r1
    2792:	81 f0       	breq	.+32     	; 0x27b4 <DIO_voidSetPortValue+0x7a>
    2794:	13 c0       	rjmp	.+38     	; 0x27bc <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    2796:	eb e3       	ldi	r30, 0x3B	; 59
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	80 83       	st	Z, r24
    279e:	0e c0       	rjmp	.+28     	; 0x27bc <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    27a0:	e8 e3       	ldi	r30, 0x38	; 56
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	80 83       	st	Z, r24
    27a8:	09 c0       	rjmp	.+18     	; 0x27bc <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    27aa:	e5 e3       	ldi	r30, 0x35	; 53
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	80 83       	st	Z, r24
    27b2:	04 c0       	rjmp	.+8      	; 0x27bc <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    27b4:	e2 e3       	ldi	r30, 0x32	; 50
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	80 83       	st	Z, r24
			break;
		}
	}
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <DIO_u8GetPortValue+0x6>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <DIO_u8GetPortValue+0x8>
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	85 30       	cpi	r24, 0x05	; 5
    27dc:	b8 f5       	brcc	.+110    	; 0x284c <DIO_u8GetPortValue+0x82>
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	88 23       	and	r24, r24
    27e2:	a1 f1       	breq	.+104    	; 0x284c <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	3c 83       	std	Y+4, r19	; 0x04
    27ec:	2b 83       	std	Y+3, r18	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	82 30       	cpi	r24, 0x02	; 2
    27f4:	91 05       	cpc	r25, r1
    27f6:	d9 f0       	breq	.+54     	; 0x282e <DIO_u8GetPortValue+0x64>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	23 30       	cpi	r18, 0x03	; 3
    27fe:	31 05       	cpc	r19, r1
    2800:	34 f4       	brge	.+12     	; 0x280e <DIO_u8GetPortValue+0x44>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	61 f0       	breq	.+24     	; 0x2824 <DIO_u8GetPortValue+0x5a>
    280c:	1f c0       	rjmp	.+62     	; 0x284c <DIO_u8GetPortValue+0x82>
    280e:	2b 81       	ldd	r18, Y+3	; 0x03
    2810:	3c 81       	ldd	r19, Y+4	; 0x04
    2812:	23 30       	cpi	r18, 0x03	; 3
    2814:	31 05       	cpc	r19, r1
    2816:	81 f0       	breq	.+32     	; 0x2838 <DIO_u8GetPortValue+0x6e>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	91 05       	cpc	r25, r1
    2820:	81 f0       	breq	.+32     	; 0x2842 <DIO_u8GetPortValue+0x78>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    2824:	eb e3       	ldi	r30, 0x3B	; 59
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	90 81       	ld	r25, Z
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	11 c0       	rjmp	.+34     	; 0x2850 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    282e:	e8 e3       	ldi	r30, 0x38	; 56
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	20 81       	ld	r18, Z
    2834:	2a 83       	std	Y+2, r18	; 0x02
    2836:	0c c0       	rjmp	.+24     	; 0x2850 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    2838:	e5 e3       	ldi	r30, 0x35	; 53
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	30 81       	ld	r19, Z
    283e:	3a 83       	std	Y+2, r19	; 0x02
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    2842:	e2 e3       	ldi	r30, 0x32	; 50
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    284c:	9f ef       	ldi	r25, 0xFF	; 255
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <DIO_voidTogglePort+0x6>
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	85 30       	cpi	r24, 0x05	; 5
    2872:	08 f0       	brcs	.+2      	; 0x2876 <DIO_voidTogglePort+0x16>
    2874:	43 c0       	rjmp	.+134    	; 0x28fc <DIO_voidTogglePort+0x9c>
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <DIO_voidTogglePort+0x1e>
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3b 83       	std	Y+3, r19	; 0x03
    2886:	2a 83       	std	Y+2, r18	; 0x02
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	f1 f0       	breq	.+60     	; 0x28ce <DIO_voidTogglePort+0x6e>
    2892:	2a 81       	ldd	r18, Y+2	; 0x02
    2894:	3b 81       	ldd	r19, Y+3	; 0x03
    2896:	23 30       	cpi	r18, 0x03	; 3
    2898:	31 05       	cpc	r19, r1
    289a:	34 f4       	brge	.+12     	; 0x28a8 <DIO_voidTogglePort+0x48>
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	9b 81       	ldd	r25, Y+3	; 0x03
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	91 05       	cpc	r25, r1
    28a4:	61 f0       	breq	.+24     	; 0x28be <DIO_voidTogglePort+0x5e>
    28a6:	2a c0       	rjmp	.+84     	; 0x28fc <DIO_voidTogglePort+0x9c>
    28a8:	2a 81       	ldd	r18, Y+2	; 0x02
    28aa:	3b 81       	ldd	r19, Y+3	; 0x03
    28ac:	23 30       	cpi	r18, 0x03	; 3
    28ae:	31 05       	cpc	r19, r1
    28b0:	b1 f0       	breq	.+44     	; 0x28de <DIO_voidTogglePort+0x7e>
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	84 30       	cpi	r24, 0x04	; 4
    28b8:	91 05       	cpc	r25, r1
    28ba:	c9 f0       	breq	.+50     	; 0x28ee <DIO_voidTogglePort+0x8e>
    28bc:	1f c0       	rjmp	.+62     	; 0x28fc <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    28be:	ab e3       	ldi	r26, 0x3B	; 59
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	eb e3       	ldi	r30, 0x3B	; 59
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 95       	com	r24
    28ca:	8c 93       	st	X, r24
    28cc:	17 c0       	rjmp	.+46     	; 0x28fc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    28ce:	a8 e3       	ldi	r26, 0x38	; 56
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e8 e3       	ldi	r30, 0x38	; 56
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 95       	com	r24
    28da:	8c 93       	st	X, r24
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    28de:	a5 e3       	ldi	r26, 0x35	; 53
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e5 e3       	ldi	r30, 0x35	; 53
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 95       	com	r24
    28ea:	8c 93       	st	X, r24
    28ec:	07 c0       	rjmp	.+14     	; 0x28fc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    28ee:	a2 e3       	ldi	r26, 0x32	; 50
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e2 e3       	ldi	r30, 0x32	; 50
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	80 95       	com	r24
    28fa:	8c 93       	st	X, r24
				break;
			}
		}
}
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	0f 90       	pop	r0
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(){
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    2910:	a7 e2       	ldi	r26, 0x27	; 39
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e7 e2       	ldi	r30, 0x27	; 39
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	80 64       	ori	r24, 0x40	; 64
    291c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    291e:	a7 e2       	ldi	r26, 0x27	; 39
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e7 e2       	ldi	r30, 0x27	; 39
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	8f 77       	andi	r24, 0x7F	; 127
    292a:	8c 93       	st	X, r24
	Vref = 5;
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 ea       	ldi	r26, 0xA0	; 160
    2932:	b0 e4       	ldi	r27, 0x40	; 64
    2934:	80 93 9b 01 	sts	0x019B, r24
    2938:	90 93 9c 01 	sts	0x019C, r25
    293c:	a0 93 9d 01 	sts	0x019D, r26
    2940:	b0 93 9e 01 	sts	0x019E, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    2944:	a7 e2       	ldi	r26, 0x27	; 39
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e7 e2       	ldi	r30, 0x27	; 39
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	8f 7d       	andi	r24, 0xDF	; 223
    2950:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    2952:	a6 e2       	ldi	r26, 0x26	; 38
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e6 e2       	ldi	r30, 0x26	; 38
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	81 60       	ori	r24, 0x01	; 1
    295e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    2960:	a6 e2       	ldi	r26, 0x26	; 38
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e6 e2       	ldi	r30, 0x26	; 38
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	82 60       	ori	r24, 0x02	; 2
    296c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    296e:	a6 e2       	ldi	r26, 0x26	; 38
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e6 e2       	ldi	r30, 0x26	; 38
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	84 60       	ori	r24, 0x04	; 4
    297a:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <ADC_voidEnable>:

void ADC_voidEnable(){
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    298a:	a6 e2       	ldi	r26, 0x26	; 38
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e6 e2       	ldi	r30, 0x26	; 38
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	80 68       	ori	r24, 0x80	; 128
    2996:	8c 93       	st	X, r24
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    29a6:	a6 e2       	ldi	r26, 0x26	; 38
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e6 e2       	ldi	r30, 0x26	; 38
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	88 60       	ori	r24, 0x08	; 8
    29b2:	8c 93       	st	X, r24
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    29c2:	a6 e2       	ldi	r26, 0x26	; 38
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e6 e2       	ldi	r30, 0x26	; 38
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	87 7f       	andi	r24, 0xF7	; 247
    29ce:	8c 93       	st	X, r24
}
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <ADC_voidDisable>:

void ADC_voidDisable(){
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    29de:	a6 e2       	ldi	r26, 0x26	; 38
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e6 e2       	ldi	r30, 0x26	; 38
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	8c 93       	st	X, r24
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <ADC_u16ReadADC+0x6>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    29fc:	1a 82       	std	Y+2, r1	; 0x02
    29fe:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    2a00:	e4 e2       	ldi	r30, 0x24	; 36
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	cc 01       	movw	r24, r24
    2a0a:	a0 e0       	ldi	r26, 0x00	; 0
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	20 91 9b 01 	lds	r18, 0x019B
    2a1e:	30 91 9c 01 	lds	r19, 0x019C
    2a22:	40 91 9d 01 	lds	r20, 0x019D
    2a26:	50 91 9e 01 	lds	r21, 0x019E
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	54 e4       	ldi	r21, 0x44	; 68
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
	return result;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2a74:	a7 e2       	ldi	r26, 0x27	; 39
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e7 e2       	ldi	r30, 0x27	; 39
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 7e       	andi	r24, 0xE0	; 224
    2a80:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    2a82:	a7 e2       	ldi	r26, 0x27	; 39
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e7 e2       	ldi	r30, 0x27	; 39
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	90 81       	ld	r25, Z
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	89 2b       	or	r24, r25
    2a90:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2a92:	a6 e2       	ldi	r26, 0x26	; 38
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e6 e2       	ldi	r30, 0x26	; 38
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 64       	ori	r24, 0x40	; 64
    2a9e:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    2aa0:	e6 e2       	ldi	r30, 0x26	; 38
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	82 95       	swap	r24
    2aa8:	8f 70       	andi	r24, 0x0F	; 15
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	81 70       	andi	r24, 0x01	; 1
    2ab0:	90 70       	andi	r25, 0x00	; 0
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	a9 f3       	breq	.-22     	; 0x2aa0 <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    2ab6:	a6 e2       	ldi	r26, 0x26	; 38
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e6 e2       	ldi	r30, 0x26	; 38
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	80 61       	ori	r24, 0x10	; 16
    2ac2:	8c 93       	st	X, r24
}
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	0f 92       	push	r0
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2ad8:	a7 e2       	ldi	r26, 0x27	; 39
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e7 e2       	ldi	r30, 0x27	; 39
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	80 7e       	andi	r24, 0xE0	; 224
    2ae4:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    2ae6:	a7 e2       	ldi	r26, 0x27	; 39
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e7 e2       	ldi	r30, 0x27	; 39
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	90 81       	ld	r25, Z
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	89 2b       	or	r24, r25
    2af4:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2af6:	a6 e2       	ldi	r26, 0x26	; 38
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e6 e2       	ldi	r30, 0x26	; 38
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	80 64       	ori	r24, 0x40	; 64
    2b02:	8c 93       	st	X, r24
}
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2b18:	a7 e2       	ldi	r26, 0x27	; 39
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e7 e2       	ldi	r30, 0x27	; 39
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 7e       	andi	r24, 0xE0	; 224
    2b24:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    2b26:	a7 e2       	ldi	r26, 0x27	; 39
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e7 e2       	ldi	r30, 0x27	; 39
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	90 81       	ld	r25, Z
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	89 2b       	or	r24, r25
    2b34:	8c 93       	st	X, r24
}
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <ADC_u16ReadADCInMV+0x6>
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    2b48:	1a 82       	std	Y+2, r1	; 0x02
    2b4a:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    2b4c:	e4 e2       	ldi	r30, 0x24	; 36
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	cc 01       	movw	r24, r24
    2b56:	a0 e0       	ldi	r26, 0x00	; 0
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	28 ee       	ldi	r18, 0xE8	; 232
    2b5c:	33 e0       	ldi	r19, 0x03	; 3
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 96 30 	call	0x612c	; 0x612c <__mulsi3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	20 91 9b 01 	lds	r18, 0x019B
    2b7e:	30 91 9c 01 	lds	r19, 0x019C
    2b82:	40 91 9d 01 	lds	r20, 0x019D
    2b86:	50 91 9e 01 	lds	r21, 0x019E
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	54 e4       	ldi	r21, 0x44	; 68
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
	return result;
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <ADC_voidSetCallback+0x6>
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	90 93 0f 02 	sts	0x020F, r25
    2bde:	80 93 0e 02 	sts	0x020E, r24
}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <__vector_16>:

void __vector_16 (void){
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    2c16:	80 91 0e 02 	lds	r24, 0x020E
    2c1a:	90 91 0f 02 	lds	r25, 0x020F
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	29 f0       	breq	.+10     	; 0x2c2c <__vector_16+0x40>
		Global_ADC_CallBack();
    2c22:	e0 91 0e 02 	lds	r30, 0x020E
    2c26:	f0 91 0f 02 	lds	r31, 0x020F
    2c2a:	09 95       	icall
	}
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0
    2c4e:	1f 90       	pop	r1
    2c50:	18 95       	reti

00002c52 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	6f e7       	ldi	r22, 0x7F	; 127
    2c5e:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	6f e7       	ldi	r22, 0x7F	; 127
    2c74:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    2c78:	84 e0       	ldi	r24, 0x04	; 4
    2c7a:	6f e7       	ldi	r22, 0x7F	; 127
    2c7c:	0e 94 55 13 	call	0x26aa	; 0x26aa <DIO_voidSetPortDir>
}
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	60 97       	sbiw	r28, 0x10	; 16
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	9d 87       	std	Y+13, r25	; 0x0d
    2ca2:	8c 87       	std	Y+12, r24	; 0x0c
    2ca4:	e7 eb       	ldi	r30, 0xB7	; 183
    2ca6:	f1 e0       	ldi	r31, 0x01	; 1
    2ca8:	ff 87       	std	Y+15, r31	; 0x0f
    2caa:	ee 87       	std	Y+14, r30	; 0x0e
    2cac:	fa e0       	ldi	r31, 0x0A	; 10
    2cae:	f8 8b       	std	Y+16, r31	; 0x10
    2cb0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2cb2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2cb4:	00 80       	ld	r0, Z
    2cb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	9f 87       	std	Y+15, r25	; 0x0f
    2cbe:	8e 87       	std	Y+14, r24	; 0x0e
    2cc0:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cc2:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cc4:	00 82       	st	Z, r0
    2cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	9d 87       	std	Y+13, r25	; 0x0d
    2cce:	8c 87       	std	Y+12, r24	; 0x0c
    2cd0:	98 89       	ldd	r25, Y+16	; 0x10
    2cd2:	91 50       	subi	r25, 0x01	; 1
    2cd4:	98 8b       	std	Y+16, r25	; 0x10
    2cd6:	e8 89       	ldd	r30, Y+16	; 0x10
    2cd8:	ee 23       	and	r30, r30
    2cda:	51 f7       	brne	.-44     	; 0x2cb0 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    2cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cde:	8a 30       	cpi	r24, 0x0A	; 10
    2ce0:	70 f4       	brcc	.+28     	; 0x2cfe <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    2ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	ce 01       	movw	r24, r28
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	fc 01       	movw	r30, r24
    2cee:	e2 0f       	add	r30, r18
    2cf0:	f3 1f       	adc	r31, r19
    2cf2:	80 81       	ld	r24, Z
    2cf4:	98 2f       	mov	r25, r24
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	69 2f       	mov	r22, r25
    2cfa:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
	}
}
    2cfe:	60 96       	adiw	r28, 0x10	; 16
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	a1 97       	sbiw	r28, 0x21	; 33
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    2d24:	ce 01       	movw	r24, r28
    2d26:	43 96       	adiw	r24, 0x13	; 19
    2d28:	9e 8f       	std	Y+30, r25	; 0x1e
    2d2a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d2c:	e1 ec       	ldi	r30, 0xC1	; 193
    2d2e:	f1 e0       	ldi	r31, 0x01	; 1
    2d30:	f8 a3       	std	Y+32, r31	; 0x20
    2d32:	ef 8f       	std	Y+31, r30	; 0x1f
    2d34:	fa e0       	ldi	r31, 0x0A	; 10
    2d36:	f9 a3       	std	Y+33, r31	; 0x21
    2d38:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d3a:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d3c:	00 80       	ld	r0, Z
    2d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d40:	98 a1       	ldd	r25, Y+32	; 0x20
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	98 a3       	std	Y+32, r25	; 0x20
    2d46:	8f 8f       	std	Y+31, r24	; 0x1f
    2d48:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d4a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d4c:	00 82       	st	Z, r0
    2d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	9e 8f       	std	Y+30, r25	; 0x1e
    2d56:	8d 8f       	std	Y+29, r24	; 0x1d
    2d58:	99 a1       	ldd	r25, Y+33	; 0x21
    2d5a:	91 50       	subi	r25, 0x01	; 1
    2d5c:	99 a3       	std	Y+33, r25	; 0x21
    2d5e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2d60:	ee 23       	and	r30, r30
    2d62:	51 f7       	brne	.-44     	; 0x2d38 <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2d64:	1f 86       	std	Y+15, r1	; 0x0f
    2d66:	18 8a       	std	Y+16, r1	; 0x10
    2d68:	19 8a       	std	Y+17, r1	; 0x11
    2d6a:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2d6c:	1f 86       	std	Y+15, r1	; 0x0f
    2d6e:	18 8a       	std	Y+16, r1	; 0x10
    2d70:	19 8a       	std	Y+17, r1	; 0x11
    2d72:	1a 8a       	std	Y+18, r1	; 0x12
    2d74:	8d c0       	rjmp	.+282    	; 0x2e90 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    2d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d78:	98 89       	ldd	r25, Y+16	; 0x10
    2d7a:	a9 89       	ldd	r26, Y+17	; 0x11
    2d7c:	ba 89       	ldd	r27, Y+18	; 0x12
    2d7e:	9e 01       	movw	r18, r28
    2d80:	2d 5e       	subi	r18, 0xED	; 237
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	f9 01       	movw	r30, r18
    2d86:	e8 0f       	add	r30, r24
    2d88:	f9 1f       	adc	r31, r25
    2d8a:	80 81       	ld	r24, Z
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	69 2f       	mov	r22, r25
    2d92:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	a0 e2       	ldi	r26, 0x20	; 32
    2d9c:	b1 e4       	ldi	r27, 0x41	; 65
    2d9e:	8b 87       	std	Y+11, r24	; 0x0b
    2da0:	9c 87       	std	Y+12, r25	; 0x0c
    2da2:	ad 87       	std	Y+13, r26	; 0x0d
    2da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a e7       	ldi	r20, 0x7A	; 122
    2db4:	55 e4       	ldi	r21, 0x45	; 69
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8f 83       	std	Y+7, r24	; 0x07
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	a9 87       	std	Y+9, r26	; 0x09
    2dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <SevSeg_voidSingleAutoCounter+0x138>
    2e2a:	80 e9       	ldi	r24, 0x90	; 144
    2e2c:	91 e0       	ldi	r25, 0x01	; 1
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <SevSeg_voidSingleAutoCounter+0x126>
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <SevSeg_voidSingleAutoCounter+0x11a>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6f 81       	ldd	r22, Y+7	; 0x07
    2e54:	78 85       	ldd	r23, Y+8	; 0x08
    2e56:	89 85       	ldd	r24, Y+9	; 0x09
    2e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9e 83       	std	Y+6, r25	; 0x06
    2e64:	8d 83       	std	Y+5, r24	; 0x05
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <SevSeg_voidSingleAutoCounter+0x162>
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7c:	98 89       	ldd	r25, Y+16	; 0x10
    2e7e:	a9 89       	ldd	r26, Y+17	; 0x11
    2e80:	ba 89       	ldd	r27, Y+18	; 0x12
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	a1 1d       	adc	r26, r1
    2e86:	b1 1d       	adc	r27, r1
    2e88:	8f 87       	std	Y+15, r24	; 0x0f
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	a9 8b       	std	Y+17, r26	; 0x11
    2e8e:	ba 8b       	std	Y+18, r27	; 0x12
    2e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e92:	98 89       	ldd	r25, Y+16	; 0x10
    2e94:	a9 89       	ldd	r26, Y+17	; 0x11
    2e96:	ba 89       	ldd	r27, Y+18	; 0x12
    2e98:	8a 30       	cpi	r24, 0x0A	; 10
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	a1 05       	cpc	r26, r1
    2e9e:	b1 05       	cpc	r27, r1
    2ea0:	0c f4       	brge	.+2      	; 0x2ea4 <SevSeg_voidSingleAutoCounter+0x194>
    2ea2:	69 cf       	rjmp	.-302    	; 0x2d76 <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    2ea4:	a1 96       	adiw	r28, 0x21	; 33
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	a5 97       	sbiw	r28, 0x25	; 37
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    2eca:	ce 01       	movw	r24, r28
    2ecc:	47 96       	adiw	r24, 0x17	; 23
    2ece:	9a a3       	std	Y+34, r25	; 0x22
    2ed0:	89 a3       	std	Y+33, r24	; 0x21
    2ed2:	eb ec       	ldi	r30, 0xCB	; 203
    2ed4:	f1 e0       	ldi	r31, 0x01	; 1
    2ed6:	fc a3       	std	Y+36, r31	; 0x24
    2ed8:	eb a3       	std	Y+35, r30	; 0x23
    2eda:	fa e0       	ldi	r31, 0x0A	; 10
    2edc:	fd a3       	std	Y+37, r31	; 0x25
    2ede:	eb a1       	ldd	r30, Y+35	; 0x23
    2ee0:	fc a1       	ldd	r31, Y+36	; 0x24
    2ee2:	00 80       	ld	r0, Z
    2ee4:	8b a1       	ldd	r24, Y+35	; 0x23
    2ee6:	9c a1       	ldd	r25, Y+36	; 0x24
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	9c a3       	std	Y+36, r25	; 0x24
    2eec:	8b a3       	std	Y+35, r24	; 0x23
    2eee:	e9 a1       	ldd	r30, Y+33	; 0x21
    2ef0:	fa a1       	ldd	r31, Y+34	; 0x22
    2ef2:	00 82       	st	Z, r0
    2ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	9a a3       	std	Y+34, r25	; 0x22
    2efc:	89 a3       	std	Y+33, r24	; 0x21
    2efe:	9d a1       	ldd	r25, Y+37	; 0x25
    2f00:	91 50       	subi	r25, 0x01	; 1
    2f02:	9d a3       	std	Y+37, r25	; 0x25
    2f04:	ed a1       	ldd	r30, Y+37	; 0x25
    2f06:	ee 23       	and	r30, r30
    2f08:	51 f7       	brne	.-44     	; 0x2ede <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2f0a:	1b 8a       	std	Y+19, r1	; 0x13
    2f0c:	1c 8a       	std	Y+20, r1	; 0x14
    2f0e:	1d 8a       	std	Y+21, r1	; 0x15
    2f10:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    2f12:	1f 86       	std	Y+15, r1	; 0x0f
    2f14:	18 8a       	std	Y+16, r1	; 0x10
    2f16:	19 8a       	std	Y+17, r1	; 0x11
    2f18:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2f1a:	1b 8a       	std	Y+19, r1	; 0x13
    2f1c:	1c 8a       	std	Y+20, r1	; 0x14
    2f1e:	1d 8a       	std	Y+21, r1	; 0x15
    2f20:	1e 8a       	std	Y+22, r1	; 0x16
    2f22:	b7 c0       	rjmp	.+366    	; 0x3092 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	ad 89       	ldd	r26, Y+21	; 0x15
    2f2a:	be 89       	ldd	r27, Y+22	; 0x16
    2f2c:	9e 01       	movw	r18, r28
    2f2e:	29 5e       	subi	r18, 0xE9	; 233
    2f30:	3f 4f       	sbci	r19, 0xFF	; 255
    2f32:	f9 01       	movw	r30, r18
    2f34:	e8 0f       	add	r30, r24
    2f36:	f9 1f       	adc	r31, r25
    2f38:	80 81       	ld	r24, Z
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	84 e0       	ldi	r24, 0x04	; 4
    2f3e:	69 2f       	mov	r22, r25
    2f40:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    2f44:	1f 86       	std	Y+15, r1	; 0x0f
    2f46:	18 8a       	std	Y+16, r1	; 0x10
    2f48:	19 8a       	std	Y+17, r1	; 0x11
    2f4a:	1a 8a       	std	Y+18, r1	; 0x12
    2f4c:	8d c0       	rjmp	.+282    	; 0x3068 <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f50:	98 89       	ldd	r25, Y+16	; 0x10
    2f52:	a9 89       	ldd	r26, Y+17	; 0x11
    2f54:	ba 89       	ldd	r27, Y+18	; 0x12
    2f56:	9e 01       	movw	r18, r28
    2f58:	29 5e       	subi	r18, 0xE9	; 233
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	f9 01       	movw	r30, r18
    2f5e:	e8 0f       	add	r30, r24
    2f60:	f9 1f       	adc	r31, r25
    2f62:	80 81       	ld	r24, Z
    2f64:	98 2f       	mov	r25, r24
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	69 2f       	mov	r22, r25
    2f6a:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a0 e2       	ldi	r26, 0x20	; 32
    2f74:	b1 e4       	ldi	r27, 0x41	; 65
    2f76:	8b 87       	std	Y+11, r24	; 0x0b
    2f78:	9c 87       	std	Y+12, r25	; 0x0c
    2f7a:	ad 87       	std	Y+13, r26	; 0x0d
    2f7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	4a e7       	ldi	r20, 0x7A	; 122
    2f8c:	55 e4       	ldi	r21, 0x45	; 69
    2f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	8f 83       	std	Y+7, r24	; 0x07
    2f98:	98 87       	std	Y+8, r25	; 0x08
    2f9a:	a9 87       	std	Y+9, r26	; 0x09
    2f9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e8       	ldi	r20, 0x80	; 128
    2fac:	5f e3       	ldi	r21, 0x3F	; 63
    2fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb2:	88 23       	and	r24, r24
    2fb4:	2c f4       	brge	.+10     	; 0x2fc0 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
    2fbe:	3f c0       	rjmp	.+126    	; 0x303e <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    2fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc2:	78 85       	ldd	r23, Y+8	; 0x08
    2fc4:	89 85       	ldd	r24, Y+9	; 0x09
    2fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	3f ef       	ldi	r19, 0xFF	; 255
    2fcc:	4f e7       	ldi	r20, 0x7F	; 127
    2fce:	57 e4       	ldi	r21, 0x47	; 71
    2fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd4:	18 16       	cp	r1, r24
    2fd6:	4c f5       	brge	.+82     	; 0x302a <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e2       	ldi	r20, 0x20	; 32
    2fe6:	51 e4       	ldi	r21, 0x41	; 65
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	0f c0       	rjmp	.+30     	; 0x3020 <SevSeg_voidDoubleAutoCounter+0x16a>
    3002:	80 e9       	ldi	r24, 0x90	; 144
    3004:	91 e0       	ldi	r25, 0x01	; 1
    3006:	9c 83       	std	Y+4, r25	; 0x04
    3008:	8b 83       	std	Y+3, r24	; 0x03
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <SevSeg_voidDoubleAutoCounter+0x158>
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	9e 81       	ldd	r25, Y+6	; 0x06
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	69 f7       	brne	.-38     	; 0x3002 <SevSeg_voidDoubleAutoCounter+0x14c>
    3028:	14 c0       	rjmp	.+40     	; 0x3052 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302a:	6f 81       	ldd	r22, Y+7	; 0x07
    302c:	78 85       	ldd	r23, Y+8	; 0x08
    302e:	89 85       	ldd	r24, Y+9	; 0x09
    3030:	9a 85       	ldd	r25, Y+10	; 0x0a
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9e 83       	std	Y+6, r25	; 0x06
    303c:	8d 83       	std	Y+5, r24	; 0x05
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	9e 81       	ldd	r25, Y+6	; 0x06
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <SevSeg_voidDoubleAutoCounter+0x194>
    304e:	9a 83       	std	Y+2, r25	; 0x02
    3050:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    3052:	8f 85       	ldd	r24, Y+15	; 0x0f
    3054:	98 89       	ldd	r25, Y+16	; 0x10
    3056:	a9 89       	ldd	r26, Y+17	; 0x11
    3058:	ba 89       	ldd	r27, Y+18	; 0x12
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	a1 1d       	adc	r26, r1
    305e:	b1 1d       	adc	r27, r1
    3060:	8f 87       	std	Y+15, r24	; 0x0f
    3062:	98 8b       	std	Y+16, r25	; 0x10
    3064:	a9 8b       	std	Y+17, r26	; 0x11
    3066:	ba 8b       	std	Y+18, r27	; 0x12
    3068:	8f 85       	ldd	r24, Y+15	; 0x0f
    306a:	98 89       	ldd	r25, Y+16	; 0x10
    306c:	a9 89       	ldd	r26, Y+17	; 0x11
    306e:	ba 89       	ldd	r27, Y+18	; 0x12
    3070:	8a 30       	cpi	r24, 0x0A	; 10
    3072:	91 05       	cpc	r25, r1
    3074:	a1 05       	cpc	r26, r1
    3076:	b1 05       	cpc	r27, r1
    3078:	0c f4       	brge	.+2      	; 0x307c <SevSeg_voidDoubleAutoCounter+0x1c6>
    307a:	69 cf       	rjmp	.-302    	; 0x2f4e <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    307c:	8b 89       	ldd	r24, Y+19	; 0x13
    307e:	9c 89       	ldd	r25, Y+20	; 0x14
    3080:	ad 89       	ldd	r26, Y+21	; 0x15
    3082:	be 89       	ldd	r27, Y+22	; 0x16
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	a1 1d       	adc	r26, r1
    3088:	b1 1d       	adc	r27, r1
    308a:	8b 8b       	std	Y+19, r24	; 0x13
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	ad 8b       	std	Y+21, r26	; 0x15
    3090:	be 8b       	std	Y+22, r27	; 0x16
    3092:	8b 89       	ldd	r24, Y+19	; 0x13
    3094:	9c 89       	ldd	r25, Y+20	; 0x14
    3096:	ad 89       	ldd	r26, Y+21	; 0x15
    3098:	be 89       	ldd	r27, Y+22	; 0x16
    309a:	8a 30       	cpi	r24, 0x0A	; 10
    309c:	91 05       	cpc	r25, r1
    309e:	a1 05       	cpc	r26, r1
    30a0:	b1 05       	cpc	r27, r1
    30a2:	0c f4       	brge	.+2      	; 0x30a6 <SevSeg_voidDoubleAutoCounter+0x1f0>
    30a4:	3f cf       	rjmp	.-386    	; 0x2f24 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    30a6:	a5 96       	adiw	r28, 0x25	; 37
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	e1 97       	sbiw	r28, 0x31	; 49
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	8b a7       	std	Y+43, r24	; 0x2b
    30ce:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    30d0:	ce 01       	movw	r24, r28
    30d2:	81 96       	adiw	r24, 0x21	; 33
    30d4:	9e a7       	std	Y+46, r25	; 0x2e
    30d6:	8d a7       	std	Y+45, r24	; 0x2d
    30d8:	e5 ed       	ldi	r30, 0xD5	; 213
    30da:	f1 e0       	ldi	r31, 0x01	; 1
    30dc:	f8 ab       	std	Y+48, r31	; 0x30
    30de:	ef a7       	std	Y+47, r30	; 0x2f
    30e0:	fa e0       	ldi	r31, 0x0A	; 10
    30e2:	f9 ab       	std	Y+49, r31	; 0x31
    30e4:	ef a5       	ldd	r30, Y+47	; 0x2f
    30e6:	f8 a9       	ldd	r31, Y+48	; 0x30
    30e8:	00 80       	ld	r0, Z
    30ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ec:	98 a9       	ldd	r25, Y+48	; 0x30
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	98 ab       	std	Y+48, r25	; 0x30
    30f2:	8f a7       	std	Y+47, r24	; 0x2f
    30f4:	ed a5       	ldd	r30, Y+45	; 0x2d
    30f6:	fe a5       	ldd	r31, Y+46	; 0x2e
    30f8:	00 82       	st	Z, r0
    30fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    30fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	9e a7       	std	Y+46, r25	; 0x2e
    3102:	8d a7       	std	Y+45, r24	; 0x2d
    3104:	99 a9       	ldd	r25, Y+49	; 0x31
    3106:	91 50       	subi	r25, 0x01	; 1
    3108:	99 ab       	std	Y+49, r25	; 0x31
    310a:	e9 a9       	ldd	r30, Y+49	; 0x31
    310c:	ee 23       	and	r30, r30
    310e:	51 f7       	brne	.-44     	; 0x30e4 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    3110:	1d 8e       	std	Y+29, r1	; 0x1d
    3112:	1e 8e       	std	Y+30, r1	; 0x1e
    3114:	1f 8e       	std	Y+31, r1	; 0x1f
    3116:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    3118:	8b a5       	ldd	r24, Y+43	; 0x2b
    311a:	88 23       	and	r24, r24
    311c:	0c f4       	brge	.+2      	; 0x3120 <SevSeg_voidSingleRangeCounter+0x68>
    311e:	64 c1       	rjmp	.+712    	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>
    3120:	8b a5       	ldd	r24, Y+43	; 0x2b
    3122:	8a 30       	cpi	r24, 0x0A	; 10
    3124:	0c f0       	brlt	.+2      	; 0x3128 <SevSeg_voidSingleRangeCounter+0x70>
    3126:	60 c1       	rjmp	.+704    	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>
    3128:	8c a5       	ldd	r24, Y+44	; 0x2c
    312a:	8a 30       	cpi	r24, 0x0A	; 10
    312c:	0c f0       	brlt	.+2      	; 0x3130 <SevSeg_voidSingleRangeCounter+0x78>
    312e:	5c c1       	rjmp	.+696    	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>
    3130:	8c a5       	ldd	r24, Y+44	; 0x2c
    3132:	88 23       	and	r24, r24
    3134:	0c f4       	brge	.+2      	; 0x3138 <SevSeg_voidSingleRangeCounter+0x80>
    3136:	58 c1       	rjmp	.+688    	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    3138:	9b a5       	ldd	r25, Y+43	; 0x2b
    313a:	8c a5       	ldd	r24, Y+44	; 0x2c
    313c:	98 17       	cp	r25, r24
    313e:	0c f0       	brlt	.+2      	; 0x3142 <SevSeg_voidSingleRangeCounter+0x8a>
    3140:	aa c0       	rjmp	.+340    	; 0x3296 <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    3142:	8b a5       	ldd	r24, Y+43	; 0x2b
    3144:	99 27       	eor	r25, r25
    3146:	87 fd       	sbrc	r24, 7
    3148:	90 95       	com	r25
    314a:	a9 2f       	mov	r26, r25
    314c:	b9 2f       	mov	r27, r25
    314e:	8d 8f       	std	Y+29, r24	; 0x1d
    3150:	9e 8f       	std	Y+30, r25	; 0x1e
    3152:	af 8f       	std	Y+31, r26	; 0x1f
    3154:	b8 a3       	std	Y+32, r27	; 0x20
    3156:	8d c0       	rjmp	.+282    	; 0x3272 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315c:	af 8d       	ldd	r26, Y+31	; 0x1f
    315e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3160:	9e 01       	movw	r18, r28
    3162:	2f 5d       	subi	r18, 0xDF	; 223
    3164:	3f 4f       	sbci	r19, 0xFF	; 255
    3166:	f9 01       	movw	r30, r18
    3168:	e8 0f       	add	r30, r24
    316a:	f9 1f       	adc	r31, r25
    316c:	80 81       	ld	r24, Z
    316e:	98 2f       	mov	r25, r24
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	69 2f       	mov	r22, r25
    3174:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a0 e2       	ldi	r26, 0x20	; 32
    317e:	b1 e4       	ldi	r27, 0x41	; 65
    3180:	89 8f       	std	Y+25, r24	; 0x19
    3182:	9a 8f       	std	Y+26, r25	; 0x1a
    3184:	ab 8f       	std	Y+27, r26	; 0x1b
    3186:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3188:	69 8d       	ldd	r22, Y+25	; 0x19
    318a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    318c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	4a e7       	ldi	r20, 0x7A	; 122
    3196:	55 e4       	ldi	r21, 0x45	; 69
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	8d 8b       	std	Y+21, r24	; 0x15
    31a2:	9e 8b       	std	Y+22, r25	; 0x16
    31a4:	af 8b       	std	Y+23, r26	; 0x17
    31a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31a8:	6d 89       	ldd	r22, Y+21	; 0x15
    31aa:	7e 89       	ldd	r23, Y+22	; 0x16
    31ac:	8f 89       	ldd	r24, Y+23	; 0x17
    31ae:	98 8d       	ldd	r25, Y+24	; 0x18
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e8       	ldi	r20, 0x80	; 128
    31b6:	5f e3       	ldi	r21, 0x3F	; 63
    31b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31bc:	88 23       	and	r24, r24
    31be:	2c f4       	brge	.+10     	; 0x31ca <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9c 8b       	std	Y+20, r25	; 0x14
    31c6:	8b 8b       	std	Y+19, r24	; 0x13
    31c8:	3f c0       	rjmp	.+126    	; 0x3248 <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    31ca:	6d 89       	ldd	r22, Y+21	; 0x15
    31cc:	7e 89       	ldd	r23, Y+22	; 0x16
    31ce:	8f 89       	ldd	r24, Y+23	; 0x17
    31d0:	98 8d       	ldd	r25, Y+24	; 0x18
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	3f ef       	ldi	r19, 0xFF	; 255
    31d6:	4f e7       	ldi	r20, 0x7F	; 127
    31d8:	57 e4       	ldi	r21, 0x47	; 71
    31da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31de:	18 16       	cp	r1, r24
    31e0:	4c f5       	brge	.+82     	; 0x3234 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e2:	69 8d       	ldd	r22, Y+25	; 0x19
    31e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e2       	ldi	r20, 0x20	; 32
    31f0:	51 e4       	ldi	r21, 0x41	; 65
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	bc 01       	movw	r22, r24
    31fc:	cd 01       	movw	r24, r26
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	9c 8b       	std	Y+20, r25	; 0x14
    3208:	8b 8b       	std	Y+19, r24	; 0x13
    320a:	0f c0       	rjmp	.+30     	; 0x322a <SevSeg_voidSingleRangeCounter+0x172>
    320c:	80 e9       	ldi	r24, 0x90	; 144
    320e:	91 e0       	ldi	r25, 0x01	; 1
    3210:	9a 8b       	std	Y+18, r25	; 0x12
    3212:	89 8b       	std	Y+17, r24	; 0x11
    3214:	89 89       	ldd	r24, Y+17	; 0x11
    3216:	9a 89       	ldd	r25, Y+18	; 0x12
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <SevSeg_voidSingleRangeCounter+0x160>
    321c:	9a 8b       	std	Y+18, r25	; 0x12
    321e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	9c 8b       	std	Y+20, r25	; 0x14
    3228:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322a:	8b 89       	ldd	r24, Y+19	; 0x13
    322c:	9c 89       	ldd	r25, Y+20	; 0x14
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	69 f7       	brne	.-38     	; 0x320c <SevSeg_voidSingleRangeCounter+0x154>
    3232:	14 c0       	rjmp	.+40     	; 0x325c <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3234:	6d 89       	ldd	r22, Y+21	; 0x15
    3236:	7e 89       	ldd	r23, Y+22	; 0x16
    3238:	8f 89       	ldd	r24, Y+23	; 0x17
    323a:	98 8d       	ldd	r25, Y+24	; 0x18
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9c 8b       	std	Y+20, r25	; 0x14
    3246:	8b 8b       	std	Y+19, r24	; 0x13
    3248:	8b 89       	ldd	r24, Y+19	; 0x13
    324a:	9c 89       	ldd	r25, Y+20	; 0x14
    324c:	98 8b       	std	Y+16, r25	; 0x10
    324e:	8f 87       	std	Y+15, r24	; 0x0f
    3250:	8f 85       	ldd	r24, Y+15	; 0x0f
    3252:	98 89       	ldd	r25, Y+16	; 0x10
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <SevSeg_voidSingleRangeCounter+0x19c>
    3258:	98 8b       	std	Y+16, r25	; 0x10
    325a:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    325c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    325e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3260:	af 8d       	ldd	r26, Y+31	; 0x1f
    3262:	b8 a1       	ldd	r27, Y+32	; 0x20
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	a1 1d       	adc	r26, r1
    3268:	b1 1d       	adc	r27, r1
    326a:	8d 8f       	std	Y+29, r24	; 0x1d
    326c:	9e 8f       	std	Y+30, r25	; 0x1e
    326e:	af 8f       	std	Y+31, r26	; 0x1f
    3270:	b8 a3       	std	Y+32, r27	; 0x20
    3272:	8c a5       	ldd	r24, Y+44	; 0x2c
    3274:	28 2f       	mov	r18, r24
    3276:	33 27       	eor	r19, r19
    3278:	27 fd       	sbrc	r18, 7
    327a:	30 95       	com	r19
    327c:	43 2f       	mov	r20, r19
    327e:	53 2f       	mov	r21, r19
    3280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3284:	af 8d       	ldd	r26, Y+31	; 0x1f
    3286:	b8 a1       	ldd	r27, Y+32	; 0x20
    3288:	82 17       	cp	r24, r18
    328a:	93 07       	cpc	r25, r19
    328c:	a4 07       	cpc	r26, r20
    328e:	b5 07       	cpc	r27, r21
    3290:	0c f4       	brge	.+2      	; 0x3294 <SevSeg_voidSingleRangeCounter+0x1dc>
    3292:	62 cf       	rjmp	.-316    	; 0x3158 <SevSeg_voidSingleRangeCounter+0xa0>
    3294:	a9 c0       	rjmp	.+338    	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    3296:	8b a5       	ldd	r24, Y+43	; 0x2b
    3298:	99 27       	eor	r25, r25
    329a:	87 fd       	sbrc	r24, 7
    329c:	90 95       	com	r25
    329e:	a9 2f       	mov	r26, r25
    32a0:	b9 2f       	mov	r27, r25
    32a2:	8d 8f       	std	Y+29, r24	; 0x1d
    32a4:	9e 8f       	std	Y+30, r25	; 0x1e
    32a6:	af 8f       	std	Y+31, r26	; 0x1f
    32a8:	b8 a3       	std	Y+32, r27	; 0x20
    32aa:	8d c0       	rjmp	.+282    	; 0x33c6 <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    32ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32b0:	af 8d       	ldd	r26, Y+31	; 0x1f
    32b2:	b8 a1       	ldd	r27, Y+32	; 0x20
    32b4:	9e 01       	movw	r18, r28
    32b6:	2f 5d       	subi	r18, 0xDF	; 223
    32b8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ba:	f9 01       	movw	r30, r18
    32bc:	e8 0f       	add	r30, r24
    32be:	f9 1f       	adc	r31, r25
    32c0:	80 81       	ld	r24, Z
    32c2:	98 2f       	mov	r25, r24
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	69 2f       	mov	r22, r25
    32c8:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	a0 e2       	ldi	r26, 0x20	; 32
    32d2:	b1 e4       	ldi	r27, 0x41	; 65
    32d4:	8b 87       	std	Y+11, r24	; 0x0b
    32d6:	9c 87       	std	Y+12, r25	; 0x0c
    32d8:	ad 87       	std	Y+13, r26	; 0x0d
    32da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32de:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a e7       	ldi	r20, 0x7A	; 122
    32ea:	55 e4       	ldi	r21, 0x45	; 69
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8f 83       	std	Y+7, r24	; 0x07
    32f6:	98 87       	std	Y+8, r25	; 0x08
    32f8:	a9 87       	std	Y+9, r26	; 0x09
    32fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32fc:	6f 81       	ldd	r22, Y+7	; 0x07
    32fe:	78 85       	ldd	r23, Y+8	; 0x08
    3300:	89 85       	ldd	r24, Y+9	; 0x09
    3302:	9a 85       	ldd	r25, Y+10	; 0x0a
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e8       	ldi	r20, 0x80	; 128
    330a:	5f e3       	ldi	r21, 0x3F	; 63
    330c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3310:	88 23       	and	r24, r24
    3312:	2c f4       	brge	.+10     	; 0x331e <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	3f c0       	rjmp	.+126    	; 0x339c <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	4c f5       	brge	.+82     	; 0x3388 <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	6b 85       	ldd	r22, Y+11	; 0x0b
    3338:	7c 85       	ldd	r23, Y+12	; 0x0c
    333a:	8d 85       	ldd	r24, Y+13	; 0x0d
    333c:	9e 85       	ldd	r25, Y+14	; 0x0e
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	0f c0       	rjmp	.+30     	; 0x337e <SevSeg_voidSingleRangeCounter+0x2c6>
    3360:	80 e9       	ldi	r24, 0x90	; 144
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	9c 83       	std	Y+4, r25	; 0x04
    3366:	8b 83       	std	Y+3, r24	; 0x03
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <SevSeg_voidSingleRangeCounter+0x2b4>
    3370:	9c 83       	std	Y+4, r25	; 0x04
    3372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	69 f7       	brne	.-38     	; 0x3360 <SevSeg_voidSingleRangeCounter+0x2a8>
    3386:	14 c0       	rjmp	.+40     	; 0x33b0 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	9a 81       	ldd	r25, Y+2	; 0x02
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <SevSeg_voidSingleRangeCounter+0x2f0>
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    33b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    33b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	a1 09       	sbc	r26, r1
    33bc:	b1 09       	sbc	r27, r1
    33be:	8d 8f       	std	Y+29, r24	; 0x1d
    33c0:	9e 8f       	std	Y+30, r25	; 0x1e
    33c2:	af 8f       	std	Y+31, r26	; 0x1f
    33c4:	b8 a3       	std	Y+32, r27	; 0x20
    33c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    33c8:	28 2f       	mov	r18, r24
    33ca:	33 27       	eor	r19, r19
    33cc:	27 fd       	sbrc	r18, 7
    33ce:	30 95       	com	r19
    33d0:	43 2f       	mov	r20, r19
    33d2:	53 2f       	mov	r21, r19
    33d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33d8:	af 8d       	ldd	r26, Y+31	; 0x1f
    33da:	b8 a1       	ldd	r27, Y+32	; 0x20
    33dc:	82 17       	cp	r24, r18
    33de:	93 07       	cpc	r25, r19
    33e0:	a4 07       	cpc	r26, r20
    33e2:	b5 07       	cpc	r27, r21
    33e4:	0c f0       	brlt	.+2      	; 0x33e8 <SevSeg_voidSingleRangeCounter+0x330>
    33e6:	62 cf       	rjmp	.-316    	; 0x32ac <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    33e8:	e1 96       	adiw	r28, 0x31	; 49
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	e9 97       	sbiw	r28, 0x39	; 57
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	8b ab       	std	Y+51, r24	; 0x33
    3410:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    3412:	ce 01       	movw	r24, r28
    3414:	89 96       	adiw	r24, 0x29	; 41
    3416:	9e ab       	std	Y+54, r25	; 0x36
    3418:	8d ab       	std	Y+53, r24	; 0x35
    341a:	ef ed       	ldi	r30, 0xDF	; 223
    341c:	f1 e0       	ldi	r31, 0x01	; 1
    341e:	f8 af       	std	Y+56, r31	; 0x38
    3420:	ef ab       	std	Y+55, r30	; 0x37
    3422:	fa e0       	ldi	r31, 0x0A	; 10
    3424:	f9 af       	std	Y+57, r31	; 0x39
    3426:	ef a9       	ldd	r30, Y+55	; 0x37
    3428:	f8 ad       	ldd	r31, Y+56	; 0x38
    342a:	00 80       	ld	r0, Z
    342c:	8f a9       	ldd	r24, Y+55	; 0x37
    342e:	98 ad       	ldd	r25, Y+56	; 0x38
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	98 af       	std	Y+56, r25	; 0x38
    3434:	8f ab       	std	Y+55, r24	; 0x37
    3436:	ed a9       	ldd	r30, Y+53	; 0x35
    3438:	fe a9       	ldd	r31, Y+54	; 0x36
    343a:	00 82       	st	Z, r0
    343c:	8d a9       	ldd	r24, Y+53	; 0x35
    343e:	9e a9       	ldd	r25, Y+54	; 0x36
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	9e ab       	std	Y+54, r25	; 0x36
    3444:	8d ab       	std	Y+53, r24	; 0x35
    3446:	99 ad       	ldd	r25, Y+57	; 0x39
    3448:	91 50       	subi	r25, 0x01	; 1
    344a:	99 af       	std	Y+57, r25	; 0x39
    344c:	e9 ad       	ldd	r30, Y+57	; 0x39
    344e:	ee 23       	and	r30, r30
    3450:	51 f7       	brne	.-44     	; 0x3426 <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    3452:	8b a9       	ldd	r24, Y+51	; 0x33
    3454:	9a e0       	ldi	r25, 0x0A	; 10
    3456:	69 2f       	mov	r22, r25
    3458:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    345c:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    345e:	8b a9       	ldd	r24, Y+51	; 0x33
    3460:	9a e0       	ldi	r25, 0x0A	; 10
    3462:	69 2f       	mov	r22, r25
    3464:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3468:	89 2f       	mov	r24, r25
    346a:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    346c:	8c a9       	ldd	r24, Y+52	; 0x34
    346e:	9a e0       	ldi	r25, 0x0A	; 10
    3470:	69 2f       	mov	r22, r25
    3472:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3476:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    3478:	8c a9       	ldd	r24, Y+52	; 0x34
    347a:	9a e0       	ldi	r25, 0x0A	; 10
    347c:	69 2f       	mov	r22, r25
    347e:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3482:	89 2f       	mov	r24, r25
    3484:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    3486:	19 a2       	std	Y+33, r1	; 0x21
    3488:	1a a2       	std	Y+34, r1	; 0x22
    348a:	1b a2       	std	Y+35, r1	; 0x23
    348c:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    348e:	1d 8e       	std	Y+29, r1	; 0x1d
    3490:	1e 8e       	std	Y+30, r1	; 0x1e
    3492:	1f 8e       	std	Y+31, r1	; 0x1f
    3494:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    3496:	88 a5       	ldd	r24, Y+40	; 0x28
    3498:	88 23       	and	r24, r24
    349a:	0c f4       	brge	.+2      	; 0x349e <SevSeg_voidDoubleRangeCounter+0xa4>
    349c:	05 c2       	rjmp	.+1034   	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>
    349e:	88 a5       	ldd	r24, Y+40	; 0x28
    34a0:	8a 30       	cpi	r24, 0x0A	; 10
    34a2:	0c f0       	brlt	.+2      	; 0x34a6 <SevSeg_voidDoubleRangeCounter+0xac>
    34a4:	01 c2       	rjmp	.+1026   	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>
    34a6:	8e a1       	ldd	r24, Y+38	; 0x26
    34a8:	8a 30       	cpi	r24, 0x0A	; 10
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <SevSeg_voidDoubleRangeCounter+0xb4>
    34ac:	fd c1       	rjmp	.+1018   	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>
    34ae:	8e a1       	ldd	r24, Y+38	; 0x26
    34b0:	88 23       	and	r24, r24
    34b2:	0c f4       	brge	.+2      	; 0x34b6 <SevSeg_voidDoubleRangeCounter+0xbc>
    34b4:	f9 c1       	rjmp	.+1010   	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    34b6:	9b a9       	ldd	r25, Y+51	; 0x33
    34b8:	8c a9       	ldd	r24, Y+52	; 0x34
    34ba:	98 17       	cp	r25, r24
    34bc:	0c f0       	brlt	.+2      	; 0x34c0 <SevSeg_voidDoubleRangeCounter+0xc6>
    34be:	fc c0       	rjmp	.+504    	; 0x36b8 <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    34c0:	88 a5       	ldd	r24, Y+40	; 0x28
    34c2:	99 27       	eor	r25, r25
    34c4:	87 fd       	sbrc	r24, 7
    34c6:	90 95       	com	r25
    34c8:	a9 2f       	mov	r26, r25
    34ca:	b9 2f       	mov	r27, r25
    34cc:	89 a3       	std	Y+33, r24	; 0x21
    34ce:	9a a3       	std	Y+34, r25	; 0x22
    34d0:	ab a3       	std	Y+35, r26	; 0x23
    34d2:	bc a3       	std	Y+36, r27	; 0x24
    34d4:	df c0       	rjmp	.+446    	; 0x3694 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    34d6:	89 a1       	ldd	r24, Y+33	; 0x21
    34d8:	9a a1       	ldd	r25, Y+34	; 0x22
    34da:	ab a1       	ldd	r26, Y+35	; 0x23
    34dc:	bc a1       	ldd	r27, Y+36	; 0x24
    34de:	9e 01       	movw	r18, r28
    34e0:	27 5d       	subi	r18, 0xD7	; 215
    34e2:	3f 4f       	sbci	r19, 0xFF	; 255
    34e4:	f9 01       	movw	r30, r18
    34e6:	e8 0f       	add	r30, r24
    34e8:	f9 1f       	adc	r31, r25
    34ea:	80 81       	ld	r24, Z
    34ec:	98 2f       	mov	r25, r24
    34ee:	84 e0       	ldi	r24, 0x04	; 4
    34f0:	69 2f       	mov	r22, r25
    34f2:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    34f6:	8f a1       	ldd	r24, Y+39	; 0x27
    34f8:	99 27       	eor	r25, r25
    34fa:	87 fd       	sbrc	r24, 7
    34fc:	90 95       	com	r25
    34fe:	a9 2f       	mov	r26, r25
    3500:	b9 2f       	mov	r27, r25
    3502:	8d 8f       	std	Y+29, r24	; 0x1d
    3504:	9e 8f       	std	Y+30, r25	; 0x1e
    3506:	af 8f       	std	Y+31, r26	; 0x1f
    3508:	b8 a3       	std	Y+32, r27	; 0x20
    350a:	ae c0       	rjmp	.+348    	; 0x3668 <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    350c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    350e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3510:	af 8d       	ldd	r26, Y+31	; 0x1f
    3512:	b8 a1       	ldd	r27, Y+32	; 0x20
    3514:	9e 01       	movw	r18, r28
    3516:	27 5d       	subi	r18, 0xD7	; 215
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	f9 01       	movw	r30, r18
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	80 81       	ld	r24, Z
    3522:	98 2f       	mov	r25, r24
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	69 2f       	mov	r22, r25
    3528:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	a0 e2       	ldi	r26, 0x20	; 32
    3532:	b1 e4       	ldi	r27, 0x41	; 65
    3534:	89 8f       	std	Y+25, r24	; 0x19
    3536:	9a 8f       	std	Y+26, r25	; 0x1a
    3538:	ab 8f       	std	Y+27, r26	; 0x1b
    353a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353c:	69 8d       	ldd	r22, Y+25	; 0x19
    353e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	4a e7       	ldi	r20, 0x7A	; 122
    354a:	55 e4       	ldi	r21, 0x45	; 69
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8d 8b       	std	Y+21, r24	; 0x15
    3556:	9e 8b       	std	Y+22, r25	; 0x16
    3558:	af 8b       	std	Y+23, r26	; 0x17
    355a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355c:	6d 89       	ldd	r22, Y+21	; 0x15
    355e:	7e 89       	ldd	r23, Y+22	; 0x16
    3560:	8f 89       	ldd	r24, Y+23	; 0x17
    3562:	98 8d       	ldd	r25, Y+24	; 0x18
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e8       	ldi	r20, 0x80	; 128
    356a:	5f e3       	ldi	r21, 0x3F	; 63
    356c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3570:	88 23       	and	r24, r24
    3572:	2c f4       	brge	.+10     	; 0x357e <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    357e:	6d 89       	ldd	r22, Y+21	; 0x15
    3580:	7e 89       	ldd	r23, Y+22	; 0x16
    3582:	8f 89       	ldd	r24, Y+23	; 0x17
    3584:	98 8d       	ldd	r25, Y+24	; 0x18
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	3f ef       	ldi	r19, 0xFF	; 255
    358a:	4f e7       	ldi	r20, 0x7F	; 127
    358c:	57 e4       	ldi	r21, 0x47	; 71
    358e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3592:	18 16       	cp	r1, r24
    3594:	4c f5       	brge	.+82     	; 0x35e8 <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	69 8d       	ldd	r22, Y+25	; 0x19
    3598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    359a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9c 8b       	std	Y+20, r25	; 0x14
    35bc:	8b 8b       	std	Y+19, r24	; 0x13
    35be:	0f c0       	rjmp	.+30     	; 0x35de <SevSeg_voidDoubleRangeCounter+0x1e4>
    35c0:	80 e9       	ldi	r24, 0x90	; 144
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	9a 8b       	std	Y+18, r25	; 0x12
    35c6:	89 8b       	std	Y+17, r24	; 0x11
    35c8:	89 89       	ldd	r24, Y+17	; 0x11
    35ca:	9a 89       	ldd	r25, Y+18	; 0x12
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <SevSeg_voidDoubleRangeCounter+0x1d2>
    35d0:	9a 8b       	std	Y+18, r25	; 0x12
    35d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8b 89       	ldd	r24, Y+19	; 0x13
    35d6:	9c 89       	ldd	r25, Y+20	; 0x14
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8b 89       	ldd	r24, Y+19	; 0x13
    35e0:	9c 89       	ldd	r25, Y+20	; 0x14
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <SevSeg_voidDoubleRangeCounter+0x1c6>
    35e6:	14 c0       	rjmp	.+40     	; 0x3610 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ea:	7e 89       	ldd	r23, Y+22	; 0x16
    35ec:	8f 89       	ldd	r24, Y+23	; 0x17
    35ee:	98 8d       	ldd	r25, Y+24	; 0x18
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9c 8b       	std	Y+20, r25	; 0x14
    35fa:	8b 8b       	std	Y+19, r24	; 0x13
    35fc:	8b 89       	ldd	r24, Y+19	; 0x13
    35fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3600:	98 8b       	std	Y+16, r25	; 0x10
    3602:	8f 87       	std	Y+15, r24	; 0x0f
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	98 89       	ldd	r25, Y+16	; 0x10
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	f1 f7       	brne	.-4      	; 0x3608 <SevSeg_voidDoubleRangeCounter+0x20e>
    360c:	98 8b       	std	Y+16, r25	; 0x10
    360e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3610:	8d a1       	ldd	r24, Y+37	; 0x25
    3612:	28 2f       	mov	r18, r24
    3614:	33 27       	eor	r19, r19
    3616:	27 fd       	sbrc	r18, 7
    3618:	30 95       	com	r19
    361a:	43 2f       	mov	r20, r19
    361c:	53 2f       	mov	r21, r19
    361e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3622:	af 8d       	ldd	r26, Y+31	; 0x1f
    3624:	b8 a1       	ldd	r27, Y+32	; 0x20
    3626:	28 17       	cp	r18, r24
    3628:	39 07       	cpc	r19, r25
    362a:	4a 07       	cpc	r20, r26
    362c:	5b 07       	cpc	r21, r27
    362e:	89 f4       	brne	.+34     	; 0x3652 <SevSeg_voidDoubleRangeCounter+0x258>
    3630:	8e a1       	ldd	r24, Y+38	; 0x26
    3632:	28 2f       	mov	r18, r24
    3634:	33 27       	eor	r19, r19
    3636:	27 fd       	sbrc	r18, 7
    3638:	30 95       	com	r19
    363a:	43 2f       	mov	r20, r19
    363c:	53 2f       	mov	r21, r19
    363e:	89 a1       	ldd	r24, Y+33	; 0x21
    3640:	9a a1       	ldd	r25, Y+34	; 0x22
    3642:	ab a1       	ldd	r26, Y+35	; 0x23
    3644:	bc a1       	ldd	r27, Y+36	; 0x24
    3646:	28 17       	cp	r18, r24
    3648:	39 07       	cpc	r19, r25
    364a:	4a 07       	cpc	r20, r26
    364c:	5b 07       	cpc	r21, r27
    364e:	09 f4       	brne	.+2      	; 0x3652 <SevSeg_voidDoubleRangeCounter+0x258>
    3650:	2b c1       	rjmp	.+598    	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3654:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3656:	af 8d       	ldd	r26, Y+31	; 0x1f
    3658:	b8 a1       	ldd	r27, Y+32	; 0x20
    365a:	01 96       	adiw	r24, 0x01	; 1
    365c:	a1 1d       	adc	r26, r1
    365e:	b1 1d       	adc	r27, r1
    3660:	8d 8f       	std	Y+29, r24	; 0x1d
    3662:	9e 8f       	std	Y+30, r25	; 0x1e
    3664:	af 8f       	std	Y+31, r26	; 0x1f
    3666:	b8 a3       	std	Y+32, r27	; 0x20
    3668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    366a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    366c:	af 8d       	ldd	r26, Y+31	; 0x1f
    366e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3670:	8a 30       	cpi	r24, 0x0A	; 10
    3672:	91 05       	cpc	r25, r1
    3674:	a1 05       	cpc	r26, r1
    3676:	b1 05       	cpc	r27, r1
    3678:	0c f4       	brge	.+2      	; 0x367c <SevSeg_voidDoubleRangeCounter+0x282>
    367a:	48 cf       	rjmp	.-368    	; 0x350c <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    367c:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    367e:	89 a1       	ldd	r24, Y+33	; 0x21
    3680:	9a a1       	ldd	r25, Y+34	; 0x22
    3682:	ab a1       	ldd	r26, Y+35	; 0x23
    3684:	bc a1       	ldd	r27, Y+36	; 0x24
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	a1 1d       	adc	r26, r1
    368a:	b1 1d       	adc	r27, r1
    368c:	89 a3       	std	Y+33, r24	; 0x21
    368e:	9a a3       	std	Y+34, r25	; 0x22
    3690:	ab a3       	std	Y+35, r26	; 0x23
    3692:	bc a3       	std	Y+36, r27	; 0x24
    3694:	8e a1       	ldd	r24, Y+38	; 0x26
    3696:	28 2f       	mov	r18, r24
    3698:	33 27       	eor	r19, r19
    369a:	27 fd       	sbrc	r18, 7
    369c:	30 95       	com	r19
    369e:	43 2f       	mov	r20, r19
    36a0:	53 2f       	mov	r21, r19
    36a2:	89 a1       	ldd	r24, Y+33	; 0x21
    36a4:	9a a1       	ldd	r25, Y+34	; 0x22
    36a6:	ab a1       	ldd	r26, Y+35	; 0x23
    36a8:	bc a1       	ldd	r27, Y+36	; 0x24
    36aa:	28 17       	cp	r18, r24
    36ac:	39 07       	cpc	r19, r25
    36ae:	4a 07       	cpc	r20, r26
    36b0:	5b 07       	cpc	r21, r27
    36b2:	0c f0       	brlt	.+2      	; 0x36b6 <SevSeg_voidDoubleRangeCounter+0x2bc>
    36b4:	10 cf       	rjmp	.-480    	; 0x34d6 <SevSeg_voidDoubleRangeCounter+0xdc>
    36b6:	f8 c0       	rjmp	.+496    	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    36b8:	88 a5       	ldd	r24, Y+40	; 0x28
    36ba:	99 27       	eor	r25, r25
    36bc:	87 fd       	sbrc	r24, 7
    36be:	90 95       	com	r25
    36c0:	a9 2f       	mov	r26, r25
    36c2:	b9 2f       	mov	r27, r25
    36c4:	89 a3       	std	Y+33, r24	; 0x21
    36c6:	9a a3       	std	Y+34, r25	; 0x22
    36c8:	ab a3       	std	Y+35, r26	; 0x23
    36ca:	bc a3       	std	Y+36, r27	; 0x24
    36cc:	dc c0       	rjmp	.+440    	; 0x3886 <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    36ce:	89 a1       	ldd	r24, Y+33	; 0x21
    36d0:	9a a1       	ldd	r25, Y+34	; 0x22
    36d2:	ab a1       	ldd	r26, Y+35	; 0x23
    36d4:	bc a1       	ldd	r27, Y+36	; 0x24
    36d6:	9e 01       	movw	r18, r28
    36d8:	27 5d       	subi	r18, 0xD7	; 215
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	f9 01       	movw	r30, r18
    36de:	e8 0f       	add	r30, r24
    36e0:	f9 1f       	adc	r31, r25
    36e2:	80 81       	ld	r24, Z
    36e4:	98 2f       	mov	r25, r24
    36e6:	84 e0       	ldi	r24, 0x04	; 4
    36e8:	69 2f       	mov	r22, r25
    36ea:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    36ee:	8f a1       	ldd	r24, Y+39	; 0x27
    36f0:	99 27       	eor	r25, r25
    36f2:	87 fd       	sbrc	r24, 7
    36f4:	90 95       	com	r25
    36f6:	a9 2f       	mov	r26, r25
    36f8:	b9 2f       	mov	r27, r25
    36fa:	8d 8f       	std	Y+29, r24	; 0x1d
    36fc:	9e 8f       	std	Y+30, r25	; 0x1e
    36fe:	af 8f       	std	Y+31, r26	; 0x1f
    3700:	b8 a3       	std	Y+32, r27	; 0x20
    3702:	ad c0       	rjmp	.+346    	; 0x385e <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3704:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3706:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3708:	af 8d       	ldd	r26, Y+31	; 0x1f
    370a:	b8 a1       	ldd	r27, Y+32	; 0x20
    370c:	9e 01       	movw	r18, r28
    370e:	27 5d       	subi	r18, 0xD7	; 215
    3710:	3f 4f       	sbci	r19, 0xFF	; 255
    3712:	f9 01       	movw	r30, r18
    3714:	e8 0f       	add	r30, r24
    3716:	f9 1f       	adc	r31, r25
    3718:	80 81       	ld	r24, Z
    371a:	98 2f       	mov	r25, r24
    371c:	82 e0       	ldi	r24, 0x02	; 2
    371e:	69 2f       	mov	r22, r25
    3720:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	a0 e2       	ldi	r26, 0x20	; 32
    372a:	b1 e4       	ldi	r27, 0x41	; 65
    372c:	8b 87       	std	Y+11, r24	; 0x0b
    372e:	9c 87       	std	Y+12, r25	; 0x0c
    3730:	ad 87       	std	Y+13, r26	; 0x0d
    3732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3734:	6b 85       	ldd	r22, Y+11	; 0x0b
    3736:	7c 85       	ldd	r23, Y+12	; 0x0c
    3738:	8d 85       	ldd	r24, Y+13	; 0x0d
    373a:	9e 85       	ldd	r25, Y+14	; 0x0e
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	4a e7       	ldi	r20, 0x7A	; 122
    3742:	55 e4       	ldi	r21, 0x45	; 69
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	8f 83       	std	Y+7, r24	; 0x07
    374e:	98 87       	std	Y+8, r25	; 0x08
    3750:	a9 87       	std	Y+9, r26	; 0x09
    3752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3754:	6f 81       	ldd	r22, Y+7	; 0x07
    3756:	78 85       	ldd	r23, Y+8	; 0x08
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	2c f4       	brge	.+10     	; 0x3776 <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9e 83       	std	Y+6, r25	; 0x06
    3772:	8d 83       	std	Y+5, r24	; 0x05
    3774:	3f c0       	rjmp	.+126    	; 0x37f4 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    3776:	6f 81       	ldd	r22, Y+7	; 0x07
    3778:	78 85       	ldd	r23, Y+8	; 0x08
    377a:	89 85       	ldd	r24, Y+9	; 0x09
    377c:	9a 85       	ldd	r25, Y+10	; 0x0a
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	3f ef       	ldi	r19, 0xFF	; 255
    3782:	4f e7       	ldi	r20, 0x7F	; 127
    3784:	57 e4       	ldi	r21, 0x47	; 71
    3786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    378a:	18 16       	cp	r1, r24
    378c:	4c f5       	brge	.+82     	; 0x37e0 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3790:	7c 85       	ldd	r23, Y+12	; 0x0c
    3792:	8d 85       	ldd	r24, Y+13	; 0x0d
    3794:	9e 85       	ldd	r25, Y+14	; 0x0e
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e2       	ldi	r20, 0x20	; 32
    379c:	51 e4       	ldi	r21, 0x41	; 65
    379e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9e 83       	std	Y+6, r25	; 0x06
    37b4:	8d 83       	std	Y+5, r24	; 0x05
    37b6:	0f c0       	rjmp	.+30     	; 0x37d6 <SevSeg_voidDoubleRangeCounter+0x3dc>
    37b8:	80 e9       	ldi	r24, 0x90	; 144
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	9c 83       	std	Y+4, r25	; 0x04
    37be:	8b 83       	std	Y+3, r24	; 0x03
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	9c 81       	ldd	r25, Y+4	; 0x04
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <SevSeg_voidDoubleRangeCounter+0x3ca>
    37c8:	9c 83       	std	Y+4, r25	; 0x04
    37ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37cc:	8d 81       	ldd	r24, Y+5	; 0x05
    37ce:	9e 81       	ldd	r25, Y+6	; 0x06
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	9e 83       	std	Y+6, r25	; 0x06
    37d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d6:	8d 81       	ldd	r24, Y+5	; 0x05
    37d8:	9e 81       	ldd	r25, Y+6	; 0x06
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	69 f7       	brne	.-38     	; 0x37b8 <SevSeg_voidDoubleRangeCounter+0x3be>
    37de:	14 c0       	rjmp	.+40     	; 0x3808 <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e0:	6f 81       	ldd	r22, Y+7	; 0x07
    37e2:	78 85       	ldd	r23, Y+8	; 0x08
    37e4:	89 85       	ldd	r24, Y+9	; 0x09
    37e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	8d 81       	ldd	r24, Y+5	; 0x05
    37f6:	9e 81       	ldd	r25, Y+6	; 0x06
    37f8:	9a 83       	std	Y+2, r25	; 0x02
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <SevSeg_voidDoubleRangeCounter+0x406>
    3804:	9a 83       	std	Y+2, r25	; 0x02
    3806:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3808:	8d a1       	ldd	r24, Y+37	; 0x25
    380a:	28 2f       	mov	r18, r24
    380c:	33 27       	eor	r19, r19
    380e:	27 fd       	sbrc	r18, 7
    3810:	30 95       	com	r19
    3812:	43 2f       	mov	r20, r19
    3814:	53 2f       	mov	r21, r19
    3816:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3818:	9e 8d       	ldd	r25, Y+30	; 0x1e
    381a:	af 8d       	ldd	r26, Y+31	; 0x1f
    381c:	b8 a1       	ldd	r27, Y+32	; 0x20
    381e:	28 17       	cp	r18, r24
    3820:	39 07       	cpc	r19, r25
    3822:	4a 07       	cpc	r20, r26
    3824:	5b 07       	cpc	r21, r27
    3826:	81 f4       	brne	.+32     	; 0x3848 <SevSeg_voidDoubleRangeCounter+0x44e>
    3828:	8e a1       	ldd	r24, Y+38	; 0x26
    382a:	28 2f       	mov	r18, r24
    382c:	33 27       	eor	r19, r19
    382e:	27 fd       	sbrc	r18, 7
    3830:	30 95       	com	r19
    3832:	43 2f       	mov	r20, r19
    3834:	53 2f       	mov	r21, r19
    3836:	89 a1       	ldd	r24, Y+33	; 0x21
    3838:	9a a1       	ldd	r25, Y+34	; 0x22
    383a:	ab a1       	ldd	r26, Y+35	; 0x23
    383c:	bc a1       	ldd	r27, Y+36	; 0x24
    383e:	28 17       	cp	r18, r24
    3840:	39 07       	cpc	r19, r25
    3842:	4a 07       	cpc	r20, r26
    3844:	5b 07       	cpc	r21, r27
    3846:	81 f1       	breq	.+96     	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    384a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    384c:	af 8d       	ldd	r26, Y+31	; 0x1f
    384e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	a1 09       	sbc	r26, r1
    3854:	b1 09       	sbc	r27, r1
    3856:	8d 8f       	std	Y+29, r24	; 0x1d
    3858:	9e 8f       	std	Y+30, r25	; 0x1e
    385a:	af 8f       	std	Y+31, r26	; 0x1f
    385c:	b8 a3       	std	Y+32, r27	; 0x20
    385e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3860:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3862:	af 8d       	ldd	r26, Y+31	; 0x1f
    3864:	b8 a1       	ldd	r27, Y+32	; 0x20
    3866:	bb 23       	and	r27, r27
    3868:	0c f0       	brlt	.+2      	; 0x386c <SevSeg_voidDoubleRangeCounter+0x472>
    386a:	4c cf       	rjmp	.-360    	; 0x3704 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    386c:	89 e0       	ldi	r24, 0x09	; 9
    386e:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3870:	89 a1       	ldd	r24, Y+33	; 0x21
    3872:	9a a1       	ldd	r25, Y+34	; 0x22
    3874:	ab a1       	ldd	r26, Y+35	; 0x23
    3876:	bc a1       	ldd	r27, Y+36	; 0x24
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	a1 09       	sbc	r26, r1
    387c:	b1 09       	sbc	r27, r1
    387e:	89 a3       	std	Y+33, r24	; 0x21
    3880:	9a a3       	std	Y+34, r25	; 0x22
    3882:	ab a3       	std	Y+35, r26	; 0x23
    3884:	bc a3       	std	Y+36, r27	; 0x24
    3886:	8e a1       	ldd	r24, Y+38	; 0x26
    3888:	28 2f       	mov	r18, r24
    388a:	33 27       	eor	r19, r19
    388c:	27 fd       	sbrc	r18, 7
    388e:	30 95       	com	r19
    3890:	43 2f       	mov	r20, r19
    3892:	53 2f       	mov	r21, r19
    3894:	89 a1       	ldd	r24, Y+33	; 0x21
    3896:	9a a1       	ldd	r25, Y+34	; 0x22
    3898:	ab a1       	ldd	r26, Y+35	; 0x23
    389a:	bc a1       	ldd	r27, Y+36	; 0x24
    389c:	82 17       	cp	r24, r18
    389e:	93 07       	cpc	r25, r19
    38a0:	a4 07       	cpc	r26, r20
    38a2:	b5 07       	cpc	r27, r21
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <SevSeg_voidDoubleRangeCounter+0x4ae>
    38a6:	13 cf       	rjmp	.-474    	; 0x36ce <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    38a8:	e9 96       	adiw	r28, 0x39	; 57
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	de bf       	out	0x3e, r29	; 62
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	cd bf       	out	0x3d, r28	; 61
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <SevSeg_voidBCDDisplay+0x6>
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	89 83       	std	Y+1, r24	; 0x01
    38c6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	6a 81       	ldd	r22, Y+2	; 0x02
    38cc:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
}
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	ab 97       	sbiw	r28, 0x2b	; 43
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	8a a7       	std	Y+42, r24	; 0x2a
    38f0:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    38f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    38f4:	9a e0       	ldi	r25, 0x0A	; 10
    38f6:	69 2f       	mov	r22, r25
    38f8:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    38fc:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    38fe:	8a a5       	ldd	r24, Y+42	; 0x2a
    3900:	9a e0       	ldi	r25, 0x0A	; 10
    3902:	69 2f       	mov	r22, r25
    3904:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3908:	89 2f       	mov	r24, r25
    390a:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    390c:	8b a5       	ldd	r24, Y+43	; 0x2b
    390e:	9a e0       	ldi	r25, 0x0A	; 10
    3910:	69 2f       	mov	r22, r25
    3912:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3916:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    3918:	8b a5       	ldd	r24, Y+43	; 0x2b
    391a:	9a e0       	ldi	r25, 0x0A	; 10
    391c:	69 2f       	mov	r22, r25
    391e:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3922:	89 2f       	mov	r24, r25
    3924:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    3926:	1a a2       	std	Y+34, r1	; 0x22
    3928:	1b a2       	std	Y+35, r1	; 0x23
    392a:	1c a2       	std	Y+36, r1	; 0x24
    392c:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    392e:	1e 8e       	std	Y+30, r1	; 0x1e
    3930:	1f 8e       	std	Y+31, r1	; 0x1f
    3932:	18 a2       	std	Y+32, r1	; 0x20
    3934:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    3936:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    3938:	89 a5       	ldd	r24, Y+41	; 0x29
    393a:	88 23       	and	r24, r24
    393c:	0c f4       	brge	.+2      	; 0x3940 <SevSeg_voidBCDDoubleDisplay+0x66>
    393e:	11 c2       	rjmp	.+1058   	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>
    3940:	89 a5       	ldd	r24, Y+41	; 0x29
    3942:	8a 30       	cpi	r24, 0x0A	; 10
    3944:	0c f0       	brlt	.+2      	; 0x3948 <SevSeg_voidBCDDoubleDisplay+0x6e>
    3946:	0d c2       	rjmp	.+1050   	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>
    3948:	8f a1       	ldd	r24, Y+39	; 0x27
    394a:	8a 30       	cpi	r24, 0x0A	; 10
    394c:	0c f0       	brlt	.+2      	; 0x3950 <SevSeg_voidBCDDoubleDisplay+0x76>
    394e:	09 c2       	rjmp	.+1042   	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>
    3950:	8f a1       	ldd	r24, Y+39	; 0x27
    3952:	88 23       	and	r24, r24
    3954:	0c f4       	brge	.+2      	; 0x3958 <SevSeg_voidBCDDoubleDisplay+0x7e>
    3956:	05 c2       	rjmp	.+1034   	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    3958:	9a a5       	ldd	r25, Y+42	; 0x2a
    395a:	8b a5       	ldd	r24, Y+43	; 0x2b
    395c:	98 17       	cp	r25, r24
    395e:	0c f0       	brlt	.+2      	; 0x3962 <SevSeg_voidBCDDoubleDisplay+0x88>
    3960:	02 c1       	rjmp	.+516    	; 0x3b66 <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3962:	89 a5       	ldd	r24, Y+41	; 0x29
    3964:	99 27       	eor	r25, r25
    3966:	87 fd       	sbrc	r24, 7
    3968:	90 95       	com	r25
    396a:	a9 2f       	mov	r26, r25
    396c:	b9 2f       	mov	r27, r25
    396e:	8a a3       	std	Y+34, r24	; 0x22
    3970:	9b a3       	std	Y+35, r25	; 0x23
    3972:	ac a3       	std	Y+36, r26	; 0x24
    3974:	bd a3       	std	Y+37, r27	; 0x25
    3976:	e5 c0       	rjmp	.+458    	; 0x3b42 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    3978:	8d 8d       	ldd	r24, Y+29	; 0x1d
    397a:	8f 70       	andi	r24, 0x0F	; 15
    397c:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    397e:	8a a1       	ldd	r24, Y+34	; 0x22
    3980:	9b a1       	ldd	r25, Y+35	; 0x23
    3982:	ac a1       	ldd	r26, Y+36	; 0x24
    3984:	bd a1       	ldd	r27, Y+37	; 0x25
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	aa 1f       	adc	r26, r26
    398c:	bb 1f       	adc	r27, r27
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	aa 1f       	adc	r26, r26
    3994:	bb 1f       	adc	r27, r27
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	aa 1f       	adc	r26, r26
    399c:	bb 1f       	adc	r27, r27
    399e:	88 0f       	add	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	aa 1f       	adc	r26, r26
    39a4:	bb 1f       	adc	r27, r27
    39a6:	98 2f       	mov	r25, r24
    39a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39aa:	89 2b       	or	r24, r25
    39ac:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    39ae:	88 a5       	ldd	r24, Y+40	; 0x28
    39b0:	99 27       	eor	r25, r25
    39b2:	87 fd       	sbrc	r24, 7
    39b4:	90 95       	com	r25
    39b6:	a9 2f       	mov	r26, r25
    39b8:	b9 2f       	mov	r27, r25
    39ba:	8e 8f       	std	Y+30, r24	; 0x1e
    39bc:	9f 8f       	std	Y+31, r25	; 0x1f
    39be:	a8 a3       	std	Y+32, r26	; 0x20
    39c0:	b9 a3       	std	Y+33, r27	; 0x21
    39c2:	a9 c0       	rjmp	.+338    	; 0x3b16 <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    39c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c6:	80 7f       	andi	r24, 0xF0	; 240
    39c8:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    39ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ce:	89 2b       	or	r24, r25
    39d0:	8d 8f       	std	Y+29, r24	; 0x1d
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	a0 e2       	ldi	r26, 0x20	; 32
    39d8:	b1 e4       	ldi	r27, 0x41	; 65
    39da:	89 8f       	std	Y+25, r24	; 0x19
    39dc:	9a 8f       	std	Y+26, r25	; 0x1a
    39de:	ab 8f       	std	Y+27, r26	; 0x1b
    39e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e2:	69 8d       	ldd	r22, Y+25	; 0x19
    39e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	4a e7       	ldi	r20, 0x7A	; 122
    39f0:	55 e4       	ldi	r21, 0x45	; 69
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	8d 8b       	std	Y+21, r24	; 0x15
    39fc:	9e 8b       	std	Y+22, r25	; 0x16
    39fe:	af 8b       	std	Y+23, r26	; 0x17
    3a00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a02:	6d 89       	ldd	r22, Y+21	; 0x15
    3a04:	7e 89       	ldd	r23, Y+22	; 0x16
    3a06:	8f 89       	ldd	r24, Y+23	; 0x17
    3a08:	98 8d       	ldd	r25, Y+24	; 0x18
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	40 e8       	ldi	r20, 0x80	; 128
    3a10:	5f e3       	ldi	r21, 0x3F	; 63
    3a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a16:	88 23       	and	r24, r24
    3a18:	2c f4       	brge	.+10     	; 0x3a24 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	9c 8b       	std	Y+20, r25	; 0x14
    3a20:	8b 8b       	std	Y+19, r24	; 0x13
    3a22:	3f c0       	rjmp	.+126    	; 0x3aa2 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    3a24:	6d 89       	ldd	r22, Y+21	; 0x15
    3a26:	7e 89       	ldd	r23, Y+22	; 0x16
    3a28:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	3f ef       	ldi	r19, 0xFF	; 255
    3a30:	4f e7       	ldi	r20, 0x7F	; 127
    3a32:	57 e4       	ldi	r21, 0x47	; 71
    3a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a38:	18 16       	cp	r1, r24
    3a3a:	4c f5       	brge	.+82     	; 0x3a8e <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e2       	ldi	r20, 0x20	; 32
    3a4a:	51 e4       	ldi	r21, 0x41	; 65
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	bc 01       	movw	r22, r24
    3a56:	cd 01       	movw	r24, r26
    3a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	9c 8b       	std	Y+20, r25	; 0x14
    3a62:	8b 8b       	std	Y+19, r24	; 0x13
    3a64:	0f c0       	rjmp	.+30     	; 0x3a84 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    3a66:	80 e9       	ldi	r24, 0x90	; 144
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	9a 8b       	std	Y+18, r25	; 0x12
    3a6c:	89 8b       	std	Y+17, r24	; 0x11
    3a6e:	89 89       	ldd	r24, Y+17	; 0x11
    3a70:	9a 89       	ldd	r25, Y+18	; 0x12
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <SevSeg_voidBCDDoubleDisplay+0x198>
    3a76:	9a 8b       	std	Y+18, r25	; 0x12
    3a78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	9c 8b       	std	Y+20, r25	; 0x14
    3a82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a84:	8b 89       	ldd	r24, Y+19	; 0x13
    3a86:	9c 89       	ldd	r25, Y+20	; 0x14
    3a88:	00 97       	sbiw	r24, 0x00	; 0
    3a8a:	69 f7       	brne	.-38     	; 0x3a66 <SevSeg_voidBCDDoubleDisplay+0x18c>
    3a8c:	14 c0       	rjmp	.+40     	; 0x3ab6 <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a90:	7e 89       	ldd	r23, Y+22	; 0x16
    3a92:	8f 89       	ldd	r24, Y+23	; 0x17
    3a94:	98 8d       	ldd	r25, Y+24	; 0x18
    3a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	9c 8b       	std	Y+20, r25	; 0x14
    3aa0:	8b 8b       	std	Y+19, r24	; 0x13
    3aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa6:	98 8b       	std	Y+16, r25	; 0x10
    3aa8:	8f 87       	std	Y+15, r24	; 0x0f
    3aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aac:	98 89       	ldd	r25, Y+16	; 0x10
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	f1 f7       	brne	.-4      	; 0x3aae <SevSeg_voidBCDDoubleDisplay+0x1d4>
    3ab2:	98 8b       	std	Y+16, r25	; 0x10
    3ab4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3aba:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3abe:	8e a1       	ldd	r24, Y+38	; 0x26
    3ac0:	28 2f       	mov	r18, r24
    3ac2:	33 27       	eor	r19, r19
    3ac4:	27 fd       	sbrc	r18, 7
    3ac6:	30 95       	com	r19
    3ac8:	43 2f       	mov	r20, r19
    3aca:	53 2f       	mov	r21, r19
    3acc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ace:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ad0:	a8 a1       	ldd	r26, Y+32	; 0x20
    3ad2:	b9 a1       	ldd	r27, Y+33	; 0x21
    3ad4:	28 17       	cp	r18, r24
    3ad6:	39 07       	cpc	r19, r25
    3ad8:	4a 07       	cpc	r20, r26
    3ada:	5b 07       	cpc	r21, r27
    3adc:	89 f4       	brne	.+34     	; 0x3b00 <SevSeg_voidBCDDoubleDisplay+0x226>
    3ade:	8f a1       	ldd	r24, Y+39	; 0x27
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	33 27       	eor	r19, r19
    3ae4:	27 fd       	sbrc	r18, 7
    3ae6:	30 95       	com	r19
    3ae8:	43 2f       	mov	r20, r19
    3aea:	53 2f       	mov	r21, r19
    3aec:	8a a1       	ldd	r24, Y+34	; 0x22
    3aee:	9b a1       	ldd	r25, Y+35	; 0x23
    3af0:	ac a1       	ldd	r26, Y+36	; 0x24
    3af2:	bd a1       	ldd	r27, Y+37	; 0x25
    3af4:	28 17       	cp	r18, r24
    3af6:	39 07       	cpc	r19, r25
    3af8:	4a 07       	cpc	r20, r26
    3afa:	5b 07       	cpc	r21, r27
    3afc:	09 f4       	brne	.+2      	; 0x3b00 <SevSeg_voidBCDDoubleDisplay+0x226>
    3afe:	31 c1       	rjmp	.+610    	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3b00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b04:	a8 a1       	ldd	r26, Y+32	; 0x20
    3b06:	b9 a1       	ldd	r27, Y+33	; 0x21
    3b08:	01 96       	adiw	r24, 0x01	; 1
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	b1 1d       	adc	r27, r1
    3b0e:	8e 8f       	std	Y+30, r24	; 0x1e
    3b10:	9f 8f       	std	Y+31, r25	; 0x1f
    3b12:	a8 a3       	std	Y+32, r26	; 0x20
    3b14:	b9 a3       	std	Y+33, r27	; 0x21
    3b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b1a:	a8 a1       	ldd	r26, Y+32	; 0x20
    3b1c:	b9 a1       	ldd	r27, Y+33	; 0x21
    3b1e:	8a 30       	cpi	r24, 0x0A	; 10
    3b20:	91 05       	cpc	r25, r1
    3b22:	a1 05       	cpc	r26, r1
    3b24:	b1 05       	cpc	r27, r1
    3b26:	0c f4       	brge	.+2      	; 0x3b2a <SevSeg_voidBCDDoubleDisplay+0x250>
    3b28:	4d cf       	rjmp	.-358    	; 0x39c4 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3b2a:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3b2c:	8a a1       	ldd	r24, Y+34	; 0x22
    3b2e:	9b a1       	ldd	r25, Y+35	; 0x23
    3b30:	ac a1       	ldd	r26, Y+36	; 0x24
    3b32:	bd a1       	ldd	r27, Y+37	; 0x25
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	a1 1d       	adc	r26, r1
    3b38:	b1 1d       	adc	r27, r1
    3b3a:	8a a3       	std	Y+34, r24	; 0x22
    3b3c:	9b a3       	std	Y+35, r25	; 0x23
    3b3e:	ac a3       	std	Y+36, r26	; 0x24
    3b40:	bd a3       	std	Y+37, r27	; 0x25
    3b42:	8f a1       	ldd	r24, Y+39	; 0x27
    3b44:	28 2f       	mov	r18, r24
    3b46:	33 27       	eor	r19, r19
    3b48:	27 fd       	sbrc	r18, 7
    3b4a:	30 95       	com	r19
    3b4c:	43 2f       	mov	r20, r19
    3b4e:	53 2f       	mov	r21, r19
    3b50:	8a a1       	ldd	r24, Y+34	; 0x22
    3b52:	9b a1       	ldd	r25, Y+35	; 0x23
    3b54:	ac a1       	ldd	r26, Y+36	; 0x24
    3b56:	bd a1       	ldd	r27, Y+37	; 0x25
    3b58:	28 17       	cp	r18, r24
    3b5a:	39 07       	cpc	r19, r25
    3b5c:	4a 07       	cpc	r20, r26
    3b5e:	5b 07       	cpc	r21, r27
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <SevSeg_voidBCDDoubleDisplay+0x28a>
    3b62:	0a cf       	rjmp	.-492    	; 0x3978 <SevSeg_voidBCDDoubleDisplay+0x9e>
    3b64:	fe c0       	rjmp	.+508    	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3b66:	89 a5       	ldd	r24, Y+41	; 0x29
    3b68:	99 27       	eor	r25, r25
    3b6a:	87 fd       	sbrc	r24, 7
    3b6c:	90 95       	com	r25
    3b6e:	a9 2f       	mov	r26, r25
    3b70:	b9 2f       	mov	r27, r25
    3b72:	8a a3       	std	Y+34, r24	; 0x22
    3b74:	9b a3       	std	Y+35, r25	; 0x23
    3b76:	ac a3       	std	Y+36, r26	; 0x24
    3b78:	bd a3       	std	Y+37, r27	; 0x25
    3b7a:	e2 c0       	rjmp	.+452    	; 0x3d40 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    3b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b7e:	8f 70       	andi	r24, 0x0F	; 15
    3b80:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    3b82:	8a a1       	ldd	r24, Y+34	; 0x22
    3b84:	9b a1       	ldd	r25, Y+35	; 0x23
    3b86:	ac a1       	ldd	r26, Y+36	; 0x24
    3b88:	bd a1       	ldd	r27, Y+37	; 0x25
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	aa 1f       	adc	r26, r26
    3b90:	bb 1f       	adc	r27, r27
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	aa 1f       	adc	r26, r26
    3b98:	bb 1f       	adc	r27, r27
    3b9a:	88 0f       	add	r24, r24
    3b9c:	99 1f       	adc	r25, r25
    3b9e:	aa 1f       	adc	r26, r26
    3ba0:	bb 1f       	adc	r27, r27
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	aa 1f       	adc	r26, r26
    3ba8:	bb 1f       	adc	r27, r27
    3baa:	98 2f       	mov	r25, r24
    3bac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bae:	89 2b       	or	r24, r25
    3bb0:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3bb2:	88 a5       	ldd	r24, Y+40	; 0x28
    3bb4:	99 27       	eor	r25, r25
    3bb6:	87 fd       	sbrc	r24, 7
    3bb8:	90 95       	com	r25
    3bba:	a9 2f       	mov	r26, r25
    3bbc:	b9 2f       	mov	r27, r25
    3bbe:	8e 8f       	std	Y+30, r24	; 0x1e
    3bc0:	9f 8f       	std	Y+31, r25	; 0x1f
    3bc2:	a8 a3       	std	Y+32, r26	; 0x20
    3bc4:	b9 a3       	std	Y+33, r27	; 0x21
    3bc6:	a8 c0       	rjmp	.+336    	; 0x3d18 <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    3bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bca:	80 7f       	andi	r24, 0xF0	; 240
    3bcc:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    3bce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bd2:	89 2b       	or	r24, r25
    3bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	a0 e2       	ldi	r26, 0x20	; 32
    3bdc:	b1 e4       	ldi	r27, 0x41	; 65
    3bde:	8b 87       	std	Y+11, r24	; 0x0b
    3be0:	9c 87       	std	Y+12, r25	; 0x0c
    3be2:	ad 87       	std	Y+13, r26	; 0x0d
    3be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	4a e7       	ldi	r20, 0x7A	; 122
    3bf4:	55 e4       	ldi	r21, 0x45	; 69
    3bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	8f 83       	std	Y+7, r24	; 0x07
    3c00:	98 87       	std	Y+8, r25	; 0x08
    3c02:	a9 87       	std	Y+9, r26	; 0x09
    3c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c06:	6f 81       	ldd	r22, Y+7	; 0x07
    3c08:	78 85       	ldd	r23, Y+8	; 0x08
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e8       	ldi	r20, 0x80	; 128
    3c14:	5f e3       	ldi	r21, 0x3F	; 63
    3c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1a:	88 23       	and	r24, r24
    3c1c:	2c f4       	brge	.+10     	; 0x3c28 <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	9e 83       	std	Y+6, r25	; 0x06
    3c24:	8d 83       	std	Y+5, r24	; 0x05
    3c26:	3f c0       	rjmp	.+126    	; 0x3ca6 <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	3f ef       	ldi	r19, 0xFF	; 255
    3c34:	4f e7       	ldi	r20, 0x7F	; 127
    3c36:	57 e4       	ldi	r21, 0x47	; 71
    3c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c3c:	18 16       	cp	r1, r24
    3c3e:	4c f5       	brge	.+82     	; 0x3c92 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e2       	ldi	r20, 0x20	; 32
    3c4e:	51 e4       	ldi	r21, 0x41	; 65
    3c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	9e 83       	std	Y+6, r25	; 0x06
    3c66:	8d 83       	std	Y+5, r24	; 0x05
    3c68:	0f c0       	rjmp	.+30     	; 0x3c88 <SevSeg_voidBCDDoubleDisplay+0x3ae>
    3c6a:	80 e9       	ldi	r24, 0x90	; 144
    3c6c:	91 e0       	ldi	r25, 0x01	; 1
    3c6e:	9c 83       	std	Y+4, r25	; 0x04
    3c70:	8b 83       	std	Y+3, r24	; 0x03
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <SevSeg_voidBCDDoubleDisplay+0x39c>
    3c7a:	9c 83       	std	Y+4, r25	; 0x04
    3c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	9e 83       	std	Y+6, r25	; 0x06
    3c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c88:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8c:	00 97       	sbiw	r24, 0x00	; 0
    3c8e:	69 f7       	brne	.-38     	; 0x3c6a <SevSeg_voidBCDDoubleDisplay+0x390>
    3c90:	14 c0       	rjmp	.+40     	; 0x3cba <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c92:	6f 81       	ldd	r22, Y+7	; 0x07
    3c94:	78 85       	ldd	r23, Y+8	; 0x08
    3c96:	89 85       	ldd	r24, Y+9	; 0x09
    3c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	9e 83       	std	Y+6, r25	; 0x06
    3ca4:	8d 83       	std	Y+5, r24	; 0x05
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    3caa:	9a 83       	std	Y+2, r25	; 0x02
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb2:	01 97       	sbiw	r24, 0x01	; 1
    3cb4:	f1 f7       	brne	.-4      	; 0x3cb2 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    3cb6:	9a 83       	std	Y+2, r25	; 0x02
    3cb8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    3cba:	82 e0       	ldi	r24, 0x02	; 2
    3cbc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3cbe:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3cc2:	8e a1       	ldd	r24, Y+38	; 0x26
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	33 27       	eor	r19, r19
    3cc8:	27 fd       	sbrc	r18, 7
    3cca:	30 95       	com	r19
    3ccc:	43 2f       	mov	r20, r19
    3cce:	53 2f       	mov	r21, r19
    3cd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cd2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3cd4:	a8 a1       	ldd	r26, Y+32	; 0x20
    3cd6:	b9 a1       	ldd	r27, Y+33	; 0x21
    3cd8:	28 17       	cp	r18, r24
    3cda:	39 07       	cpc	r19, r25
    3cdc:	4a 07       	cpc	r20, r26
    3cde:	5b 07       	cpc	r21, r27
    3ce0:	81 f4       	brne	.+32     	; 0x3d02 <SevSeg_voidBCDDoubleDisplay+0x428>
    3ce2:	8f a1       	ldd	r24, Y+39	; 0x27
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	33 27       	eor	r19, r19
    3ce8:	27 fd       	sbrc	r18, 7
    3cea:	30 95       	com	r19
    3cec:	43 2f       	mov	r20, r19
    3cee:	53 2f       	mov	r21, r19
    3cf0:	8a a1       	ldd	r24, Y+34	; 0x22
    3cf2:	9b a1       	ldd	r25, Y+35	; 0x23
    3cf4:	ac a1       	ldd	r26, Y+36	; 0x24
    3cf6:	bd a1       	ldd	r27, Y+37	; 0x25
    3cf8:	28 17       	cp	r18, r24
    3cfa:	39 07       	cpc	r19, r25
    3cfc:	4a 07       	cpc	r20, r26
    3cfe:	5b 07       	cpc	r21, r27
    3d00:	81 f1       	breq	.+96     	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d06:	a8 a1       	ldd	r26, Y+32	; 0x20
    3d08:	b9 a1       	ldd	r27, Y+33	; 0x21
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	a1 09       	sbc	r26, r1
    3d0e:	b1 09       	sbc	r27, r1
    3d10:	8e 8f       	std	Y+30, r24	; 0x1e
    3d12:	9f 8f       	std	Y+31, r25	; 0x1f
    3d14:	a8 a3       	std	Y+32, r26	; 0x20
    3d16:	b9 a3       	std	Y+33, r27	; 0x21
    3d18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d1c:	a8 a1       	ldd	r26, Y+32	; 0x20
    3d1e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3d20:	bb 23       	and	r27, r27
    3d22:	0c f0       	brlt	.+2      	; 0x3d26 <SevSeg_voidBCDDoubleDisplay+0x44c>
    3d24:	51 cf       	rjmp	.-350    	; 0x3bc8 <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3d26:	89 e0       	ldi	r24, 0x09	; 9
    3d28:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3d2a:	8a a1       	ldd	r24, Y+34	; 0x22
    3d2c:	9b a1       	ldd	r25, Y+35	; 0x23
    3d2e:	ac a1       	ldd	r26, Y+36	; 0x24
    3d30:	bd a1       	ldd	r27, Y+37	; 0x25
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	a1 09       	sbc	r26, r1
    3d36:	b1 09       	sbc	r27, r1
    3d38:	8a a3       	std	Y+34, r24	; 0x22
    3d3a:	9b a3       	std	Y+35, r25	; 0x23
    3d3c:	ac a3       	std	Y+36, r26	; 0x24
    3d3e:	bd a3       	std	Y+37, r27	; 0x25
    3d40:	8f a1       	ldd	r24, Y+39	; 0x27
    3d42:	28 2f       	mov	r18, r24
    3d44:	33 27       	eor	r19, r19
    3d46:	27 fd       	sbrc	r18, 7
    3d48:	30 95       	com	r19
    3d4a:	43 2f       	mov	r20, r19
    3d4c:	53 2f       	mov	r21, r19
    3d4e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d50:	9b a1       	ldd	r25, Y+35	; 0x23
    3d52:	ac a1       	ldd	r26, Y+36	; 0x24
    3d54:	bd a1       	ldd	r27, Y+37	; 0x25
    3d56:	82 17       	cp	r24, r18
    3d58:	93 07       	cpc	r25, r19
    3d5a:	a4 07       	cpc	r26, r20
    3d5c:	b5 07       	cpc	r27, r21
    3d5e:	0c f0       	brlt	.+2      	; 0x3d62 <SevSeg_voidBCDDoubleDisplay+0x488>
    3d60:	0d cf       	rjmp	.-486    	; 0x3b7c <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    3d62:	ab 96       	adiw	r28, 0x2b	; 43
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	08 95       	ret

00003d74 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    3d7c:	c1 54       	subi	r28, 0x41	; 65
    3d7e:	d0 40       	sbci	r29, 0x00	; 0
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e0 5c       	subi	r30, 0xC0	; 192
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	80 83       	st	Z, r24
    3d92:	fe 01       	movw	r30, r28
    3d94:	ef 5b       	subi	r30, 0xBF	; 191
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e0 5c       	subi	r30, 0xC0	; 192
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	80 81       	ld	r24, Z
    3da2:	9a e0       	ldi	r25, 0x0A	; 10
    3da4:	69 2f       	mov	r22, r25
    3da6:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3daa:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    3dac:	fe 01       	movw	r30, r28
    3dae:	e0 5c       	subi	r30, 0xC0	; 192
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	80 81       	ld	r24, Z
    3db4:	9a e0       	ldi	r25, 0x0A	; 10
    3db6:	69 2f       	mov	r22, r25
    3db8:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3dbc:	89 2f       	mov	r24, r25
    3dbe:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	ef 5b       	subi	r30, 0xBF	; 191
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	80 81       	ld	r24, Z
    3dc8:	9a e0       	ldi	r25, 0x0A	; 10
    3dca:	69 2f       	mov	r22, r25
    3dcc:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3dd0:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ef 5b       	subi	r30, 0xBF	; 191
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	80 81       	ld	r24, Z
    3dda:	9a e0       	ldi	r25, 0x0A	; 10
    3ddc:	69 2f       	mov	r22, r25
    3dde:	0e 94 b5 30 	call	0x616a	; 0x616a <__divmodqi4>
    3de2:	89 2f       	mov	r24, r25
    3de4:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    3de6:	18 ae       	std	Y+56, r1	; 0x38
    3de8:	19 ae       	std	Y+57, r1	; 0x39
    3dea:	1a ae       	std	Y+58, r1	; 0x3a
    3dec:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    3dee:	1c aa       	std	Y+52, r1	; 0x34
    3df0:	1d aa       	std	Y+53, r1	; 0x35
    3df2:	1e aa       	std	Y+54, r1	; 0x36
    3df4:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    3df6:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    3df8:	1f a6       	std	Y+47, r1	; 0x2f
    3dfa:	18 aa       	std	Y+48, r1	; 0x30
    3dfc:	19 aa       	std	Y+49, r1	; 0x31
    3dfe:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    3e00:	82 e3       	ldi	r24, 0x32	; 50
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	a0 e0       	ldi	r26, 0x00	; 0
    3e06:	b0 e0       	ldi	r27, 0x00	; 0
    3e08:	8b a7       	std	Y+43, r24	; 0x2b
    3e0a:	9c a7       	std	Y+44, r25	; 0x2c
    3e0c:	ad a7       	std	Y+45, r26	; 0x2d
    3e0e:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    3e10:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e12:	88 23       	and	r24, r24
    3e14:	0c f4       	brge	.+2      	; 0x3e18 <SevSeg_voidMulBCD+0xa4>
    3e16:	ad c2       	rjmp	.+1370   	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
    3e18:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e1a:	8a 30       	cpi	r24, 0x0A	; 10
    3e1c:	0c f0       	brlt	.+2      	; 0x3e20 <SevSeg_voidMulBCD+0xac>
    3e1e:	a9 c2       	rjmp	.+1362   	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
    3e20:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e22:	8a 30       	cpi	r24, 0x0A	; 10
    3e24:	0c f0       	brlt	.+2      	; 0x3e28 <SevSeg_voidMulBCD+0xb4>
    3e26:	a5 c2       	rjmp	.+1354   	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
    3e28:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e2a:	88 23       	and	r24, r24
    3e2c:	0c f4       	brge	.+2      	; 0x3e30 <SevSeg_voidMulBCD+0xbc>
    3e2e:	a1 c2       	rjmp	.+1346   	; 0x4372 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    3e30:	de 01       	movw	r26, r28
    3e32:	af 5b       	subi	r26, 0xBF	; 191
    3e34:	bf 4f       	sbci	r27, 0xFF	; 255
    3e36:	fe 01       	movw	r30, r28
    3e38:	e0 5c       	subi	r30, 0xC0	; 192
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	90 81       	ld	r25, Z
    3e3e:	8c 91       	ld	r24, X
    3e40:	98 17       	cp	r25, r24
    3e42:	0c f0       	brlt	.+2      	; 0x3e46 <SevSeg_voidMulBCD+0xd2>
    3e44:	98 c1       	rjmp	.+816    	; 0x4176 <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3e46:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e48:	99 27       	eor	r25, r25
    3e4a:	87 fd       	sbrc	r24, 7
    3e4c:	90 95       	com	r25
    3e4e:	a9 2f       	mov	r26, r25
    3e50:	b9 2f       	mov	r27, r25
    3e52:	88 af       	std	Y+56, r24	; 0x38
    3e54:	99 af       	std	Y+57, r25	; 0x39
    3e56:	aa af       	std	Y+58, r26	; 0x3a
    3e58:	bb af       	std	Y+59, r27	; 0x3b
    3e5a:	7b c1       	rjmp	.+758    	; 0x4152 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3e5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e5e:	99 27       	eor	r25, r25
    3e60:	87 fd       	sbrc	r24, 7
    3e62:	90 95       	com	r25
    3e64:	a9 2f       	mov	r26, r25
    3e66:	b9 2f       	mov	r27, r25
    3e68:	8c ab       	std	Y+52, r24	; 0x34
    3e6a:	9d ab       	std	Y+53, r25	; 0x35
    3e6c:	ae ab       	std	Y+54, r26	; 0x36
    3e6e:	bf ab       	std	Y+55, r27	; 0x37
    3e70:	5a c1       	rjmp	.+692    	; 0x4126 <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    3e72:	1f a6       	std	Y+47, r1	; 0x2f
    3e74:	18 aa       	std	Y+48, r1	; 0x30
    3e76:	19 aa       	std	Y+49, r1	; 0x31
    3e78:	1a aa       	std	Y+50, r1	; 0x32
    3e7a:	1b c1       	rjmp	.+566    	; 0x40b2 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    3e7c:	88 ad       	ldd	r24, Y+56	; 0x38
    3e7e:	99 ad       	ldd	r25, Y+57	; 0x39
    3e80:	aa ad       	ldd	r26, Y+58	; 0x3a
    3e82:	bb ad       	ldd	r27, Y+59	; 0x3b
    3e84:	fc 01       	movw	r30, r24
    3e86:	e1 56       	subi	r30, 0x61	; 97
    3e88:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8a:	90 81       	ld	r25, Z
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	69 2f       	mov	r22, r25
    3e90:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	66 e0       	ldi	r22, 0x06	; 6
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	65 e0       	ldi	r22, 0x05	; 5
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	a0 e2       	ldi	r26, 0x20	; 32
    3eae:	b1 e4       	ldi	r27, 0x41	; 65
    3eb0:	8f a3       	std	Y+39, r24	; 0x27
    3eb2:	98 a7       	std	Y+40, r25	; 0x28
    3eb4:	a9 a7       	std	Y+41, r26	; 0x29
    3eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eba:	78 a5       	ldd	r23, Y+40	; 0x28
    3ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    3ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	4a e7       	ldi	r20, 0x7A	; 122
    3ec6:	55 e4       	ldi	r21, 0x45	; 69
    3ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	8b a3       	std	Y+35, r24	; 0x23
    3ed2:	9c a3       	std	Y+36, r25	; 0x24
    3ed4:	ad a3       	std	Y+37, r26	; 0x25
    3ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    3eda:	7c a1       	ldd	r23, Y+36	; 0x24
    3edc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ede:	9e a1       	ldd	r25, Y+38	; 0x26
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e8       	ldi	r20, 0x80	; 128
    3ee6:	5f e3       	ldi	r21, 0x3F	; 63
    3ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eec:	88 23       	and	r24, r24
    3eee:	2c f4       	brge	.+10     	; 0x3efa <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9a a3       	std	Y+34, r25	; 0x22
    3ef6:	89 a3       	std	Y+33, r24	; 0x21
    3ef8:	3f c0       	rjmp	.+126    	; 0x3f78 <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    3efa:	6b a1       	ldd	r22, Y+35	; 0x23
    3efc:	7c a1       	ldd	r23, Y+36	; 0x24
    3efe:	8d a1       	ldd	r24, Y+37	; 0x25
    3f00:	9e a1       	ldd	r25, Y+38	; 0x26
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	3f ef       	ldi	r19, 0xFF	; 255
    3f06:	4f e7       	ldi	r20, 0x7F	; 127
    3f08:	57 e4       	ldi	r21, 0x47	; 71
    3f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f0e:	18 16       	cp	r1, r24
    3f10:	4c f5       	brge	.+82     	; 0x3f64 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f12:	6f a1       	ldd	r22, Y+39	; 0x27
    3f14:	78 a5       	ldd	r23, Y+40	; 0x28
    3f16:	89 a5       	ldd	r24, Y+41	; 0x29
    3f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e2       	ldi	r20, 0x20	; 32
    3f20:	51 e4       	ldi	r21, 0x41	; 65
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	9a a3       	std	Y+34, r25	; 0x22
    3f38:	89 a3       	std	Y+33, r24	; 0x21
    3f3a:	0f c0       	rjmp	.+30     	; 0x3f5a <SevSeg_voidMulBCD+0x1e6>
    3f3c:	80 e9       	ldi	r24, 0x90	; 144
    3f3e:	91 e0       	ldi	r25, 0x01	; 1
    3f40:	98 a3       	std	Y+32, r25	; 0x20
    3f42:	8f 8f       	std	Y+31, r24	; 0x1f
    3f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f46:	98 a1       	ldd	r25, Y+32	; 0x20
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	f1 f7       	brne	.-4      	; 0x3f48 <SevSeg_voidMulBCD+0x1d4>
    3f4c:	98 a3       	std	Y+32, r25	; 0x20
    3f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f50:	89 a1       	ldd	r24, Y+33	; 0x21
    3f52:	9a a1       	ldd	r25, Y+34	; 0x22
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	9a a3       	std	Y+34, r25	; 0x22
    3f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	69 f7       	brne	.-38     	; 0x3f3c <SevSeg_voidMulBCD+0x1c8>
    3f62:	14 c0       	rjmp	.+40     	; 0x3f8c <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	6b a1       	ldd	r22, Y+35	; 0x23
    3f66:	7c a1       	ldd	r23, Y+36	; 0x24
    3f68:	8d a1       	ldd	r24, Y+37	; 0x25
    3f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	9a a3       	std	Y+34, r25	; 0x22
    3f76:	89 a3       	std	Y+33, r24	; 0x21
    3f78:	89 a1       	ldd	r24, Y+33	; 0x21
    3f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    3f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	f1 f7       	brne	.-4      	; 0x3f84 <SevSeg_voidMulBCD+0x210>
    3f88:	9e 8f       	std	Y+30, r25	; 0x1e
    3f8a:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    3f8c:	8c a9       	ldd	r24, Y+52	; 0x34
    3f8e:	9d a9       	ldd	r25, Y+53	; 0x35
    3f90:	ae a9       	ldd	r26, Y+54	; 0x36
    3f92:	bf a9       	ldd	r27, Y+55	; 0x37
    3f94:	fc 01       	movw	r30, r24
    3f96:	e1 56       	subi	r30, 0x61	; 97
    3f98:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9a:	90 81       	ld	r25, Z
    3f9c:	82 e0       	ldi	r24, 0x02	; 2
    3f9e:	69 2f       	mov	r22, r25
    3fa0:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	66 e0       	ldi	r22, 0x06	; 6
    3fa8:	41 e0       	ldi	r20, 0x01	; 1
    3faa:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    3fae:	82 e0       	ldi	r24, 0x02	; 2
    3fb0:	65 e0       	ldi	r22, 0x05	; 5
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	a0 e2       	ldi	r26, 0x20	; 32
    3fbe:	b1 e4       	ldi	r27, 0x41	; 65
    3fc0:	89 8f       	std	Y+25, r24	; 0x19
    3fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    3fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    3fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    3fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	4a e7       	ldi	r20, 0x7A	; 122
    3fd6:	55 e4       	ldi	r21, 0x45	; 69
    3fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	8d 8b       	std	Y+21, r24	; 0x15
    3fe2:	9e 8b       	std	Y+22, r25	; 0x16
    3fe4:	af 8b       	std	Y+23, r26	; 0x17
    3fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    3fea:	7e 89       	ldd	r23, Y+22	; 0x16
    3fec:	8f 89       	ldd	r24, Y+23	; 0x17
    3fee:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e8       	ldi	r20, 0x80	; 128
    3ff6:	5f e3       	ldi	r21, 0x3F	; 63
    3ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	2c f4       	brge	.+10     	; 0x400a <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9c 8b       	std	Y+20, r25	; 0x14
    4006:	8b 8b       	std	Y+19, r24	; 0x13
    4008:	3f c0       	rjmp	.+126    	; 0x4088 <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    400a:	6d 89       	ldd	r22, Y+21	; 0x15
    400c:	7e 89       	ldd	r23, Y+22	; 0x16
    400e:	8f 89       	ldd	r24, Y+23	; 0x17
    4010:	98 8d       	ldd	r25, Y+24	; 0x18
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	3f ef       	ldi	r19, 0xFF	; 255
    4016:	4f e7       	ldi	r20, 0x7F	; 127
    4018:	57 e4       	ldi	r21, 0x47	; 71
    401a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401e:	18 16       	cp	r1, r24
    4020:	4c f5       	brge	.+82     	; 0x4074 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4022:	69 8d       	ldd	r22, Y+25	; 0x19
    4024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e2       	ldi	r20, 0x20	; 32
    4030:	51 e4       	ldi	r21, 0x41	; 65
    4032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	9c 8b       	std	Y+20, r25	; 0x14
    4048:	8b 8b       	std	Y+19, r24	; 0x13
    404a:	0f c0       	rjmp	.+30     	; 0x406a <SevSeg_voidMulBCD+0x2f6>
    404c:	80 e9       	ldi	r24, 0x90	; 144
    404e:	91 e0       	ldi	r25, 0x01	; 1
    4050:	9a 8b       	std	Y+18, r25	; 0x12
    4052:	89 8b       	std	Y+17, r24	; 0x11
    4054:	89 89       	ldd	r24, Y+17	; 0x11
    4056:	9a 89       	ldd	r25, Y+18	; 0x12
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <SevSeg_voidMulBCD+0x2e4>
    405c:	9a 8b       	std	Y+18, r25	; 0x12
    405e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4060:	8b 89       	ldd	r24, Y+19	; 0x13
    4062:	9c 89       	ldd	r25, Y+20	; 0x14
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	9c 8b       	std	Y+20, r25	; 0x14
    4068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406a:	8b 89       	ldd	r24, Y+19	; 0x13
    406c:	9c 89       	ldd	r25, Y+20	; 0x14
    406e:	00 97       	sbiw	r24, 0x00	; 0
    4070:	69 f7       	brne	.-38     	; 0x404c <SevSeg_voidMulBCD+0x2d8>
    4072:	14 c0       	rjmp	.+40     	; 0x409c <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4074:	6d 89       	ldd	r22, Y+21	; 0x15
    4076:	7e 89       	ldd	r23, Y+22	; 0x16
    4078:	8f 89       	ldd	r24, Y+23	; 0x17
    407a:	98 8d       	ldd	r25, Y+24	; 0x18
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9c 8b       	std	Y+20, r25	; 0x14
    4086:	8b 8b       	std	Y+19, r24	; 0x13
    4088:	8b 89       	ldd	r24, Y+19	; 0x13
    408a:	9c 89       	ldd	r25, Y+20	; 0x14
    408c:	98 8b       	std	Y+16, r25	; 0x10
    408e:	8f 87       	std	Y+15, r24	; 0x0f
    4090:	8f 85       	ldd	r24, Y+15	; 0x0f
    4092:	98 89       	ldd	r25, Y+16	; 0x10
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <SevSeg_voidMulBCD+0x320>
    4098:	98 8b       	std	Y+16, r25	; 0x10
    409a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    409c:	8f a5       	ldd	r24, Y+47	; 0x2f
    409e:	98 a9       	ldd	r25, Y+48	; 0x30
    40a0:	a9 a9       	ldd	r26, Y+49	; 0x31
    40a2:	ba a9       	ldd	r27, Y+50	; 0x32
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	a1 1d       	adc	r26, r1
    40a8:	b1 1d       	adc	r27, r1
    40aa:	8f a7       	std	Y+47, r24	; 0x2f
    40ac:	98 ab       	std	Y+48, r25	; 0x30
    40ae:	a9 ab       	std	Y+49, r26	; 0x31
    40b0:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    40b2:	2f a5       	ldd	r18, Y+47	; 0x2f
    40b4:	38 a9       	ldd	r19, Y+48	; 0x30
    40b6:	49 a9       	ldd	r20, Y+49	; 0x31
    40b8:	5a a9       	ldd	r21, Y+50	; 0x32
    40ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    40bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    40be:	ad a5       	ldd	r26, Y+45	; 0x2d
    40c0:	be a5       	ldd	r27, Y+46	; 0x2e
    40c2:	28 17       	cp	r18, r24
    40c4:	39 07       	cpc	r19, r25
    40c6:	4a 07       	cpc	r20, r26
    40c8:	5b 07       	cpc	r21, r27
    40ca:	08 f4       	brcc	.+2      	; 0x40ce <SevSeg_voidMulBCD+0x35a>
    40cc:	d7 ce       	rjmp	.-594    	; 0x3e7c <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    40ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    40d0:	28 2f       	mov	r18, r24
    40d2:	33 27       	eor	r19, r19
    40d4:	27 fd       	sbrc	r18, 7
    40d6:	30 95       	com	r19
    40d8:	43 2f       	mov	r20, r19
    40da:	53 2f       	mov	r21, r19
    40dc:	8c a9       	ldd	r24, Y+52	; 0x34
    40de:	9d a9       	ldd	r25, Y+53	; 0x35
    40e0:	ae a9       	ldd	r26, Y+54	; 0x36
    40e2:	bf a9       	ldd	r27, Y+55	; 0x37
    40e4:	28 17       	cp	r18, r24
    40e6:	39 07       	cpc	r19, r25
    40e8:	4a 07       	cpc	r20, r26
    40ea:	5b 07       	cpc	r21, r27
    40ec:	89 f4       	brne	.+34     	; 0x4110 <SevSeg_voidMulBCD+0x39c>
    40ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    40f0:	28 2f       	mov	r18, r24
    40f2:	33 27       	eor	r19, r19
    40f4:	27 fd       	sbrc	r18, 7
    40f6:	30 95       	com	r19
    40f8:	43 2f       	mov	r20, r19
    40fa:	53 2f       	mov	r21, r19
    40fc:	88 ad       	ldd	r24, Y+56	; 0x38
    40fe:	99 ad       	ldd	r25, Y+57	; 0x39
    4100:	aa ad       	ldd	r26, Y+58	; 0x3a
    4102:	bb ad       	ldd	r27, Y+59	; 0x3b
    4104:	28 17       	cp	r18, r24
    4106:	39 07       	cpc	r19, r25
    4108:	4a 07       	cpc	r20, r26
    410a:	5b 07       	cpc	r21, r27
    410c:	09 f4       	brne	.+2      	; 0x4110 <SevSeg_voidMulBCD+0x39c>
    410e:	31 c1       	rjmp	.+610    	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4110:	8c a9       	ldd	r24, Y+52	; 0x34
    4112:	9d a9       	ldd	r25, Y+53	; 0x35
    4114:	ae a9       	ldd	r26, Y+54	; 0x36
    4116:	bf a9       	ldd	r27, Y+55	; 0x37
    4118:	01 96       	adiw	r24, 0x01	; 1
    411a:	a1 1d       	adc	r26, r1
    411c:	b1 1d       	adc	r27, r1
    411e:	8c ab       	std	Y+52, r24	; 0x34
    4120:	9d ab       	std	Y+53, r25	; 0x35
    4122:	ae ab       	std	Y+54, r26	; 0x36
    4124:	bf ab       	std	Y+55, r27	; 0x37
    4126:	8c a9       	ldd	r24, Y+52	; 0x34
    4128:	9d a9       	ldd	r25, Y+53	; 0x35
    412a:	ae a9       	ldd	r26, Y+54	; 0x36
    412c:	bf a9       	ldd	r27, Y+55	; 0x37
    412e:	8a 30       	cpi	r24, 0x0A	; 10
    4130:	91 05       	cpc	r25, r1
    4132:	a1 05       	cpc	r26, r1
    4134:	b1 05       	cpc	r27, r1
    4136:	0c f4       	brge	.+2      	; 0x413a <SevSeg_voidMulBCD+0x3c6>
    4138:	9c ce       	rjmp	.-712    	; 0x3e72 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    413a:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    413c:	88 ad       	ldd	r24, Y+56	; 0x38
    413e:	99 ad       	ldd	r25, Y+57	; 0x39
    4140:	aa ad       	ldd	r26, Y+58	; 0x3a
    4142:	bb ad       	ldd	r27, Y+59	; 0x3b
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	a1 1d       	adc	r26, r1
    4148:	b1 1d       	adc	r27, r1
    414a:	88 af       	std	Y+56, r24	; 0x38
    414c:	99 af       	std	Y+57, r25	; 0x39
    414e:	aa af       	std	Y+58, r26	; 0x3a
    4150:	bb af       	std	Y+59, r27	; 0x3b
    4152:	8d ad       	ldd	r24, Y+61	; 0x3d
    4154:	28 2f       	mov	r18, r24
    4156:	33 27       	eor	r19, r19
    4158:	27 fd       	sbrc	r18, 7
    415a:	30 95       	com	r19
    415c:	43 2f       	mov	r20, r19
    415e:	53 2f       	mov	r21, r19
    4160:	88 ad       	ldd	r24, Y+56	; 0x38
    4162:	99 ad       	ldd	r25, Y+57	; 0x39
    4164:	aa ad       	ldd	r26, Y+58	; 0x3a
    4166:	bb ad       	ldd	r27, Y+59	; 0x3b
    4168:	28 17       	cp	r18, r24
    416a:	39 07       	cpc	r19, r25
    416c:	4a 07       	cpc	r20, r26
    416e:	5b 07       	cpc	r21, r27
    4170:	0c f0       	brlt	.+2      	; 0x4174 <SevSeg_voidMulBCD+0x400>
    4172:	74 ce       	rjmp	.-792    	; 0x3e5c <SevSeg_voidMulBCD+0xe8>
    4174:	fe c0       	rjmp	.+508    	; 0x4372 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    4176:	8f ad       	ldd	r24, Y+63	; 0x3f
    4178:	99 27       	eor	r25, r25
    417a:	87 fd       	sbrc	r24, 7
    417c:	90 95       	com	r25
    417e:	a9 2f       	mov	r26, r25
    4180:	b9 2f       	mov	r27, r25
    4182:	88 af       	std	Y+56, r24	; 0x38
    4184:	99 af       	std	Y+57, r25	; 0x39
    4186:	aa af       	std	Y+58, r26	; 0x3a
    4188:	bb af       	std	Y+59, r27	; 0x3b
    418a:	e2 c0       	rjmp	.+452    	; 0x4350 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    418c:	8b a9       	ldd	r24, Y+51	; 0x33
    418e:	8f 70       	andi	r24, 0x0F	; 15
    4190:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    4192:	88 ad       	ldd	r24, Y+56	; 0x38
    4194:	99 ad       	ldd	r25, Y+57	; 0x39
    4196:	aa ad       	ldd	r26, Y+58	; 0x3a
    4198:	bb ad       	ldd	r27, Y+59	; 0x3b
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	aa 1f       	adc	r26, r26
    41a0:	bb 1f       	adc	r27, r27
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	aa 1f       	adc	r26, r26
    41a8:	bb 1f       	adc	r27, r27
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	aa 1f       	adc	r26, r26
    41b0:	bb 1f       	adc	r27, r27
    41b2:	88 0f       	add	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	aa 1f       	adc	r26, r26
    41b8:	bb 1f       	adc	r27, r27
    41ba:	98 2f       	mov	r25, r24
    41bc:	8b a9       	ldd	r24, Y+51	; 0x33
    41be:	89 2b       	or	r24, r25
    41c0:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    41c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    41c4:	99 27       	eor	r25, r25
    41c6:	87 fd       	sbrc	r24, 7
    41c8:	90 95       	com	r25
    41ca:	a9 2f       	mov	r26, r25
    41cc:	b9 2f       	mov	r27, r25
    41ce:	8c ab       	std	Y+52, r24	; 0x34
    41d0:	9d ab       	std	Y+53, r25	; 0x35
    41d2:	ae ab       	std	Y+54, r26	; 0x36
    41d4:	bf ab       	std	Y+55, r27	; 0x37
    41d6:	a8 c0       	rjmp	.+336    	; 0x4328 <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    41d8:	8b a9       	ldd	r24, Y+51	; 0x33
    41da:	80 7f       	andi	r24, 0xF0	; 240
    41dc:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    41de:	9c a9       	ldd	r25, Y+52	; 0x34
    41e0:	8b a9       	ldd	r24, Y+51	; 0x33
    41e2:	89 2b       	or	r24, r25
    41e4:	8b ab       	std	Y+51, r24	; 0x33
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	a0 e2       	ldi	r26, 0x20	; 32
    41ec:	b1 e4       	ldi	r27, 0x41	; 65
    41ee:	8b 87       	std	Y+11, r24	; 0x0b
    41f0:	9c 87       	std	Y+12, r25	; 0x0c
    41f2:	ad 87       	std	Y+13, r26	; 0x0d
    41f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	4a e7       	ldi	r20, 0x7A	; 122
    4204:	55 e4       	ldi	r21, 0x45	; 69
    4206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	8f 83       	std	Y+7, r24	; 0x07
    4210:	98 87       	std	Y+8, r25	; 0x08
    4212:	a9 87       	std	Y+9, r26	; 0x09
    4214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4216:	6f 81       	ldd	r22, Y+7	; 0x07
    4218:	78 85       	ldd	r23, Y+8	; 0x08
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	9a 85       	ldd	r25, Y+10	; 0x0a
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e8       	ldi	r20, 0x80	; 128
    4224:	5f e3       	ldi	r21, 0x3F	; 63
    4226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    422a:	88 23       	and	r24, r24
    422c:	2c f4       	brge	.+10     	; 0x4238 <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	9e 83       	std	Y+6, r25	; 0x06
    4234:	8d 83       	std	Y+5, r24	; 0x05
    4236:	3f c0       	rjmp	.+126    	; 0x42b6 <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    4238:	6f 81       	ldd	r22, Y+7	; 0x07
    423a:	78 85       	ldd	r23, Y+8	; 0x08
    423c:	89 85       	ldd	r24, Y+9	; 0x09
    423e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	3f ef       	ldi	r19, 0xFF	; 255
    4244:	4f e7       	ldi	r20, 0x7F	; 127
    4246:	57 e4       	ldi	r21, 0x47	; 71
    4248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424c:	18 16       	cp	r1, r24
    424e:	4c f5       	brge	.+82     	; 0x42a2 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4250:	6b 85       	ldd	r22, Y+11	; 0x0b
    4252:	7c 85       	ldd	r23, Y+12	; 0x0c
    4254:	8d 85       	ldd	r24, Y+13	; 0x0d
    4256:	9e 85       	ldd	r25, Y+14	; 0x0e
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	51 e4       	ldi	r21, 0x41	; 65
    4260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9e 83       	std	Y+6, r25	; 0x06
    4276:	8d 83       	std	Y+5, r24	; 0x05
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <SevSeg_voidMulBCD+0x524>
    427a:	80 e9       	ldi	r24, 0x90	; 144
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
    4282:	8b 81       	ldd	r24, Y+3	; 0x03
    4284:	9c 81       	ldd	r25, Y+4	; 0x04
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <SevSeg_voidMulBCD+0x512>
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	9e 81       	ldd	r25, Y+6	; 0x06
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	69 f7       	brne	.-38     	; 0x427a <SevSeg_voidMulBCD+0x506>
    42a0:	14 c0       	rjmp	.+40     	; 0x42ca <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a2:	6f 81       	ldd	r22, Y+7	; 0x07
    42a4:	78 85       	ldd	r23, Y+8	; 0x08
    42a6:	89 85       	ldd	r24, Y+9	; 0x09
    42a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	9e 83       	std	Y+6, r25	; 0x06
    42b4:	8d 83       	std	Y+5, r24	; 0x05
    42b6:	8d 81       	ldd	r24, Y+5	; 0x05
    42b8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <SevSeg_voidMulBCD+0x54e>
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    42ca:	82 e0       	ldi	r24, 0x02	; 2
    42cc:	6b a9       	ldd	r22, Y+51	; 0x33
    42ce:	0e 94 9d 13 	call	0x273a	; 0x273a <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    42d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    42d4:	28 2f       	mov	r18, r24
    42d6:	33 27       	eor	r19, r19
    42d8:	27 fd       	sbrc	r18, 7
    42da:	30 95       	com	r19
    42dc:	43 2f       	mov	r20, r19
    42de:	53 2f       	mov	r21, r19
    42e0:	8c a9       	ldd	r24, Y+52	; 0x34
    42e2:	9d a9       	ldd	r25, Y+53	; 0x35
    42e4:	ae a9       	ldd	r26, Y+54	; 0x36
    42e6:	bf a9       	ldd	r27, Y+55	; 0x37
    42e8:	28 17       	cp	r18, r24
    42ea:	39 07       	cpc	r19, r25
    42ec:	4a 07       	cpc	r20, r26
    42ee:	5b 07       	cpc	r21, r27
    42f0:	81 f4       	brne	.+32     	; 0x4312 <SevSeg_voidMulBCD+0x59e>
    42f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42f4:	28 2f       	mov	r18, r24
    42f6:	33 27       	eor	r19, r19
    42f8:	27 fd       	sbrc	r18, 7
    42fa:	30 95       	com	r19
    42fc:	43 2f       	mov	r20, r19
    42fe:	53 2f       	mov	r21, r19
    4300:	88 ad       	ldd	r24, Y+56	; 0x38
    4302:	99 ad       	ldd	r25, Y+57	; 0x39
    4304:	aa ad       	ldd	r26, Y+58	; 0x3a
    4306:	bb ad       	ldd	r27, Y+59	; 0x3b
    4308:	28 17       	cp	r18, r24
    430a:	39 07       	cpc	r19, r25
    430c:	4a 07       	cpc	r20, r26
    430e:	5b 07       	cpc	r21, r27
    4310:	81 f1       	breq	.+96     	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    4312:	8c a9       	ldd	r24, Y+52	; 0x34
    4314:	9d a9       	ldd	r25, Y+53	; 0x35
    4316:	ae a9       	ldd	r26, Y+54	; 0x36
    4318:	bf a9       	ldd	r27, Y+55	; 0x37
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	a1 09       	sbc	r26, r1
    431e:	b1 09       	sbc	r27, r1
    4320:	8c ab       	std	Y+52, r24	; 0x34
    4322:	9d ab       	std	Y+53, r25	; 0x35
    4324:	ae ab       	std	Y+54, r26	; 0x36
    4326:	bf ab       	std	Y+55, r27	; 0x37
    4328:	8c a9       	ldd	r24, Y+52	; 0x34
    432a:	9d a9       	ldd	r25, Y+53	; 0x35
    432c:	ae a9       	ldd	r26, Y+54	; 0x36
    432e:	bf a9       	ldd	r27, Y+55	; 0x37
    4330:	bb 23       	and	r27, r27
    4332:	0c f0       	brlt	.+2      	; 0x4336 <SevSeg_voidMulBCD+0x5c2>
    4334:	51 cf       	rjmp	.-350    	; 0x41d8 <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    4336:	89 e0       	ldi	r24, 0x09	; 9
    4338:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    433a:	88 ad       	ldd	r24, Y+56	; 0x38
    433c:	99 ad       	ldd	r25, Y+57	; 0x39
    433e:	aa ad       	ldd	r26, Y+58	; 0x3a
    4340:	bb ad       	ldd	r27, Y+59	; 0x3b
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	a1 09       	sbc	r26, r1
    4346:	b1 09       	sbc	r27, r1
    4348:	88 af       	std	Y+56, r24	; 0x38
    434a:	99 af       	std	Y+57, r25	; 0x39
    434c:	aa af       	std	Y+58, r26	; 0x3a
    434e:	bb af       	std	Y+59, r27	; 0x3b
    4350:	8d ad       	ldd	r24, Y+61	; 0x3d
    4352:	28 2f       	mov	r18, r24
    4354:	33 27       	eor	r19, r19
    4356:	27 fd       	sbrc	r18, 7
    4358:	30 95       	com	r19
    435a:	43 2f       	mov	r20, r19
    435c:	53 2f       	mov	r21, r19
    435e:	88 ad       	ldd	r24, Y+56	; 0x38
    4360:	99 ad       	ldd	r25, Y+57	; 0x39
    4362:	aa ad       	ldd	r26, Y+58	; 0x3a
    4364:	bb ad       	ldd	r27, Y+59	; 0x3b
    4366:	82 17       	cp	r24, r18
    4368:	93 07       	cpc	r25, r19
    436a:	a4 07       	cpc	r26, r20
    436c:	b5 07       	cpc	r27, r21
    436e:	0c f0       	brlt	.+2      	; 0x4372 <SevSeg_voidMulBCD+0x5fe>
    4370:	0d cf       	rjmp	.-486    	; 0x418c <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    4372:	cf 5b       	subi	r28, 0xBF	; 191
    4374:	df 4f       	sbci	r29, 0xFF	; 255
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	de bf       	out	0x3e, r29	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	cd bf       	out	0x3d, r28	; 61
    4380:	cf 91       	pop	r28
    4382:	df 91       	pop	r29
    4384:	08 95       	ret

00004386 <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    4392:	cc 58       	subi	r28, 0x8C	; 140
    4394:	d0 40       	sbci	r29, 0x00	; 0
    4396:	0f b6       	in	r0, 0x3f	; 63
    4398:	f8 94       	cli
    439a:	de bf       	out	0x3e, r29	; 62
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	fe 01       	movw	r30, r28
    43a2:	e7 57       	subi	r30, 0x77	; 119
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	ac e0       	ldi	r26, 0x0C	; 12
    43ac:	b2 e4       	ldi	r27, 0x42	; 66
    43ae:	80 83       	st	Z, r24
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	a2 83       	std	Z+2, r26	; 0x02
    43b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b6:	8e 01       	movw	r16, r28
    43b8:	0b 57       	subi	r16, 0x7B	; 123
    43ba:	1f 4f       	sbci	r17, 0xFF	; 255
    43bc:	fe 01       	movw	r30, r28
    43be:	e7 57       	subi	r30, 0x77	; 119
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	60 81       	ld	r22, Z
    43c4:	71 81       	ldd	r23, Z+1	; 0x01
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	93 81       	ldd	r25, Z+3	; 0x03
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	4a e7       	ldi	r20, 0x7A	; 122
    43d0:	55 e4       	ldi	r21, 0x45	; 69
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	f8 01       	movw	r30, r16
    43dc:	80 83       	st	Z, r24
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	a2 83       	std	Z+2, r26	; 0x02
    43e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43e4:	fe 01       	movw	r30, r28
    43e6:	eb 57       	subi	r30, 0x7B	; 123
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	40 e8       	ldi	r20, 0x80	; 128
    43f8:	5f e3       	ldi	r21, 0x3F	; 63
    43fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43fe:	88 23       	and	r24, r24
    4400:	44 f4       	brge	.+16     	; 0x4412 <LCD_voidInit+0x8c>
		__ticks = 1;
    4402:	fe 01       	movw	r30, r28
    4404:	ed 57       	subi	r30, 0x7D	; 125
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	91 83       	std	Z+1, r25	; 0x01
    440e:	80 83       	st	Z, r24
    4410:	64 c0       	rjmp	.+200    	; 0x44da <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    4412:	fe 01       	movw	r30, r28
    4414:	eb 57       	subi	r30, 0x7B	; 123
    4416:	ff 4f       	sbci	r31, 0xFF	; 255
    4418:	60 81       	ld	r22, Z
    441a:	71 81       	ldd	r23, Z+1	; 0x01
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	93 81       	ldd	r25, Z+3	; 0x03
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	3f ef       	ldi	r19, 0xFF	; 255
    4424:	4f e7       	ldi	r20, 0x7F	; 127
    4426:	57 e4       	ldi	r21, 0x47	; 71
    4428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    442c:	18 16       	cp	r1, r24
    442e:	0c f0       	brlt	.+2      	; 0x4432 <LCD_voidInit+0xac>
    4430:	43 c0       	rjmp	.+134    	; 0x44b8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4432:	fe 01       	movw	r30, r28
    4434:	e7 57       	subi	r30, 0x77	; 119
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	60 81       	ld	r22, Z
    443a:	71 81       	ldd	r23, Z+1	; 0x01
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e2       	ldi	r20, 0x20	; 32
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	8e 01       	movw	r16, r28
    4452:	0d 57       	subi	r16, 0x7D	; 125
    4454:	1f 4f       	sbci	r17, 0xFF	; 255
    4456:	bc 01       	movw	r22, r24
    4458:	cd 01       	movw	r24, r26
    445a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	f8 01       	movw	r30, r16
    4464:	91 83       	std	Z+1, r25	; 0x01
    4466:	80 83       	st	Z, r24
    4468:	1f c0       	rjmp	.+62     	; 0x44a8 <LCD_voidInit+0x122>
    446a:	fe 01       	movw	r30, r28
    446c:	ef 57       	subi	r30, 0x7F	; 127
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	80 e9       	ldi	r24, 0x90	; 144
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	91 83       	std	Z+1, r25	; 0x01
    4476:	80 83       	st	Z, r24
    4478:	fe 01       	movw	r30, r28
    447a:	ef 57       	subi	r30, 0x7F	; 127
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	91 81       	ldd	r25, Z+1	; 0x01
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <LCD_voidInit+0xfc>
    4486:	fe 01       	movw	r30, r28
    4488:	ef 57       	subi	r30, 0x7F	; 127
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4490:	de 01       	movw	r26, r28
    4492:	ad 57       	subi	r26, 0x7D	; 125
    4494:	bf 4f       	sbci	r27, 0xFF	; 255
    4496:	fe 01       	movw	r30, r28
    4498:	ed 57       	subi	r30, 0x7D	; 125
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	9c 93       	st	X, r25
    44a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a8:	fe 01       	movw	r30, r28
    44aa:	ed 57       	subi	r30, 0x7D	; 125
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	91 81       	ldd	r25, Z+1	; 0x01
    44b2:	00 97       	sbiw	r24, 0x00	; 0
    44b4:	d1 f6       	brne	.-76     	; 0x446a <LCD_voidInit+0xe4>
    44b6:	27 c0       	rjmp	.+78     	; 0x4506 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b8:	8e 01       	movw	r16, r28
    44ba:	0d 57       	subi	r16, 0x7D	; 125
    44bc:	1f 4f       	sbci	r17, 0xFF	; 255
    44be:	fe 01       	movw	r30, r28
    44c0:	eb 57       	subi	r30, 0x7B	; 123
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	60 81       	ld	r22, Z
    44c6:	71 81       	ldd	r23, Z+1	; 0x01
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	93 81       	ldd	r25, Z+3	; 0x03
    44cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	f8 01       	movw	r30, r16
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	80 83       	st	Z, r24
    44da:	de 01       	movw	r26, r28
    44dc:	a1 58       	subi	r26, 0x81	; 129
    44de:	bf 4f       	sbci	r27, 0xFF	; 255
    44e0:	fe 01       	movw	r30, r28
    44e2:	ed 57       	subi	r30, 0x7D	; 125
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	80 81       	ld	r24, Z
    44e8:	91 81       	ldd	r25, Z+1	; 0x01
    44ea:	8d 93       	st	X+, r24
    44ec:	9c 93       	st	X, r25
    44ee:	fe 01       	movw	r30, r28
    44f0:	e1 58       	subi	r30, 0x81	; 129
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <LCD_voidInit+0x172>
    44fc:	fe 01       	movw	r30, r28
    44fe:	e1 58       	subi	r30, 0x81	; 129
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	91 83       	std	Z+1, r25	; 0x01
    4504:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    4506:	80 e3       	ldi	r24, 0x30	; 48
    4508:	0e 94 b3 28 	call	0x5166	; 0x5166 <LCD_voidSendInitCommand>
    450c:	fe 01       	movw	r30, r28
    450e:	e5 58       	subi	r30, 0x85	; 133
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	a0 ea       	ldi	r26, 0xA0	; 160
    4518:	b0 e4       	ldi	r27, 0x40	; 64
    451a:	80 83       	st	Z, r24
    451c:	91 83       	std	Z+1, r25	; 0x01
    451e:	a2 83       	std	Z+2, r26	; 0x02
    4520:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4522:	8e 01       	movw	r16, r28
    4524:	09 58       	subi	r16, 0x89	; 137
    4526:	1f 4f       	sbci	r17, 0xFF	; 255
    4528:	fe 01       	movw	r30, r28
    452a:	e5 58       	subi	r30, 0x85	; 133
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	4a e7       	ldi	r20, 0x7A	; 122
    453c:	55 e4       	ldi	r21, 0x45	; 69
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	f8 01       	movw	r30, r16
    4548:	80 83       	st	Z, r24
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	a2 83       	std	Z+2, r26	; 0x02
    454e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4550:	fe 01       	movw	r30, r28
    4552:	e9 58       	subi	r30, 0x89	; 137
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	60 81       	ld	r22, Z
    4558:	71 81       	ldd	r23, Z+1	; 0x01
    455a:	82 81       	ldd	r24, Z+2	; 0x02
    455c:	93 81       	ldd	r25, Z+3	; 0x03
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    456a:	88 23       	and	r24, r24
    456c:	44 f4       	brge	.+16     	; 0x457e <LCD_voidInit+0x1f8>
		__ticks = 1;
    456e:	fe 01       	movw	r30, r28
    4570:	eb 58       	subi	r30, 0x8B	; 139
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	80 83       	st	Z, r24
    457c:	64 c0       	rjmp	.+200    	; 0x4646 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    457e:	fe 01       	movw	r30, r28
    4580:	e9 58       	subi	r30, 0x89	; 137
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	4f e7       	ldi	r20, 0x7F	; 127
    4592:	57 e4       	ldi	r21, 0x47	; 71
    4594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4598:	18 16       	cp	r1, r24
    459a:	0c f0       	brlt	.+2      	; 0x459e <LCD_voidInit+0x218>
    459c:	43 c0       	rjmp	.+134    	; 0x4624 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459e:	fe 01       	movw	r30, r28
    45a0:	e5 58       	subi	r30, 0x85	; 133
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	60 81       	ld	r22, Z
    45a6:	71 81       	ldd	r23, Z+1	; 0x01
    45a8:	82 81       	ldd	r24, Z+2	; 0x02
    45aa:	93 81       	ldd	r25, Z+3	; 0x03
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	40 e2       	ldi	r20, 0x20	; 32
    45b2:	51 e4       	ldi	r21, 0x41	; 65
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	8e 01       	movw	r16, r28
    45be:	0b 58       	subi	r16, 0x8B	; 139
    45c0:	1f 4f       	sbci	r17, 0xFF	; 255
    45c2:	bc 01       	movw	r22, r24
    45c4:	cd 01       	movw	r24, r26
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	f8 01       	movw	r30, r16
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	1f c0       	rjmp	.+62     	; 0x4614 <LCD_voidInit+0x28e>
    45d6:	fe 01       	movw	r30, r28
    45d8:	ed 58       	subi	r30, 0x8D	; 141
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	80 e9       	ldi	r24, 0x90	; 144
    45de:	91 e0       	ldi	r25, 0x01	; 1
    45e0:	91 83       	std	Z+1, r25	; 0x01
    45e2:	80 83       	st	Z, r24
    45e4:	fe 01       	movw	r30, r28
    45e6:	ed 58       	subi	r30, 0x8D	; 141
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	91 81       	ldd	r25, Z+1	; 0x01
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <LCD_voidInit+0x268>
    45f2:	fe 01       	movw	r30, r28
    45f4:	ed 58       	subi	r30, 0x8D	; 141
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fc:	de 01       	movw	r26, r28
    45fe:	ab 58       	subi	r26, 0x8B	; 139
    4600:	bf 4f       	sbci	r27, 0xFF	; 255
    4602:	fe 01       	movw	r30, r28
    4604:	eb 58       	subi	r30, 0x8B	; 139
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	91 81       	ldd	r25, Z+1	; 0x01
    460c:	01 97       	sbiw	r24, 0x01	; 1
    460e:	11 96       	adiw	r26, 0x01	; 1
    4610:	9c 93       	st	X, r25
    4612:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4614:	fe 01       	movw	r30, r28
    4616:	eb 58       	subi	r30, 0x8B	; 139
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	80 81       	ld	r24, Z
    461c:	91 81       	ldd	r25, Z+1	; 0x01
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	d1 f6       	brne	.-76     	; 0x45d6 <LCD_voidInit+0x250>
    4622:	27 c0       	rjmp	.+78     	; 0x4672 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4624:	8e 01       	movw	r16, r28
    4626:	0b 58       	subi	r16, 0x8B	; 139
    4628:	1f 4f       	sbci	r17, 0xFF	; 255
    462a:	fe 01       	movw	r30, r28
    462c:	e9 58       	subi	r30, 0x89	; 137
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	60 81       	ld	r22, Z
    4632:	71 81       	ldd	r23, Z+1	; 0x01
    4634:	82 81       	ldd	r24, Z+2	; 0x02
    4636:	93 81       	ldd	r25, Z+3	; 0x03
    4638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	f8 01       	movw	r30, r16
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	80 83       	st	Z, r24
    4646:	de 01       	movw	r26, r28
    4648:	af 58       	subi	r26, 0x8F	; 143
    464a:	bf 4f       	sbci	r27, 0xFF	; 255
    464c:	fe 01       	movw	r30, r28
    464e:	eb 58       	subi	r30, 0x8B	; 139
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	80 81       	ld	r24, Z
    4654:	91 81       	ldd	r25, Z+1	; 0x01
    4656:	8d 93       	st	X+, r24
    4658:	9c 93       	st	X, r25
    465a:	fe 01       	movw	r30, r28
    465c:	ef 58       	subi	r30, 0x8F	; 143
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <LCD_voidInit+0x2de>
    4668:	fe 01       	movw	r30, r28
    466a:	ef 58       	subi	r30, 0x8F	; 143
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	91 83       	std	Z+1, r25	; 0x01
    4670:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    4672:	80 e3       	ldi	r24, 0x30	; 48
    4674:	0e 94 b3 28 	call	0x5166	; 0x5166 <LCD_voidSendInitCommand>
    4678:	fe 01       	movw	r30, r28
    467a:	e3 59       	subi	r30, 0x93	; 147
    467c:	ff 4f       	sbci	r31, 0xFF	; 255
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	a0 e8       	ldi	r26, 0x80	; 128
    4684:	bf e3       	ldi	r27, 0x3F	; 63
    4686:	80 83       	st	Z, r24
    4688:	91 83       	std	Z+1, r25	; 0x01
    468a:	a2 83       	std	Z+2, r26	; 0x02
    468c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468e:	8e 01       	movw	r16, r28
    4690:	07 59       	subi	r16, 0x97	; 151
    4692:	1f 4f       	sbci	r17, 0xFF	; 255
    4694:	fe 01       	movw	r30, r28
    4696:	e3 59       	subi	r30, 0x93	; 147
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	60 81       	ld	r22, Z
    469c:	71 81       	ldd	r23, Z+1	; 0x01
    469e:	82 81       	ldd	r24, Z+2	; 0x02
    46a0:	93 81       	ldd	r25, Z+3	; 0x03
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	4a e7       	ldi	r20, 0x7A	; 122
    46a8:	55 e4       	ldi	r21, 0x45	; 69
    46aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	f8 01       	movw	r30, r16
    46b4:	80 83       	st	Z, r24
    46b6:	91 83       	std	Z+1, r25	; 0x01
    46b8:	a2 83       	std	Z+2, r26	; 0x02
    46ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46bc:	fe 01       	movw	r30, r28
    46be:	e7 59       	subi	r30, 0x97	; 151
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	60 81       	ld	r22, Z
    46c4:	71 81       	ldd	r23, Z+1	; 0x01
    46c6:	82 81       	ldd	r24, Z+2	; 0x02
    46c8:	93 81       	ldd	r25, Z+3	; 0x03
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	40 e8       	ldi	r20, 0x80	; 128
    46d0:	5f e3       	ldi	r21, 0x3F	; 63
    46d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d6:	88 23       	and	r24, r24
    46d8:	44 f4       	brge	.+16     	; 0x46ea <LCD_voidInit+0x364>
		__ticks = 1;
    46da:	fe 01       	movw	r30, r28
    46dc:	e9 59       	subi	r30, 0x99	; 153
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	80 83       	st	Z, r24
    46e8:	64 c0       	rjmp	.+200    	; 0x47b2 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    46ea:	fe 01       	movw	r30, r28
    46ec:	e7 59       	subi	r30, 0x97	; 151
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	60 81       	ld	r22, Z
    46f2:	71 81       	ldd	r23, Z+1	; 0x01
    46f4:	82 81       	ldd	r24, Z+2	; 0x02
    46f6:	93 81       	ldd	r25, Z+3	; 0x03
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	0c f0       	brlt	.+2      	; 0x470a <LCD_voidInit+0x384>
    4708:	43 c0       	rjmp	.+134    	; 0x4790 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470a:	fe 01       	movw	r30, r28
    470c:	e3 59       	subi	r30, 0x93	; 147
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	40 e2       	ldi	r20, 0x20	; 32
    471e:	51 e4       	ldi	r21, 0x41	; 65
    4720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	8e 01       	movw	r16, r28
    472a:	09 59       	subi	r16, 0x99	; 153
    472c:	1f 4f       	sbci	r17, 0xFF	; 255
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	f8 01       	movw	r30, r16
    473c:	91 83       	std	Z+1, r25	; 0x01
    473e:	80 83       	st	Z, r24
    4740:	1f c0       	rjmp	.+62     	; 0x4780 <LCD_voidInit+0x3fa>
    4742:	fe 01       	movw	r30, r28
    4744:	eb 59       	subi	r30, 0x9B	; 155
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 e9       	ldi	r24, 0x90	; 144
    474a:	91 e0       	ldi	r25, 0x01	; 1
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	80 83       	st	Z, r24
    4750:	fe 01       	movw	r30, r28
    4752:	eb 59       	subi	r30, 0x9B	; 155
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	80 81       	ld	r24, Z
    4758:	91 81       	ldd	r25, Z+1	; 0x01
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	f1 f7       	brne	.-4      	; 0x475a <LCD_voidInit+0x3d4>
    475e:	fe 01       	movw	r30, r28
    4760:	eb 59       	subi	r30, 0x9B	; 155
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4768:	de 01       	movw	r26, r28
    476a:	a9 59       	subi	r26, 0x99	; 153
    476c:	bf 4f       	sbci	r27, 0xFF	; 255
    476e:	fe 01       	movw	r30, r28
    4770:	e9 59       	subi	r30, 0x99	; 153
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 81       	ld	r24, Z
    4776:	91 81       	ldd	r25, Z+1	; 0x01
    4778:	01 97       	sbiw	r24, 0x01	; 1
    477a:	11 96       	adiw	r26, 0x01	; 1
    477c:	9c 93       	st	X, r25
    477e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4780:	fe 01       	movw	r30, r28
    4782:	e9 59       	subi	r30, 0x99	; 153
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	00 97       	sbiw	r24, 0x00	; 0
    478c:	d1 f6       	brne	.-76     	; 0x4742 <LCD_voidInit+0x3bc>
    478e:	27 c0       	rjmp	.+78     	; 0x47de <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4790:	8e 01       	movw	r16, r28
    4792:	09 59       	subi	r16, 0x99	; 153
    4794:	1f 4f       	sbci	r17, 0xFF	; 255
    4796:	fe 01       	movw	r30, r28
    4798:	e7 59       	subi	r30, 0x97	; 151
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	60 81       	ld	r22, Z
    479e:	71 81       	ldd	r23, Z+1	; 0x01
    47a0:	82 81       	ldd	r24, Z+2	; 0x02
    47a2:	93 81       	ldd	r25, Z+3	; 0x03
    47a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	f8 01       	movw	r30, r16
    47ae:	91 83       	std	Z+1, r25	; 0x01
    47b0:	80 83       	st	Z, r24
    47b2:	de 01       	movw	r26, r28
    47b4:	ad 59       	subi	r26, 0x9D	; 157
    47b6:	bf 4f       	sbci	r27, 0xFF	; 255
    47b8:	fe 01       	movw	r30, r28
    47ba:	e9 59       	subi	r30, 0x99	; 153
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	8d 93       	st	X+, r24
    47c4:	9c 93       	st	X, r25
    47c6:	fe 01       	movw	r30, r28
    47c8:	ed 59       	subi	r30, 0x9D	; 157
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	80 81       	ld	r24, Z
    47ce:	91 81       	ldd	r25, Z+1	; 0x01
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <LCD_voidInit+0x44a>
    47d4:	fe 01       	movw	r30, r28
    47d6:	ed 59       	subi	r30, 0x9D	; 157
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    47de:	80 e3       	ldi	r24, 0x30	; 48
    47e0:	0e 94 b3 28 	call	0x5166	; 0x5166 <LCD_voidSendInitCommand>
    47e4:	fe 01       	movw	r30, r28
    47e6:	e1 5a       	subi	r30, 0xA1	; 161
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	a0 e8       	ldi	r26, 0x80	; 128
    47f0:	bf e3       	ldi	r27, 0x3F	; 63
    47f2:	80 83       	st	Z, r24
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	a2 83       	std	Z+2, r26	; 0x02
    47f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fa:	8e 01       	movw	r16, r28
    47fc:	05 5a       	subi	r16, 0xA5	; 165
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	fe 01       	movw	r30, r28
    4802:	e1 5a       	subi	r30, 0xA1	; 161
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	4a e7       	ldi	r20, 0x7A	; 122
    4814:	55 e4       	ldi	r21, 0x45	; 69
    4816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	f8 01       	movw	r30, r16
    4820:	80 83       	st	Z, r24
    4822:	91 83       	std	Z+1, r25	; 0x01
    4824:	a2 83       	std	Z+2, r26	; 0x02
    4826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4828:	fe 01       	movw	r30, r28
    482a:	e5 5a       	subi	r30, 0xA5	; 165
    482c:	ff 4f       	sbci	r31, 0xFF	; 255
    482e:	60 81       	ld	r22, Z
    4830:	71 81       	ldd	r23, Z+1	; 0x01
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e8       	ldi	r20, 0x80	; 128
    483c:	5f e3       	ldi	r21, 0x3F	; 63
    483e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4842:	88 23       	and	r24, r24
    4844:	44 f4       	brge	.+16     	; 0x4856 <LCD_voidInit+0x4d0>
		__ticks = 1;
    4846:	fe 01       	movw	r30, r28
    4848:	e7 5a       	subi	r30, 0xA7	; 167
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	91 83       	std	Z+1, r25	; 0x01
    4852:	80 83       	st	Z, r24
    4854:	64 c0       	rjmp	.+200    	; 0x491e <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    4856:	fe 01       	movw	r30, r28
    4858:	e5 5a       	subi	r30, 0xA5	; 165
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	60 81       	ld	r22, Z
    485e:	71 81       	ldd	r23, Z+1	; 0x01
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	4f e7       	ldi	r20, 0x7F	; 127
    486a:	57 e4       	ldi	r21, 0x47	; 71
    486c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4870:	18 16       	cp	r1, r24
    4872:	0c f0       	brlt	.+2      	; 0x4876 <LCD_voidInit+0x4f0>
    4874:	43 c0       	rjmp	.+134    	; 0x48fc <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4876:	fe 01       	movw	r30, r28
    4878:	e1 5a       	subi	r30, 0xA1	; 161
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	60 81       	ld	r22, Z
    487e:	71 81       	ldd	r23, Z+1	; 0x01
    4880:	82 81       	ldd	r24, Z+2	; 0x02
    4882:	93 81       	ldd	r25, Z+3	; 0x03
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e2       	ldi	r20, 0x20	; 32
    488a:	51 e4       	ldi	r21, 0x41	; 65
    488c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	8e 01       	movw	r16, r28
    4896:	07 5a       	subi	r16, 0xA7	; 167
    4898:	1f 4f       	sbci	r17, 0xFF	; 255
    489a:	bc 01       	movw	r22, r24
    489c:	cd 01       	movw	r24, r26
    489e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a2:	dc 01       	movw	r26, r24
    48a4:	cb 01       	movw	r24, r22
    48a6:	f8 01       	movw	r30, r16
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
    48ac:	1f c0       	rjmp	.+62     	; 0x48ec <LCD_voidInit+0x566>
    48ae:	fe 01       	movw	r30, r28
    48b0:	e9 5a       	subi	r30, 0xA9	; 169
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 e9       	ldi	r24, 0x90	; 144
    48b6:	91 e0       	ldi	r25, 0x01	; 1
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	80 83       	st	Z, r24
    48bc:	fe 01       	movw	r30, r28
    48be:	e9 5a       	subi	r30, 0xA9	; 169
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <LCD_voidInit+0x540>
    48ca:	fe 01       	movw	r30, r28
    48cc:	e9 5a       	subi	r30, 0xA9	; 169
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d4:	de 01       	movw	r26, r28
    48d6:	a7 5a       	subi	r26, 0xA7	; 167
    48d8:	bf 4f       	sbci	r27, 0xFF	; 255
    48da:	fe 01       	movw	r30, r28
    48dc:	e7 5a       	subi	r30, 0xA7	; 167
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	11 96       	adiw	r26, 0x01	; 1
    48e8:	9c 93       	st	X, r25
    48ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	fe 01       	movw	r30, r28
    48ee:	e7 5a       	subi	r30, 0xA7	; 167
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 81       	ld	r24, Z
    48f4:	91 81       	ldd	r25, Z+1	; 0x01
    48f6:	00 97       	sbiw	r24, 0x00	; 0
    48f8:	d1 f6       	brne	.-76     	; 0x48ae <LCD_voidInit+0x528>
    48fa:	27 c0       	rjmp	.+78     	; 0x494a <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48fc:	8e 01       	movw	r16, r28
    48fe:	07 5a       	subi	r16, 0xA7	; 167
    4900:	1f 4f       	sbci	r17, 0xFF	; 255
    4902:	fe 01       	movw	r30, r28
    4904:	e5 5a       	subi	r30, 0xA5	; 165
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	60 81       	ld	r22, Z
    490a:	71 81       	ldd	r23, Z+1	; 0x01
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	91 83       	std	Z+1, r25	; 0x01
    491c:	80 83       	st	Z, r24
    491e:	de 01       	movw	r26, r28
    4920:	ab 5a       	subi	r26, 0xAB	; 171
    4922:	bf 4f       	sbci	r27, 0xFF	; 255
    4924:	fe 01       	movw	r30, r28
    4926:	e7 5a       	subi	r30, 0xA7	; 167
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	80 81       	ld	r24, Z
    492c:	91 81       	ldd	r25, Z+1	; 0x01
    492e:	8d 93       	st	X+, r24
    4930:	9c 93       	st	X, r25
    4932:	fe 01       	movw	r30, r28
    4934:	eb 5a       	subi	r30, 0xAB	; 171
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	80 81       	ld	r24, Z
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	f1 f7       	brne	.-4      	; 0x493c <LCD_voidInit+0x5b6>
    4940:	fe 01       	movw	r30, r28
    4942:	eb 5a       	subi	r30, 0xAB	; 171
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	91 83       	std	Z+1, r25	; 0x01
    4948:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    494a:	80 e2       	ldi	r24, 0x20	; 32
    494c:	0e 94 b3 28 	call	0x5166	; 0x5166 <LCD_voidSendInitCommand>
    4950:	fe 01       	movw	r30, r28
    4952:	ef 5a       	subi	r30, 0xAF	; 175
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	80 e0       	ldi	r24, 0x00	; 0
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	a0 e8       	ldi	r26, 0x80	; 128
    495c:	bf e3       	ldi	r27, 0x3F	; 63
    495e:	80 83       	st	Z, r24
    4960:	91 83       	std	Z+1, r25	; 0x01
    4962:	a2 83       	std	Z+2, r26	; 0x02
    4964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4966:	8e 01       	movw	r16, r28
    4968:	03 5b       	subi	r16, 0xB3	; 179
    496a:	1f 4f       	sbci	r17, 0xFF	; 255
    496c:	fe 01       	movw	r30, r28
    496e:	ef 5a       	subi	r30, 0xAF	; 175
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	82 81       	ldd	r24, Z+2	; 0x02
    4978:	93 81       	ldd	r25, Z+3	; 0x03
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	4a e7       	ldi	r20, 0x7A	; 122
    4980:	55 e4       	ldi	r21, 0x45	; 69
    4982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	f8 01       	movw	r30, r16
    498c:	80 83       	st	Z, r24
    498e:	91 83       	std	Z+1, r25	; 0x01
    4990:	a2 83       	std	Z+2, r26	; 0x02
    4992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4994:	fe 01       	movw	r30, r28
    4996:	e3 5b       	subi	r30, 0xB3	; 179
    4998:	ff 4f       	sbci	r31, 0xFF	; 255
    499a:	60 81       	ld	r22, Z
    499c:	71 81       	ldd	r23, Z+1	; 0x01
    499e:	82 81       	ldd	r24, Z+2	; 0x02
    49a0:	93 81       	ldd	r25, Z+3	; 0x03
    49a2:	20 e0       	ldi	r18, 0x00	; 0
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	40 e8       	ldi	r20, 0x80	; 128
    49a8:	5f e3       	ldi	r21, 0x3F	; 63
    49aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49ae:	88 23       	and	r24, r24
    49b0:	44 f4       	brge	.+16     	; 0x49c2 <LCD_voidInit+0x63c>
		__ticks = 1;
    49b2:	fe 01       	movw	r30, r28
    49b4:	e5 5b       	subi	r30, 0xB5	; 181
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
    49c0:	64 c0       	rjmp	.+200    	; 0x4a8a <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    49c2:	fe 01       	movw	r30, r28
    49c4:	e3 5b       	subi	r30, 0xB3	; 179
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	60 81       	ld	r22, Z
    49ca:	71 81       	ldd	r23, Z+1	; 0x01
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	93 81       	ldd	r25, Z+3	; 0x03
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	3f ef       	ldi	r19, 0xFF	; 255
    49d4:	4f e7       	ldi	r20, 0x7F	; 127
    49d6:	57 e4       	ldi	r21, 0x47	; 71
    49d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49dc:	18 16       	cp	r1, r24
    49de:	0c f0       	brlt	.+2      	; 0x49e2 <LCD_voidInit+0x65c>
    49e0:	43 c0       	rjmp	.+134    	; 0x4a68 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e2:	fe 01       	movw	r30, r28
    49e4:	ef 5a       	subi	r30, 0xAF	; 175
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	60 81       	ld	r22, Z
    49ea:	71 81       	ldd	r23, Z+1	; 0x01
    49ec:	82 81       	ldd	r24, Z+2	; 0x02
    49ee:	93 81       	ldd	r25, Z+3	; 0x03
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	40 e2       	ldi	r20, 0x20	; 32
    49f6:	51 e4       	ldi	r21, 0x41	; 65
    49f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	8e 01       	movw	r16, r28
    4a02:	05 5b       	subi	r16, 0xB5	; 181
    4a04:	1f 4f       	sbci	r17, 0xFF	; 255
    4a06:	bc 01       	movw	r22, r24
    4a08:	cd 01       	movw	r24, r26
    4a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0e:	dc 01       	movw	r26, r24
    4a10:	cb 01       	movw	r24, r22
    4a12:	f8 01       	movw	r30, r16
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	80 83       	st	Z, r24
    4a18:	1f c0       	rjmp	.+62     	; 0x4a58 <LCD_voidInit+0x6d2>
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e7 5b       	subi	r30, 0xB7	; 183
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 e9       	ldi	r24, 0x90	; 144
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	80 83       	st	Z, r24
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e7 5b       	subi	r30, 0xB7	; 183
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 81       	ld	r24, Z
    4a30:	91 81       	ldd	r25, Z+1	; 0x01
    4a32:	01 97       	sbiw	r24, 0x01	; 1
    4a34:	f1 f7       	brne	.-4      	; 0x4a32 <LCD_voidInit+0x6ac>
    4a36:	fe 01       	movw	r30, r28
    4a38:	e7 5b       	subi	r30, 0xB7	; 183
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a40:	de 01       	movw	r26, r28
    4a42:	a5 5b       	subi	r26, 0xB5	; 181
    4a44:	bf 4f       	sbci	r27, 0xFF	; 255
    4a46:	fe 01       	movw	r30, r28
    4a48:	e5 5b       	subi	r30, 0xB5	; 181
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 81       	ld	r24, Z
    4a4e:	91 81       	ldd	r25, Z+1	; 0x01
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	11 96       	adiw	r26, 0x01	; 1
    4a54:	9c 93       	st	X, r25
    4a56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e5 5b       	subi	r30, 0xB5	; 181
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	91 81       	ldd	r25, Z+1	; 0x01
    4a62:	00 97       	sbiw	r24, 0x00	; 0
    4a64:	d1 f6       	brne	.-76     	; 0x4a1a <LCD_voidInit+0x694>
    4a66:	27 c0       	rjmp	.+78     	; 0x4ab6 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a68:	8e 01       	movw	r16, r28
    4a6a:	05 5b       	subi	r16, 0xB5	; 181
    4a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6e:	fe 01       	movw	r30, r28
    4a70:	e3 5b       	subi	r30, 0xB3	; 179
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	60 81       	ld	r22, Z
    4a76:	71 81       	ldd	r23, Z+1	; 0x01
    4a78:	82 81       	ldd	r24, Z+2	; 0x02
    4a7a:	93 81       	ldd	r25, Z+3	; 0x03
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	f8 01       	movw	r30, r16
    4a86:	91 83       	std	Z+1, r25	; 0x01
    4a88:	80 83       	st	Z, r24
    4a8a:	de 01       	movw	r26, r28
    4a8c:	a9 5b       	subi	r26, 0xB9	; 185
    4a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a90:	fe 01       	movw	r30, r28
    4a92:	e5 5b       	subi	r30, 0xB5	; 181
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	80 81       	ld	r24, Z
    4a98:	91 81       	ldd	r25, Z+1	; 0x01
    4a9a:	8d 93       	st	X+, r24
    4a9c:	9c 93       	st	X, r25
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e9 5b       	subi	r30, 0xB9	; 185
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <LCD_voidInit+0x722>
    4aac:	fe 01       	movw	r30, r28
    4aae:	e9 5b       	subi	r30, 0xB9	; 185
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    4ab6:	8c e2       	ldi	r24, 0x2C	; 44
    4ab8:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    4abc:	fe 01       	movw	r30, r28
    4abe:	ed 5b       	subi	r30, 0xBD	; 189
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	a0 e8       	ldi	r26, 0x80	; 128
    4ac8:	bf e3       	ldi	r27, 0x3F	; 63
    4aca:	80 83       	st	Z, r24
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	a2 83       	std	Z+2, r26	; 0x02
    4ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad2:	8e 01       	movw	r16, r28
    4ad4:	01 5c       	subi	r16, 0xC1	; 193
    4ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad8:	fe 01       	movw	r30, r28
    4ada:	ed 5b       	subi	r30, 0xBD	; 189
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	4a e7       	ldi	r20, 0x7A	; 122
    4aec:	55 e4       	ldi	r21, 0x45	; 69
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	f8 01       	movw	r30, r16
    4af8:	80 83       	st	Z, r24
    4afa:	91 83       	std	Z+1, r25	; 0x01
    4afc:	a2 83       	std	Z+2, r26	; 0x02
    4afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b00:	fe 01       	movw	r30, r28
    4b02:	ff 96       	adiw	r30, 0x3f	; 63
    4b04:	60 81       	ld	r22, Z
    4b06:	71 81       	ldd	r23, Z+1	; 0x01
    4b08:	82 81       	ldd	r24, Z+2	; 0x02
    4b0a:	93 81       	ldd	r25, Z+3	; 0x03
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e8       	ldi	r20, 0x80	; 128
    4b12:	5f e3       	ldi	r21, 0x3F	; 63
    4b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b18:	88 23       	and	r24, r24
    4b1a:	2c f4       	brge	.+10     	; 0x4b26 <LCD_voidInit+0x7a0>
		__ticks = 1;
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9e af       	std	Y+62, r25	; 0x3e
    4b22:	8d af       	std	Y+61, r24	; 0x3d
    4b24:	46 c0       	rjmp	.+140    	; 0x4bb2 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    4b26:	fe 01       	movw	r30, r28
    4b28:	ff 96       	adiw	r30, 0x3f	; 63
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	3f ef       	ldi	r19, 0xFF	; 255
    4b36:	4f e7       	ldi	r20, 0x7F	; 127
    4b38:	57 e4       	ldi	r21, 0x47	; 71
    4b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b3e:	18 16       	cp	r1, r24
    4b40:	64 f5       	brge	.+88     	; 0x4b9a <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b42:	fe 01       	movw	r30, r28
    4b44:	ed 5b       	subi	r30, 0xBD	; 189
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	60 81       	ld	r22, Z
    4b4a:	71 81       	ldd	r23, Z+1	; 0x01
    4b4c:	82 81       	ldd	r24, Z+2	; 0x02
    4b4e:	93 81       	ldd	r25, Z+3	; 0x03
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e2       	ldi	r20, 0x20	; 32
    4b56:	51 e4       	ldi	r21, 0x41	; 65
    4b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	9e af       	std	Y+62, r25	; 0x3e
    4b6e:	8d af       	std	Y+61, r24	; 0x3d
    4b70:	0f c0       	rjmp	.+30     	; 0x4b90 <LCD_voidInit+0x80a>
    4b72:	80 e9       	ldi	r24, 0x90	; 144
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	9c af       	std	Y+60, r25	; 0x3c
    4b78:	8b af       	std	Y+59, r24	; 0x3b
    4b7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b7e:	01 97       	sbiw	r24, 0x01	; 1
    4b80:	f1 f7       	brne	.-4      	; 0x4b7e <LCD_voidInit+0x7f8>
    4b82:	9c af       	std	Y+60, r25	; 0x3c
    4b84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b86:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b88:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b8a:	01 97       	sbiw	r24, 0x01	; 1
    4b8c:	9e af       	std	Y+62, r25	; 0x3e
    4b8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	69 f7       	brne	.-38     	; 0x4b72 <LCD_voidInit+0x7ec>
    4b98:	16 c0       	rjmp	.+44     	; 0x4bc6 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	ff 96       	adiw	r30, 0x3f	; 63
    4b9e:	60 81       	ld	r22, Z
    4ba0:	71 81       	ldd	r23, Z+1	; 0x01
    4ba2:	82 81       	ldd	r24, Z+2	; 0x02
    4ba4:	93 81       	ldd	r25, Z+3	; 0x03
    4ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	9e af       	std	Y+62, r25	; 0x3e
    4bb0:	8d af       	std	Y+61, r24	; 0x3d
    4bb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bb6:	9a af       	std	Y+58, r25	; 0x3a
    4bb8:	89 af       	std	Y+57, r24	; 0x39
    4bba:	89 ad       	ldd	r24, Y+57	; 0x39
    4bbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bbe:	01 97       	sbiw	r24, 0x01	; 1
    4bc0:	f1 f7       	brne	.-4      	; 0x4bbe <LCD_voidInit+0x838>
    4bc2:	9a af       	std	Y+58, r25	; 0x3a
    4bc4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    4bc6:	88 e0       	ldi	r24, 0x08	; 8
    4bc8:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	a0 e8       	ldi	r26, 0x80	; 128
    4bd2:	bf e3       	ldi	r27, 0x3F	; 63
    4bd4:	8d ab       	std	Y+53, r24	; 0x35
    4bd6:	9e ab       	std	Y+54, r25	; 0x36
    4bd8:	af ab       	std	Y+55, r26	; 0x37
    4bda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bdc:	6d a9       	ldd	r22, Y+53	; 0x35
    4bde:	7e a9       	ldd	r23, Y+54	; 0x36
    4be0:	8f a9       	ldd	r24, Y+55	; 0x37
    4be2:	98 ad       	ldd	r25, Y+56	; 0x38
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	4a e7       	ldi	r20, 0x7A	; 122
    4bea:	55 e4       	ldi	r21, 0x45	; 69
    4bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	89 ab       	std	Y+49, r24	; 0x31
    4bf6:	9a ab       	std	Y+50, r25	; 0x32
    4bf8:	ab ab       	std	Y+51, r26	; 0x33
    4bfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    4bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    4c00:	8b a9       	ldd	r24, Y+51	; 0x33
    4c02:	9c a9       	ldd	r25, Y+52	; 0x34
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	40 e8       	ldi	r20, 0x80	; 128
    4c0a:	5f e3       	ldi	r21, 0x3F	; 63
    4c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c10:	88 23       	and	r24, r24
    4c12:	2c f4       	brge	.+10     	; 0x4c1e <LCD_voidInit+0x898>
		__ticks = 1;
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	98 ab       	std	Y+48, r25	; 0x30
    4c1a:	8f a7       	std	Y+47, r24	; 0x2f
    4c1c:	3f c0       	rjmp	.+126    	; 0x4c9c <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    4c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c20:	7a a9       	ldd	r23, Y+50	; 0x32
    4c22:	8b a9       	ldd	r24, Y+51	; 0x33
    4c24:	9c a9       	ldd	r25, Y+52	; 0x34
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	3f ef       	ldi	r19, 0xFF	; 255
    4c2a:	4f e7       	ldi	r20, 0x7F	; 127
    4c2c:	57 e4       	ldi	r21, 0x47	; 71
    4c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c32:	18 16       	cp	r1, r24
    4c34:	4c f5       	brge	.+82     	; 0x4c88 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c36:	6d a9       	ldd	r22, Y+53	; 0x35
    4c38:	7e a9       	ldd	r23, Y+54	; 0x36
    4c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    4c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	40 e2       	ldi	r20, 0x20	; 32
    4c44:	51 e4       	ldi	r21, 0x41	; 65
    4c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	98 ab       	std	Y+48, r25	; 0x30
    4c5c:	8f a7       	std	Y+47, r24	; 0x2f
    4c5e:	0f c0       	rjmp	.+30     	; 0x4c7e <LCD_voidInit+0x8f8>
    4c60:	80 e9       	ldi	r24, 0x90	; 144
    4c62:	91 e0       	ldi	r25, 0x01	; 1
    4c64:	9e a7       	std	Y+46, r25	; 0x2e
    4c66:	8d a7       	std	Y+45, r24	; 0x2d
    4c68:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c6c:	01 97       	sbiw	r24, 0x01	; 1
    4c6e:	f1 f7       	brne	.-4      	; 0x4c6c <LCD_voidInit+0x8e6>
    4c70:	9e a7       	std	Y+46, r25	; 0x2e
    4c72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c76:	98 a9       	ldd	r25, Y+48	; 0x30
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	98 ab       	std	Y+48, r25	; 0x30
    4c7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c80:	98 a9       	ldd	r25, Y+48	; 0x30
    4c82:	00 97       	sbiw	r24, 0x00	; 0
    4c84:	69 f7       	brne	.-38     	; 0x4c60 <LCD_voidInit+0x8da>
    4c86:	14 c0       	rjmp	.+40     	; 0x4cb0 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c88:	69 a9       	ldd	r22, Y+49	; 0x31
    4c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c94:	dc 01       	movw	r26, r24
    4c96:	cb 01       	movw	r24, r22
    4c98:	98 ab       	std	Y+48, r25	; 0x30
    4c9a:	8f a7       	std	Y+47, r24	; 0x2f
    4c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    4ca0:	9c a7       	std	Y+44, r25	; 0x2c
    4ca2:	8b a7       	std	Y+43, r24	; 0x2b
    4ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ca8:	01 97       	sbiw	r24, 0x01	; 1
    4caa:	f1 f7       	brne	.-4      	; 0x4ca8 <LCD_voidInit+0x922>
    4cac:	9c a7       	std	Y+44, r25	; 0x2c
    4cae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	a0 ea       	ldi	r26, 0xA0	; 160
    4cbc:	b0 e4       	ldi	r27, 0x40	; 64
    4cbe:	8f a3       	std	Y+39, r24	; 0x27
    4cc0:	98 a7       	std	Y+40, r25	; 0x28
    4cc2:	a9 a7       	std	Y+41, r26	; 0x29
    4cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    4cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    4cca:	89 a5       	ldd	r24, Y+41	; 0x29
    4ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	4a e7       	ldi	r20, 0x7A	; 122
    4cd4:	55 e4       	ldi	r21, 0x45	; 69
    4cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	8b a3       	std	Y+35, r24	; 0x23
    4ce0:	9c a3       	std	Y+36, r25	; 0x24
    4ce2:	ad a3       	std	Y+37, r26	; 0x25
    4ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    4cea:	8d a1       	ldd	r24, Y+37	; 0x25
    4cec:	9e a1       	ldd	r25, Y+38	; 0x26
    4cee:	20 e0       	ldi	r18, 0x00	; 0
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	40 e8       	ldi	r20, 0x80	; 128
    4cf4:	5f e3       	ldi	r21, 0x3F	; 63
    4cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cfa:	88 23       	and	r24, r24
    4cfc:	2c f4       	brge	.+10     	; 0x4d08 <LCD_voidInit+0x982>
		__ticks = 1;
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	9a a3       	std	Y+34, r25	; 0x22
    4d04:	89 a3       	std	Y+33, r24	; 0x21
    4d06:	3f c0       	rjmp	.+126    	; 0x4d86 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    4d08:	6b a1       	ldd	r22, Y+35	; 0x23
    4d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	3f ef       	ldi	r19, 0xFF	; 255
    4d14:	4f e7       	ldi	r20, 0x7F	; 127
    4d16:	57 e4       	ldi	r21, 0x47	; 71
    4d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d1c:	18 16       	cp	r1, r24
    4d1e:	4c f5       	brge	.+82     	; 0x4d72 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d20:	6f a1       	ldd	r22, Y+39	; 0x27
    4d22:	78 a5       	ldd	r23, Y+40	; 0x28
    4d24:	89 a5       	ldd	r24, Y+41	; 0x29
    4d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e2       	ldi	r20, 0x20	; 32
    4d2e:	51 e4       	ldi	r21, 0x41	; 65
    4d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	bc 01       	movw	r22, r24
    4d3a:	cd 01       	movw	r24, r26
    4d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d40:	dc 01       	movw	r26, r24
    4d42:	cb 01       	movw	r24, r22
    4d44:	9a a3       	std	Y+34, r25	; 0x22
    4d46:	89 a3       	std	Y+33, r24	; 0x21
    4d48:	0f c0       	rjmp	.+30     	; 0x4d68 <LCD_voidInit+0x9e2>
    4d4a:	80 e9       	ldi	r24, 0x90	; 144
    4d4c:	91 e0       	ldi	r25, 0x01	; 1
    4d4e:	98 a3       	std	Y+32, r25	; 0x20
    4d50:	8f 8f       	std	Y+31, r24	; 0x1f
    4d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d54:	98 a1       	ldd	r25, Y+32	; 0x20
    4d56:	01 97       	sbiw	r24, 0x01	; 1
    4d58:	f1 f7       	brne	.-4      	; 0x4d56 <LCD_voidInit+0x9d0>
    4d5a:	98 a3       	std	Y+32, r25	; 0x20
    4d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    4d60:	9a a1       	ldd	r25, Y+34	; 0x22
    4d62:	01 97       	sbiw	r24, 0x01	; 1
    4d64:	9a a3       	std	Y+34, r25	; 0x22
    4d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d68:	89 a1       	ldd	r24, Y+33	; 0x21
    4d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    4d6c:	00 97       	sbiw	r24, 0x00	; 0
    4d6e:	69 f7       	brne	.-38     	; 0x4d4a <LCD_voidInit+0x9c4>
    4d70:	14 c0       	rjmp	.+40     	; 0x4d9a <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d72:	6b a1       	ldd	r22, Y+35	; 0x23
    4d74:	7c a1       	ldd	r23, Y+36	; 0x24
    4d76:	8d a1       	ldd	r24, Y+37	; 0x25
    4d78:	9e a1       	ldd	r25, Y+38	; 0x26
    4d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	9a a3       	std	Y+34, r25	; 0x22
    4d84:	89 a3       	std	Y+33, r24	; 0x21
    4d86:	89 a1       	ldd	r24, Y+33	; 0x21
    4d88:	9a a1       	ldd	r25, Y+34	; 0x22
    4d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    4d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    4d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	f1 f7       	brne	.-4      	; 0x4d92 <LCD_voidInit+0xa0c>
    4d96:	9e 8f       	std	Y+30, r25	; 0x1e
    4d98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    4d9a:	8c e0       	ldi	r24, 0x0C	; 12
    4d9c:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	a0 e8       	ldi	r26, 0x80	; 128
    4da6:	bf e3       	ldi	r27, 0x3F	; 63
    4da8:	89 8f       	std	Y+25, r24	; 0x19
    4daa:	9a 8f       	std	Y+26, r25	; 0x1a
    4dac:	ab 8f       	std	Y+27, r26	; 0x1b
    4dae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4db0:	69 8d       	ldd	r22, Y+25	; 0x19
    4db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	4a e7       	ldi	r20, 0x7A	; 122
    4dbe:	55 e4       	ldi	r21, 0x45	; 69
    4dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	8d 8b       	std	Y+21, r24	; 0x15
    4dca:	9e 8b       	std	Y+22, r25	; 0x16
    4dcc:	af 8b       	std	Y+23, r26	; 0x17
    4dce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    4dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    4dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd8:	20 e0       	ldi	r18, 0x00	; 0
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	40 e8       	ldi	r20, 0x80	; 128
    4dde:	5f e3       	ldi	r21, 0x3F	; 63
    4de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4de4:	88 23       	and	r24, r24
    4de6:	2c f4       	brge	.+10     	; 0x4df2 <LCD_voidInit+0xa6c>
		__ticks = 1;
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	9c 8b       	std	Y+20, r25	; 0x14
    4dee:	8b 8b       	std	Y+19, r24	; 0x13
    4df0:	3f c0       	rjmp	.+126    	; 0x4e70 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    4df2:	6d 89       	ldd	r22, Y+21	; 0x15
    4df4:	7e 89       	ldd	r23, Y+22	; 0x16
    4df6:	8f 89       	ldd	r24, Y+23	; 0x17
    4df8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	3f ef       	ldi	r19, 0xFF	; 255
    4dfe:	4f e7       	ldi	r20, 0x7F	; 127
    4e00:	57 e4       	ldi	r21, 0x47	; 71
    4e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e06:	18 16       	cp	r1, r24
    4e08:	4c f5       	brge	.+82     	; 0x4e5c <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    4e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	40 e2       	ldi	r20, 0x20	; 32
    4e18:	51 e4       	ldi	r21, 0x41	; 65
    4e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	bc 01       	movw	r22, r24
    4e24:	cd 01       	movw	r24, r26
    4e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	9c 8b       	std	Y+20, r25	; 0x14
    4e30:	8b 8b       	std	Y+19, r24	; 0x13
    4e32:	0f c0       	rjmp	.+30     	; 0x4e52 <LCD_voidInit+0xacc>
    4e34:	80 e9       	ldi	r24, 0x90	; 144
    4e36:	91 e0       	ldi	r25, 0x01	; 1
    4e38:	9a 8b       	std	Y+18, r25	; 0x12
    4e3a:	89 8b       	std	Y+17, r24	; 0x11
    4e3c:	89 89       	ldd	r24, Y+17	; 0x11
    4e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	f1 f7       	brne	.-4      	; 0x4e40 <LCD_voidInit+0xaba>
    4e44:	9a 8b       	std	Y+18, r25	; 0x12
    4e46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e48:	8b 89       	ldd	r24, Y+19	; 0x13
    4e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e4c:	01 97       	sbiw	r24, 0x01	; 1
    4e4e:	9c 8b       	std	Y+20, r25	; 0x14
    4e50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e52:	8b 89       	ldd	r24, Y+19	; 0x13
    4e54:	9c 89       	ldd	r25, Y+20	; 0x14
    4e56:	00 97       	sbiw	r24, 0x00	; 0
    4e58:	69 f7       	brne	.-38     	; 0x4e34 <LCD_voidInit+0xaae>
    4e5a:	14 c0       	rjmp	.+40     	; 0x4e84 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e60:	8f 89       	ldd	r24, Y+23	; 0x17
    4e62:	98 8d       	ldd	r25, Y+24	; 0x18
    4e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	9c 8b       	std	Y+20, r25	; 0x14
    4e6e:	8b 8b       	std	Y+19, r24	; 0x13
    4e70:	8b 89       	ldd	r24, Y+19	; 0x13
    4e72:	9c 89       	ldd	r25, Y+20	; 0x14
    4e74:	98 8b       	std	Y+16, r25	; 0x10
    4e76:	8f 87       	std	Y+15, r24	; 0x0f
    4e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e7a:	98 89       	ldd	r25, Y+16	; 0x10
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	f1 f7       	brne	.-4      	; 0x4e7c <LCD_voidInit+0xaf6>
    4e80:	98 8b       	std	Y+16, r25	; 0x10
    4e82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    4e84:	86 e0       	ldi	r24, 0x06	; 6
    4e86:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	a0 e8       	ldi	r26, 0x80	; 128
    4e90:	bf e3       	ldi	r27, 0x3F	; 63
    4e92:	8b 87       	std	Y+11, r24	; 0x0b
    4e94:	9c 87       	std	Y+12, r25	; 0x0c
    4e96:	ad 87       	std	Y+13, r26	; 0x0d
    4e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	4a e7       	ldi	r20, 0x7A	; 122
    4ea8:	55 e4       	ldi	r21, 0x45	; 69
    4eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eae:	dc 01       	movw	r26, r24
    4eb0:	cb 01       	movw	r24, r22
    4eb2:	8f 83       	std	Y+7, r24	; 0x07
    4eb4:	98 87       	std	Y+8, r25	; 0x08
    4eb6:	a9 87       	std	Y+9, r26	; 0x09
    4eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eba:	6f 81       	ldd	r22, Y+7	; 0x07
    4ebc:	78 85       	ldd	r23, Y+8	; 0x08
    4ebe:	89 85       	ldd	r24, Y+9	; 0x09
    4ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec2:	20 e0       	ldi	r18, 0x00	; 0
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	40 e8       	ldi	r20, 0x80	; 128
    4ec8:	5f e3       	ldi	r21, 0x3F	; 63
    4eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ece:	88 23       	and	r24, r24
    4ed0:	2c f4       	brge	.+10     	; 0x4edc <LCD_voidInit+0xb56>
		__ticks = 1;
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	9e 83       	std	Y+6, r25	; 0x06
    4ed8:	8d 83       	std	Y+5, r24	; 0x05
    4eda:	3f c0       	rjmp	.+126    	; 0x4f5a <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    4edc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ede:	78 85       	ldd	r23, Y+8	; 0x08
    4ee0:	89 85       	ldd	r24, Y+9	; 0x09
    4ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	3f ef       	ldi	r19, 0xFF	; 255
    4ee8:	4f e7       	ldi	r20, 0x7F	; 127
    4eea:	57 e4       	ldi	r21, 0x47	; 71
    4eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ef0:	18 16       	cp	r1, r24
    4ef2:	4c f5       	brge	.+82     	; 0x4f46 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4efc:	20 e0       	ldi	r18, 0x00	; 0
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	40 e2       	ldi	r20, 0x20	; 32
    4f02:	51 e4       	ldi	r21, 0x41	; 65
    4f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	cb 01       	movw	r24, r22
    4f0c:	bc 01       	movw	r22, r24
    4f0e:	cd 01       	movw	r24, r26
    4f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	9e 83       	std	Y+6, r25	; 0x06
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
    4f1c:	0f c0       	rjmp	.+30     	; 0x4f3c <LCD_voidInit+0xbb6>
    4f1e:	80 e9       	ldi	r24, 0x90	; 144
    4f20:	91 e0       	ldi	r25, 0x01	; 1
    4f22:	9c 83       	std	Y+4, r25	; 0x04
    4f24:	8b 83       	std	Y+3, r24	; 0x03
    4f26:	8b 81       	ldd	r24, Y+3	; 0x03
    4f28:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2a:	01 97       	sbiw	r24, 0x01	; 1
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <LCD_voidInit+0xba4>
    4f2e:	9c 83       	std	Y+4, r25	; 0x04
    4f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f32:	8d 81       	ldd	r24, Y+5	; 0x05
    4f34:	9e 81       	ldd	r25, Y+6	; 0x06
    4f36:	01 97       	sbiw	r24, 0x01	; 1
    4f38:	9e 83       	std	Y+6, r25	; 0x06
    4f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f40:	00 97       	sbiw	r24, 0x00	; 0
    4f42:	69 f7       	brne	.-38     	; 0x4f1e <LCD_voidInit+0xb98>
    4f44:	14 c0       	rjmp	.+40     	; 0x4f6e <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f46:	6f 81       	ldd	r22, Y+7	; 0x07
    4f48:	78 85       	ldd	r23, Y+8	; 0x08
    4f4a:	89 85       	ldd	r24, Y+9	; 0x09
    4f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f52:	dc 01       	movw	r26, r24
    4f54:	cb 01       	movw	r24, r22
    4f56:	9e 83       	std	Y+6, r25	; 0x06
    4f58:	8d 83       	std	Y+5, r24	; 0x05
    4f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5e:	9a 83       	std	Y+2, r25	; 0x02
    4f60:	89 83       	std	Y+1, r24	; 0x01
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	9a 81       	ldd	r25, Y+2	; 0x02
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	f1 f7       	brne	.-4      	; 0x4f66 <LCD_voidInit+0xbe0>
    4f6a:	9a 83       	std	Y+2, r25	; 0x02
    4f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    4f6e:	c4 57       	subi	r28, 0x74	; 116
    4f70:	df 4f       	sbci	r29, 0xFF	; 255
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	cf 91       	pop	r28
    4f7e:	df 91       	pop	r29
    4f80:	1f 91       	pop	r17
    4f82:	0f 91       	pop	r16
    4f84:	08 95       	ret

00004f86 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62
    4f8e:	2f 97       	sbiw	r28, 0x0f	; 15
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	de bf       	out	0x3e, r29	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	cd bf       	out	0x3d, r28	; 61
    4f9a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	63 e0       	ldi	r22, 0x03	; 3
    4fa0:	40 e0       	ldi	r20, 0x00	; 0
    4fa2:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	62 e0       	ldi	r22, 0x02	; 2
    4faa:	41 e0       	ldi	r20, 0x01	; 1
    4fac:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    4fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fb2:	82 95       	swap	r24
    4fb4:	8f 70       	andi	r24, 0x0F	; 15
    4fb6:	98 2f       	mov	r25, r24
    4fb8:	91 70       	andi	r25, 0x01	; 1
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	49 2f       	mov	r20, r25
    4fc0:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    4fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fc6:	82 95       	swap	r24
    4fc8:	86 95       	lsr	r24
    4fca:	87 70       	andi	r24, 0x07	; 7
    4fcc:	98 2f       	mov	r25, r24
    4fce:	91 70       	andi	r25, 0x01	; 1
    4fd0:	82 e0       	ldi	r24, 0x02	; 2
    4fd2:	61 e0       	ldi	r22, 0x01	; 1
    4fd4:	49 2f       	mov	r20, r25
    4fd6:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    4fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fdc:	82 95       	swap	r24
    4fde:	86 95       	lsr	r24
    4fe0:	86 95       	lsr	r24
    4fe2:	83 70       	andi	r24, 0x03	; 3
    4fe4:	98 2f       	mov	r25, r24
    4fe6:	91 70       	andi	r25, 0x01	; 1
    4fe8:	82 e0       	ldi	r24, 0x02	; 2
    4fea:	62 e0       	ldi	r22, 0x02	; 2
    4fec:	49 2f       	mov	r20, r25
    4fee:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    4ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ff4:	98 2f       	mov	r25, r24
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	99 27       	eor	r25, r25
    4ffa:	99 1f       	adc	r25, r25
    4ffc:	82 e0       	ldi	r24, 0x02	; 2
    4ffe:	64 e0       	ldi	r22, 0x04	; 4
    5000:	49 2f       	mov	r20, r25
    5002:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	62 e0       	ldi	r22, 0x02	; 2
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	62 e0       	ldi	r22, 0x02	; 2
    5014:	41 e0       	ldi	r20, 0x01	; 1
    5016:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    501a:	8f 85       	ldd	r24, Y+15	; 0x0f
    501c:	98 2f       	mov	r25, r24
    501e:	91 70       	andi	r25, 0x01	; 1
    5020:	82 e0       	ldi	r24, 0x02	; 2
    5022:	60 e0       	ldi	r22, 0x00	; 0
    5024:	49 2f       	mov	r20, r25
    5026:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    502a:	8f 85       	ldd	r24, Y+15	; 0x0f
    502c:	86 95       	lsr	r24
    502e:	98 2f       	mov	r25, r24
    5030:	91 70       	andi	r25, 0x01	; 1
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	61 e0       	ldi	r22, 0x01	; 1
    5036:	49 2f       	mov	r20, r25
    5038:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    503c:	8f 85       	ldd	r24, Y+15	; 0x0f
    503e:	86 95       	lsr	r24
    5040:	86 95       	lsr	r24
    5042:	98 2f       	mov	r25, r24
    5044:	91 70       	andi	r25, 0x01	; 1
    5046:	82 e0       	ldi	r24, 0x02	; 2
    5048:	62 e0       	ldi	r22, 0x02	; 2
    504a:	49 2f       	mov	r20, r25
    504c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    5050:	8f 85       	ldd	r24, Y+15	; 0x0f
    5052:	86 95       	lsr	r24
    5054:	86 95       	lsr	r24
    5056:	86 95       	lsr	r24
    5058:	98 2f       	mov	r25, r24
    505a:	91 70       	andi	r25, 0x01	; 1
    505c:	82 e0       	ldi	r24, 0x02	; 2
    505e:	64 e0       	ldi	r22, 0x04	; 4
    5060:	49 2f       	mov	r20, r25
    5062:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	62 e0       	ldi	r22, 0x02	; 2
    506a:	40 e0       	ldi	r20, 0x00	; 0
    506c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    5070:	80 e0       	ldi	r24, 0x00	; 0
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	a0 ea       	ldi	r26, 0xA0	; 160
    5076:	b0 e4       	ldi	r27, 0x40	; 64
    5078:	8b 87       	std	Y+11, r24	; 0x0b
    507a:	9c 87       	std	Y+12, r25	; 0x0c
    507c:	ad 87       	std	Y+13, r26	; 0x0d
    507e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5080:	6b 85       	ldd	r22, Y+11	; 0x0b
    5082:	7c 85       	ldd	r23, Y+12	; 0x0c
    5084:	8d 85       	ldd	r24, Y+13	; 0x0d
    5086:	9e 85       	ldd	r25, Y+14	; 0x0e
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	4a e7       	ldi	r20, 0x7A	; 122
    508e:	55 e4       	ldi	r21, 0x45	; 69
    5090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	8f 83       	std	Y+7, r24	; 0x07
    509a:	98 87       	std	Y+8, r25	; 0x08
    509c:	a9 87       	std	Y+9, r26	; 0x09
    509e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50a0:	6f 81       	ldd	r22, Y+7	; 0x07
    50a2:	78 85       	ldd	r23, Y+8	; 0x08
    50a4:	89 85       	ldd	r24, Y+9	; 0x09
    50a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	40 e8       	ldi	r20, 0x80	; 128
    50ae:	5f e3       	ldi	r21, 0x3F	; 63
    50b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50b4:	88 23       	and	r24, r24
    50b6:	2c f4       	brge	.+10     	; 0x50c2 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    50b8:	81 e0       	ldi	r24, 0x01	; 1
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	9e 83       	std	Y+6, r25	; 0x06
    50be:	8d 83       	std	Y+5, r24	; 0x05
    50c0:	3f c0       	rjmp	.+126    	; 0x5140 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    50c2:	6f 81       	ldd	r22, Y+7	; 0x07
    50c4:	78 85       	ldd	r23, Y+8	; 0x08
    50c6:	89 85       	ldd	r24, Y+9	; 0x09
    50c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	3f ef       	ldi	r19, 0xFF	; 255
    50ce:	4f e7       	ldi	r20, 0x7F	; 127
    50d0:	57 e4       	ldi	r21, 0x47	; 71
    50d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50d6:	18 16       	cp	r1, r24
    50d8:	4c f5       	brge	.+82     	; 0x512c <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50da:	6b 85       	ldd	r22, Y+11	; 0x0b
    50dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    50de:	8d 85       	ldd	r24, Y+13	; 0x0d
    50e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	40 e2       	ldi	r20, 0x20	; 32
    50e8:	51 e4       	ldi	r21, 0x41	; 65
    50ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	bc 01       	movw	r22, r24
    50f4:	cd 01       	movw	r24, r26
    50f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50fa:	dc 01       	movw	r26, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	9e 83       	std	Y+6, r25	; 0x06
    5100:	8d 83       	std	Y+5, r24	; 0x05
    5102:	0f c0       	rjmp	.+30     	; 0x5122 <LCD_voidSendCommand+0x19c>
    5104:	80 e9       	ldi	r24, 0x90	; 144
    5106:	91 e0       	ldi	r25, 0x01	; 1
    5108:	9c 83       	std	Y+4, r25	; 0x04
    510a:	8b 83       	std	Y+3, r24	; 0x03
    510c:	8b 81       	ldd	r24, Y+3	; 0x03
    510e:	9c 81       	ldd	r25, Y+4	; 0x04
    5110:	01 97       	sbiw	r24, 0x01	; 1
    5112:	f1 f7       	brne	.-4      	; 0x5110 <LCD_voidSendCommand+0x18a>
    5114:	9c 83       	std	Y+4, r25	; 0x04
    5116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5118:	8d 81       	ldd	r24, Y+5	; 0x05
    511a:	9e 81       	ldd	r25, Y+6	; 0x06
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	9e 83       	std	Y+6, r25	; 0x06
    5120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5122:	8d 81       	ldd	r24, Y+5	; 0x05
    5124:	9e 81       	ldd	r25, Y+6	; 0x06
    5126:	00 97       	sbiw	r24, 0x00	; 0
    5128:	69 f7       	brne	.-38     	; 0x5104 <LCD_voidSendCommand+0x17e>
    512a:	14 c0       	rjmp	.+40     	; 0x5154 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    512c:	6f 81       	ldd	r22, Y+7	; 0x07
    512e:	78 85       	ldd	r23, Y+8	; 0x08
    5130:	89 85       	ldd	r24, Y+9	; 0x09
    5132:	9a 85       	ldd	r25, Y+10	; 0x0a
    5134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	9e 83       	std	Y+6, r25	; 0x06
    513e:	8d 83       	std	Y+5, r24	; 0x05
    5140:	8d 81       	ldd	r24, Y+5	; 0x05
    5142:	9e 81       	ldd	r25, Y+6	; 0x06
    5144:	9a 83       	std	Y+2, r25	; 0x02
    5146:	89 83       	std	Y+1, r24	; 0x01
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	9a 81       	ldd	r25, Y+2	; 0x02
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <LCD_voidSendCommand+0x1c6>
    5150:	9a 83       	std	Y+2, r25	; 0x02
    5152:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    5154:	2f 96       	adiw	r28, 0x0f	; 15
    5156:	0f b6       	in	r0, 0x3f	; 63
    5158:	f8 94       	cli
    515a:	de bf       	out	0x3e, r29	; 62
    515c:	0f be       	out	0x3f, r0	; 63
    515e:	cd bf       	out	0x3d, r28	; 61
    5160:	cf 91       	pop	r28
    5162:	df 91       	pop	r29
    5164:	08 95       	ret

00005166 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    5166:	df 93       	push	r29
    5168:	cf 93       	push	r28
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	2f 97       	sbiw	r28, 0x0f	; 15
    5170:	0f b6       	in	r0, 0x3f	; 63
    5172:	f8 94       	cli
    5174:	de bf       	out	0x3e, r29	; 62
    5176:	0f be       	out	0x3f, r0	; 63
    5178:	cd bf       	out	0x3d, r28	; 61
    517a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	63 e0       	ldi	r22, 0x03	; 3
    5180:	40 e0       	ldi	r20, 0x00	; 0
    5182:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	62 e0       	ldi	r22, 0x02	; 2
    518a:	41 e0       	ldi	r20, 0x01	; 1
    518c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    5190:	8f 85       	ldd	r24, Y+15	; 0x0f
    5192:	82 95       	swap	r24
    5194:	8f 70       	andi	r24, 0x0F	; 15
    5196:	98 2f       	mov	r25, r24
    5198:	91 70       	andi	r25, 0x01	; 1
    519a:	82 e0       	ldi	r24, 0x02	; 2
    519c:	60 e0       	ldi	r22, 0x00	; 0
    519e:	49 2f       	mov	r20, r25
    51a0:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    51a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51a6:	82 95       	swap	r24
    51a8:	86 95       	lsr	r24
    51aa:	87 70       	andi	r24, 0x07	; 7
    51ac:	98 2f       	mov	r25, r24
    51ae:	91 70       	andi	r25, 0x01	; 1
    51b0:	82 e0       	ldi	r24, 0x02	; 2
    51b2:	61 e0       	ldi	r22, 0x01	; 1
    51b4:	49 2f       	mov	r20, r25
    51b6:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    51ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    51bc:	82 95       	swap	r24
    51be:	86 95       	lsr	r24
    51c0:	86 95       	lsr	r24
    51c2:	83 70       	andi	r24, 0x03	; 3
    51c4:	98 2f       	mov	r25, r24
    51c6:	91 70       	andi	r25, 0x01	; 1
    51c8:	82 e0       	ldi	r24, 0x02	; 2
    51ca:	62 e0       	ldi	r22, 0x02	; 2
    51cc:	49 2f       	mov	r20, r25
    51ce:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    51d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    51d4:	98 2f       	mov	r25, r24
    51d6:	99 1f       	adc	r25, r25
    51d8:	99 27       	eor	r25, r25
    51da:	99 1f       	adc	r25, r25
    51dc:	82 e0       	ldi	r24, 0x02	; 2
    51de:	64 e0       	ldi	r22, 0x04	; 4
    51e0:	49 2f       	mov	r20, r25
    51e2:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	62 e0       	ldi	r22, 0x02	; 2
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	a0 ea       	ldi	r26, 0xA0	; 160
    51f6:	b0 e4       	ldi	r27, 0x40	; 64
    51f8:	8b 87       	std	Y+11, r24	; 0x0b
    51fa:	9c 87       	std	Y+12, r25	; 0x0c
    51fc:	ad 87       	std	Y+13, r26	; 0x0d
    51fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5200:	6b 85       	ldd	r22, Y+11	; 0x0b
    5202:	7c 85       	ldd	r23, Y+12	; 0x0c
    5204:	8d 85       	ldd	r24, Y+13	; 0x0d
    5206:	9e 85       	ldd	r25, Y+14	; 0x0e
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	4a e7       	ldi	r20, 0x7A	; 122
    520e:	55 e4       	ldi	r21, 0x45	; 69
    5210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5214:	dc 01       	movw	r26, r24
    5216:	cb 01       	movw	r24, r22
    5218:	8f 83       	std	Y+7, r24	; 0x07
    521a:	98 87       	std	Y+8, r25	; 0x08
    521c:	a9 87       	std	Y+9, r26	; 0x09
    521e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5220:	6f 81       	ldd	r22, Y+7	; 0x07
    5222:	78 85       	ldd	r23, Y+8	; 0x08
    5224:	89 85       	ldd	r24, Y+9	; 0x09
    5226:	9a 85       	ldd	r25, Y+10	; 0x0a
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	40 e8       	ldi	r20, 0x80	; 128
    522e:	5f e3       	ldi	r21, 0x3F	; 63
    5230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5234:	88 23       	and	r24, r24
    5236:	2c f4       	brge	.+10     	; 0x5242 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	9e 83       	std	Y+6, r25	; 0x06
    523e:	8d 83       	std	Y+5, r24	; 0x05
    5240:	3f c0       	rjmp	.+126    	; 0x52c0 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    5242:	6f 81       	ldd	r22, Y+7	; 0x07
    5244:	78 85       	ldd	r23, Y+8	; 0x08
    5246:	89 85       	ldd	r24, Y+9	; 0x09
    5248:	9a 85       	ldd	r25, Y+10	; 0x0a
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	3f ef       	ldi	r19, 0xFF	; 255
    524e:	4f e7       	ldi	r20, 0x7F	; 127
    5250:	57 e4       	ldi	r21, 0x47	; 71
    5252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5256:	18 16       	cp	r1, r24
    5258:	4c f5       	brge	.+82     	; 0x52ac <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    525a:	6b 85       	ldd	r22, Y+11	; 0x0b
    525c:	7c 85       	ldd	r23, Y+12	; 0x0c
    525e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5260:	9e 85       	ldd	r25, Y+14	; 0x0e
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e2       	ldi	r20, 0x20	; 32
    5268:	51 e4       	ldi	r21, 0x41	; 65
    526a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	bc 01       	movw	r22, r24
    5274:	cd 01       	movw	r24, r26
    5276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527a:	dc 01       	movw	r26, r24
    527c:	cb 01       	movw	r24, r22
    527e:	9e 83       	std	Y+6, r25	; 0x06
    5280:	8d 83       	std	Y+5, r24	; 0x05
    5282:	0f c0       	rjmp	.+30     	; 0x52a2 <LCD_voidSendInitCommand+0x13c>
    5284:	80 e9       	ldi	r24, 0x90	; 144
    5286:	91 e0       	ldi	r25, 0x01	; 1
    5288:	9c 83       	std	Y+4, r25	; 0x04
    528a:	8b 83       	std	Y+3, r24	; 0x03
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	9c 81       	ldd	r25, Y+4	; 0x04
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	f1 f7       	brne	.-4      	; 0x5290 <LCD_voidSendInitCommand+0x12a>
    5294:	9c 83       	std	Y+4, r25	; 0x04
    5296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5298:	8d 81       	ldd	r24, Y+5	; 0x05
    529a:	9e 81       	ldd	r25, Y+6	; 0x06
    529c:	01 97       	sbiw	r24, 0x01	; 1
    529e:	9e 83       	std	Y+6, r25	; 0x06
    52a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52a2:	8d 81       	ldd	r24, Y+5	; 0x05
    52a4:	9e 81       	ldd	r25, Y+6	; 0x06
    52a6:	00 97       	sbiw	r24, 0x00	; 0
    52a8:	69 f7       	brne	.-38     	; 0x5284 <LCD_voidSendInitCommand+0x11e>
    52aa:	14 c0       	rjmp	.+40     	; 0x52d4 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ac:	6f 81       	ldd	r22, Y+7	; 0x07
    52ae:	78 85       	ldd	r23, Y+8	; 0x08
    52b0:	89 85       	ldd	r24, Y+9	; 0x09
    52b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	9e 83       	std	Y+6, r25	; 0x06
    52be:	8d 83       	std	Y+5, r24	; 0x05
    52c0:	8d 81       	ldd	r24, Y+5	; 0x05
    52c2:	9e 81       	ldd	r25, Y+6	; 0x06
    52c4:	9a 83       	std	Y+2, r25	; 0x02
    52c6:	89 83       	std	Y+1, r24	; 0x01
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	9a 81       	ldd	r25, Y+2	; 0x02
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <LCD_voidSendInitCommand+0x166>
    52d0:	9a 83       	std	Y+2, r25	; 0x02
    52d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    52d4:	2f 96       	adiw	r28, 0x0f	; 15
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	f8 94       	cli
    52da:	de bf       	out	0x3e, r29	; 62
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	cd bf       	out	0x3d, r28	; 61
    52e0:	cf 91       	pop	r28
    52e2:	df 91       	pop	r29
    52e4:	08 95       	ret

000052e6 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    52e6:	df 93       	push	r29
    52e8:	cf 93       	push	r28
    52ea:	cd b7       	in	r28, 0x3d	; 61
    52ec:	de b7       	in	r29, 0x3e	; 62
    52ee:	2f 97       	sbiw	r28, 0x0f	; 15
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	f8 94       	cli
    52f4:	de bf       	out	0x3e, r29	; 62
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	cd bf       	out	0x3d, r28	; 61
    52fa:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	63 e0       	ldi	r22, 0x03	; 3
    5300:	41 e0       	ldi	r20, 0x01	; 1
    5302:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	62 e0       	ldi	r22, 0x02	; 2
    530a:	41 e0       	ldi	r20, 0x01	; 1
    530c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    5310:	8f 85       	ldd	r24, Y+15	; 0x0f
    5312:	82 95       	swap	r24
    5314:	8f 70       	andi	r24, 0x0F	; 15
    5316:	98 2f       	mov	r25, r24
    5318:	91 70       	andi	r25, 0x01	; 1
    531a:	82 e0       	ldi	r24, 0x02	; 2
    531c:	60 e0       	ldi	r22, 0x00	; 0
    531e:	49 2f       	mov	r20, r25
    5320:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    5324:	8f 85       	ldd	r24, Y+15	; 0x0f
    5326:	82 95       	swap	r24
    5328:	86 95       	lsr	r24
    532a:	87 70       	andi	r24, 0x07	; 7
    532c:	98 2f       	mov	r25, r24
    532e:	91 70       	andi	r25, 0x01	; 1
    5330:	82 e0       	ldi	r24, 0x02	; 2
    5332:	61 e0       	ldi	r22, 0x01	; 1
    5334:	49 2f       	mov	r20, r25
    5336:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    533a:	8f 85       	ldd	r24, Y+15	; 0x0f
    533c:	82 95       	swap	r24
    533e:	86 95       	lsr	r24
    5340:	86 95       	lsr	r24
    5342:	83 70       	andi	r24, 0x03	; 3
    5344:	98 2f       	mov	r25, r24
    5346:	91 70       	andi	r25, 0x01	; 1
    5348:	82 e0       	ldi	r24, 0x02	; 2
    534a:	62 e0       	ldi	r22, 0x02	; 2
    534c:	49 2f       	mov	r20, r25
    534e:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    5352:	8f 85       	ldd	r24, Y+15	; 0x0f
    5354:	98 2f       	mov	r25, r24
    5356:	99 1f       	adc	r25, r25
    5358:	99 27       	eor	r25, r25
    535a:	99 1f       	adc	r25, r25
    535c:	82 e0       	ldi	r24, 0x02	; 2
    535e:	64 e0       	ldi	r22, 0x04	; 4
    5360:	49 2f       	mov	r20, r25
    5362:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	62 e0       	ldi	r22, 0x02	; 2
    536a:	40 e0       	ldi	r20, 0x00	; 0
    536c:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	62 e0       	ldi	r22, 0x02	; 2
    5374:	41 e0       	ldi	r20, 0x01	; 1
    5376:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    537a:	8f 85       	ldd	r24, Y+15	; 0x0f
    537c:	98 2f       	mov	r25, r24
    537e:	91 70       	andi	r25, 0x01	; 1
    5380:	82 e0       	ldi	r24, 0x02	; 2
    5382:	60 e0       	ldi	r22, 0x00	; 0
    5384:	49 2f       	mov	r20, r25
    5386:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    538a:	8f 85       	ldd	r24, Y+15	; 0x0f
    538c:	86 95       	lsr	r24
    538e:	98 2f       	mov	r25, r24
    5390:	91 70       	andi	r25, 0x01	; 1
    5392:	82 e0       	ldi	r24, 0x02	; 2
    5394:	61 e0       	ldi	r22, 0x01	; 1
    5396:	49 2f       	mov	r20, r25
    5398:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    539c:	8f 85       	ldd	r24, Y+15	; 0x0f
    539e:	86 95       	lsr	r24
    53a0:	86 95       	lsr	r24
    53a2:	98 2f       	mov	r25, r24
    53a4:	91 70       	andi	r25, 0x01	; 1
    53a6:	82 e0       	ldi	r24, 0x02	; 2
    53a8:	62 e0       	ldi	r22, 0x02	; 2
    53aa:	49 2f       	mov	r20, r25
    53ac:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    53b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    53b2:	86 95       	lsr	r24
    53b4:	86 95       	lsr	r24
    53b6:	86 95       	lsr	r24
    53b8:	98 2f       	mov	r25, r24
    53ba:	91 70       	andi	r25, 0x01	; 1
    53bc:	82 e0       	ldi	r24, 0x02	; 2
    53be:	64 e0       	ldi	r22, 0x04	; 4
    53c0:	49 2f       	mov	r20, r25
    53c2:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	62 e0       	ldi	r22, 0x02	; 2
    53ca:	40 e0       	ldi	r20, 0x00	; 0
    53cc:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	a0 ea       	ldi	r26, 0xA0	; 160
    53d6:	b0 e4       	ldi	r27, 0x40	; 64
    53d8:	8b 87       	std	Y+11, r24	; 0x0b
    53da:	9c 87       	std	Y+12, r25	; 0x0c
    53dc:	ad 87       	std	Y+13, r26	; 0x0d
    53de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    53e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    53e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	4a e7       	ldi	r20, 0x7A	; 122
    53ee:	55 e4       	ldi	r21, 0x45	; 69
    53f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f4:	dc 01       	movw	r26, r24
    53f6:	cb 01       	movw	r24, r22
    53f8:	8f 83       	std	Y+7, r24	; 0x07
    53fa:	98 87       	std	Y+8, r25	; 0x08
    53fc:	a9 87       	std	Y+9, r26	; 0x09
    53fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5400:	6f 81       	ldd	r22, Y+7	; 0x07
    5402:	78 85       	ldd	r23, Y+8	; 0x08
    5404:	89 85       	ldd	r24, Y+9	; 0x09
    5406:	9a 85       	ldd	r25, Y+10	; 0x0a
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	40 e8       	ldi	r20, 0x80	; 128
    540e:	5f e3       	ldi	r21, 0x3F	; 63
    5410:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5414:	88 23       	and	r24, r24
    5416:	2c f4       	brge	.+10     	; 0x5422 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	9e 83       	std	Y+6, r25	; 0x06
    541e:	8d 83       	std	Y+5, r24	; 0x05
    5420:	3f c0       	rjmp	.+126    	; 0x54a0 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    5422:	6f 81       	ldd	r22, Y+7	; 0x07
    5424:	78 85       	ldd	r23, Y+8	; 0x08
    5426:	89 85       	ldd	r24, Y+9	; 0x09
    5428:	9a 85       	ldd	r25, Y+10	; 0x0a
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	3f ef       	ldi	r19, 0xFF	; 255
    542e:	4f e7       	ldi	r20, 0x7F	; 127
    5430:	57 e4       	ldi	r21, 0x47	; 71
    5432:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5436:	18 16       	cp	r1, r24
    5438:	4c f5       	brge	.+82     	; 0x548c <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    543a:	6b 85       	ldd	r22, Y+11	; 0x0b
    543c:	7c 85       	ldd	r23, Y+12	; 0x0c
    543e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5440:	9e 85       	ldd	r25, Y+14	; 0x0e
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	40 e2       	ldi	r20, 0x20	; 32
    5448:	51 e4       	ldi	r21, 0x41	; 65
    544a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	bc 01       	movw	r22, r24
    5454:	cd 01       	movw	r24, r26
    5456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	9e 83       	std	Y+6, r25	; 0x06
    5460:	8d 83       	std	Y+5, r24	; 0x05
    5462:	0f c0       	rjmp	.+30     	; 0x5482 <LCD_voidWriteChar+0x19c>
    5464:	80 e9       	ldi	r24, 0x90	; 144
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	9c 83       	std	Y+4, r25	; 0x04
    546a:	8b 83       	std	Y+3, r24	; 0x03
    546c:	8b 81       	ldd	r24, Y+3	; 0x03
    546e:	9c 81       	ldd	r25, Y+4	; 0x04
    5470:	01 97       	sbiw	r24, 0x01	; 1
    5472:	f1 f7       	brne	.-4      	; 0x5470 <LCD_voidWriteChar+0x18a>
    5474:	9c 83       	std	Y+4, r25	; 0x04
    5476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5478:	8d 81       	ldd	r24, Y+5	; 0x05
    547a:	9e 81       	ldd	r25, Y+6	; 0x06
    547c:	01 97       	sbiw	r24, 0x01	; 1
    547e:	9e 83       	std	Y+6, r25	; 0x06
    5480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5482:	8d 81       	ldd	r24, Y+5	; 0x05
    5484:	9e 81       	ldd	r25, Y+6	; 0x06
    5486:	00 97       	sbiw	r24, 0x00	; 0
    5488:	69 f7       	brne	.-38     	; 0x5464 <LCD_voidWriteChar+0x17e>
    548a:	14 c0       	rjmp	.+40     	; 0x54b4 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    548c:	6f 81       	ldd	r22, Y+7	; 0x07
    548e:	78 85       	ldd	r23, Y+8	; 0x08
    5490:	89 85       	ldd	r24, Y+9	; 0x09
    5492:	9a 85       	ldd	r25, Y+10	; 0x0a
    5494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5498:	dc 01       	movw	r26, r24
    549a:	cb 01       	movw	r24, r22
    549c:	9e 83       	std	Y+6, r25	; 0x06
    549e:	8d 83       	std	Y+5, r24	; 0x05
    54a0:	8d 81       	ldd	r24, Y+5	; 0x05
    54a2:	9e 81       	ldd	r25, Y+6	; 0x06
    54a4:	9a 83       	std	Y+2, r25	; 0x02
    54a6:	89 83       	std	Y+1, r24	; 0x01
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	9a 81       	ldd	r25, Y+2	; 0x02
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	f1 f7       	brne	.-4      	; 0x54ac <LCD_voidWriteChar+0x1c6>
    54b0:	9a 83       	std	Y+2, r25	; 0x02
    54b2:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    54b4:	2f 96       	adiw	r28, 0x0f	; 15
    54b6:	0f b6       	in	r0, 0x3f	; 63
    54b8:	f8 94       	cli
    54ba:	de bf       	out	0x3e, r29	; 62
    54bc:	0f be       	out	0x3f, r0	; 63
    54be:	cd bf       	out	0x3d, r28	; 61
    54c0:	cf 91       	pop	r28
    54c2:	df 91       	pop	r29
    54c4:	08 95       	ret

000054c6 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    54c6:	df 93       	push	r29
    54c8:	cf 93       	push	r28
    54ca:	00 d0       	rcall	.+0      	; 0x54cc <LCD_voidWriteString+0x6>
    54cc:	0f 92       	push	r0
    54ce:	cd b7       	in	r28, 0x3d	; 61
    54d0:	de b7       	in	r29, 0x3e	; 62
    54d2:	9b 83       	std	Y+3, r25	; 0x03
    54d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    54d6:	19 82       	std	Y+1, r1	; 0x01
    54d8:	0e c0       	rjmp	.+28     	; 0x54f6 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    54da:	89 81       	ldd	r24, Y+1	; 0x01
    54dc:	28 2f       	mov	r18, r24
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	8a 81       	ldd	r24, Y+2	; 0x02
    54e2:	9b 81       	ldd	r25, Y+3	; 0x03
    54e4:	fc 01       	movw	r30, r24
    54e6:	e2 0f       	add	r30, r18
    54e8:	f3 1f       	adc	r31, r19
    54ea:	80 81       	ld	r24, Z
    54ec:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
		index++;
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	8f 5f       	subi	r24, 0xFF	; 255
    54f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	28 2f       	mov	r18, r24
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	8a 81       	ldd	r24, Y+2	; 0x02
    54fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5500:	fc 01       	movw	r30, r24
    5502:	e2 0f       	add	r30, r18
    5504:	f3 1f       	adc	r31, r19
    5506:	80 81       	ld	r24, Z
    5508:	88 23       	and	r24, r24
    550a:	39 f7       	brne	.-50     	; 0x54da <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	cf 91       	pop	r28
    5514:	df 91       	pop	r29
    5516:	08 95       	ret

00005518 <IntToString>:

static u8* IntToString(s32 anInteger,u8 *str){
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	df 93       	push	r29
    551e:	cf 93       	push	r28
    5520:	cd b7       	in	r28, 0x3d	; 61
    5522:	de b7       	in	r29, 0x3e	; 62
    5524:	2e 97       	sbiw	r28, 0x0e	; 14
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	f8 94       	cli
    552a:	de bf       	out	0x3e, r29	; 62
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	cd bf       	out	0x3d, r28	; 61
    5530:	69 87       	std	Y+9, r22	; 0x09
    5532:	7a 87       	std	Y+10, r23	; 0x0a
    5534:	8b 87       	std	Y+11, r24	; 0x0b
    5536:	9c 87       	std	Y+12, r25	; 0x0c
    5538:	5e 87       	std	Y+14, r21	; 0x0e
    553a:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    553c:	1d 82       	std	Y+5, r1	; 0x05
    553e:	1e 82       	std	Y+6, r1	; 0x06
    5540:	1f 82       	std	Y+7, r1	; 0x07
    5542:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    5544:	83 e1       	ldi	r24, 0x13	; 19
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	a0 e0       	ldi	r26, 0x00	; 0
    554a:	b0 e0       	ldi	r27, 0x00	; 0
    554c:	89 83       	std	Y+1, r24	; 0x01
    554e:	9a 83       	std	Y+2, r25	; 0x02
    5550:	ab 83       	std	Y+3, r26	; 0x03
    5552:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    5554:	29 81       	ldd	r18, Y+1	; 0x01
    5556:	3a 81       	ldd	r19, Y+2	; 0x02
    5558:	8d 85       	ldd	r24, Y+13	; 0x0d
    555a:	9e 85       	ldd	r25, Y+14	; 0x0e
    555c:	fc 01       	movw	r30, r24
    555e:	e2 0f       	add	r30, r18
    5560:	f3 1f       	adc	r31, r19
    5562:	10 82       	st	Z, r1
    5564:	89 81       	ldd	r24, Y+1	; 0x01
    5566:	9a 81       	ldd	r25, Y+2	; 0x02
    5568:	ab 81       	ldd	r26, Y+3	; 0x03
    556a:	bc 81       	ldd	r27, Y+4	; 0x04
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	a1 09       	sbc	r26, r1
    5570:	b1 09       	sbc	r27, r1
    5572:	89 83       	std	Y+1, r24	; 0x01
    5574:	9a 83       	std	Y+2, r25	; 0x02
    5576:	ab 83       	std	Y+3, r26	; 0x03
    5578:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    557a:	89 85       	ldd	r24, Y+9	; 0x09
    557c:	9a 85       	ldd	r25, Y+10	; 0x0a
    557e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5580:	bc 85       	ldd	r27, Y+12	; 0x0c
    5582:	bb 23       	and	r27, r27
    5584:	0c f0       	brlt	.+2      	; 0x5588 <IntToString+0x70>
    5586:	4d c0       	rjmp	.+154    	; 0x5622 <IntToString+0x10a>
		flag = 1;
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	a0 e0       	ldi	r26, 0x00	; 0
    558e:	b0 e0       	ldi	r27, 0x00	; 0
    5590:	8d 83       	std	Y+5, r24	; 0x05
    5592:	9e 83       	std	Y+6, r25	; 0x06
    5594:	af 83       	std	Y+7, r26	; 0x07
    5596:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    5598:	89 85       	ldd	r24, Y+9	; 0x09
    559a:	9a 85       	ldd	r25, Y+10	; 0x0a
    559c:	ab 85       	ldd	r26, Y+11	; 0x0b
    559e:	bc 85       	ldd	r27, Y+12	; 0x0c
    55a0:	b0 95       	com	r27
    55a2:	a0 95       	com	r26
    55a4:	90 95       	com	r25
    55a6:	81 95       	neg	r24
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	af 4f       	sbci	r26, 0xFF	; 255
    55ac:	bf 4f       	sbci	r27, 0xFF	; 255
    55ae:	89 87       	std	Y+9, r24	; 0x09
    55b0:	9a 87       	std	Y+10, r25	; 0x0a
    55b2:	ab 87       	std	Y+11, r26	; 0x0b
    55b4:	bc 87       	std	Y+12, r27	; 0x0c
    55b6:	35 c0       	rjmp	.+106    	; 0x5622 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    55b8:	29 81       	ldd	r18, Y+1	; 0x01
    55ba:	3a 81       	ldd	r19, Y+2	; 0x02
    55bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    55be:	9e 85       	ldd	r25, Y+14	; 0x0e
    55c0:	8c 01       	movw	r16, r24
    55c2:	02 0f       	add	r16, r18
    55c4:	13 1f       	adc	r17, r19
    55c6:	89 85       	ldd	r24, Y+9	; 0x09
    55c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    55cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    55ce:	2a e0       	ldi	r18, 0x0A	; 10
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	40 e0       	ldi	r20, 0x00	; 0
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	bc 01       	movw	r22, r24
    55d8:	cd 01       	movw	r24, r26
    55da:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    55de:	dc 01       	movw	r26, r24
    55e0:	cb 01       	movw	r24, r22
    55e2:	80 5d       	subi	r24, 0xD0	; 208
    55e4:	f8 01       	movw	r30, r16
    55e6:	80 83       	st	Z, r24
    55e8:	89 81       	ldd	r24, Y+1	; 0x01
    55ea:	9a 81       	ldd	r25, Y+2	; 0x02
    55ec:	ab 81       	ldd	r26, Y+3	; 0x03
    55ee:	bc 81       	ldd	r27, Y+4	; 0x04
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	a1 09       	sbc	r26, r1
    55f4:	b1 09       	sbc	r27, r1
    55f6:	89 83       	std	Y+1, r24	; 0x01
    55f8:	9a 83       	std	Y+2, r25	; 0x02
    55fa:	ab 83       	std	Y+3, r26	; 0x03
    55fc:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    55fe:	89 85       	ldd	r24, Y+9	; 0x09
    5600:	9a 85       	ldd	r25, Y+10	; 0x0a
    5602:	ab 85       	ldd	r26, Y+11	; 0x0b
    5604:	bc 85       	ldd	r27, Y+12	; 0x0c
    5606:	2a e0       	ldi	r18, 0x0A	; 10
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	40 e0       	ldi	r20, 0x00	; 0
    560c:	50 e0       	ldi	r21, 0x00	; 0
    560e:	bc 01       	movw	r22, r24
    5610:	cd 01       	movw	r24, r26
    5612:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    5616:	da 01       	movw	r26, r20
    5618:	c9 01       	movw	r24, r18
    561a:	89 87       	std	Y+9, r24	; 0x09
    561c:	9a 87       	std	Y+10, r25	; 0x0a
    561e:	ab 87       	std	Y+11, r26	; 0x0b
    5620:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    5622:	89 85       	ldd	r24, Y+9	; 0x09
    5624:	9a 85       	ldd	r25, Y+10	; 0x0a
    5626:	ab 85       	ldd	r26, Y+11	; 0x0b
    5628:	bc 85       	ldd	r27, Y+12	; 0x0c
    562a:	00 97       	sbiw	r24, 0x00	; 0
    562c:	a1 05       	cpc	r26, r1
    562e:	b1 05       	cpc	r27, r1
    5630:	19 f6       	brne	.-122    	; 0x55b8 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    5632:	8d 81       	ldd	r24, Y+5	; 0x05
    5634:	9e 81       	ldd	r25, Y+6	; 0x06
    5636:	af 81       	ldd	r26, Y+7	; 0x07
    5638:	b8 85       	ldd	r27, Y+8	; 0x08
    563a:	00 97       	sbiw	r24, 0x00	; 0
    563c:	a1 05       	cpc	r26, r1
    563e:	b1 05       	cpc	r27, r1
    5640:	a1 f0       	breq	.+40     	; 0x566a <IntToString+0x152>
		str[i--] = '-';
    5642:	29 81       	ldd	r18, Y+1	; 0x01
    5644:	3a 81       	ldd	r19, Y+2	; 0x02
    5646:	8d 85       	ldd	r24, Y+13	; 0x0d
    5648:	9e 85       	ldd	r25, Y+14	; 0x0e
    564a:	fc 01       	movw	r30, r24
    564c:	e2 0f       	add	r30, r18
    564e:	f3 1f       	adc	r31, r19
    5650:	8d e2       	ldi	r24, 0x2D	; 45
    5652:	80 83       	st	Z, r24
    5654:	89 81       	ldd	r24, Y+1	; 0x01
    5656:	9a 81       	ldd	r25, Y+2	; 0x02
    5658:	ab 81       	ldd	r26, Y+3	; 0x03
    565a:	bc 81       	ldd	r27, Y+4	; 0x04
    565c:	01 97       	sbiw	r24, 0x01	; 1
    565e:	a1 09       	sbc	r26, r1
    5660:	b1 09       	sbc	r27, r1
    5662:	89 83       	std	Y+1, r24	; 0x01
    5664:	9a 83       	std	Y+2, r25	; 0x02
    5666:	ab 83       	std	Y+3, r26	; 0x03
    5668:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    566a:	89 81       	ldd	r24, Y+1	; 0x01
    566c:	9a 81       	ldd	r25, Y+2	; 0x02
    566e:	ab 81       	ldd	r26, Y+3	; 0x03
    5670:	bc 81       	ldd	r27, Y+4	; 0x04
    5672:	01 96       	adiw	r24, 0x01	; 1
    5674:	a1 1d       	adc	r26, r1
    5676:	b1 1d       	adc	r27, r1
    5678:	89 83       	std	Y+1, r24	; 0x01
    567a:	9a 83       	std	Y+2, r25	; 0x02
    567c:	ab 83       	std	Y+3, r26	; 0x03
    567e:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    5680:	29 81       	ldd	r18, Y+1	; 0x01
    5682:	3a 81       	ldd	r19, Y+2	; 0x02
    5684:	8d 85       	ldd	r24, Y+13	; 0x0d
    5686:	9e 85       	ldd	r25, Y+14	; 0x0e
    5688:	82 0f       	add	r24, r18
    568a:	93 1f       	adc	r25, r19

}
    568c:	2e 96       	adiw	r28, 0x0e	; 14
    568e:	0f b6       	in	r0, 0x3f	; 63
    5690:	f8 94       	cli
    5692:	de bf       	out	0x3e, r29	; 62
    5694:	0f be       	out	0x3f, r0	; 63
    5696:	cd bf       	out	0x3d, r28	; 61
    5698:	cf 91       	pop	r28
    569a:	df 91       	pop	r29
    569c:	1f 91       	pop	r17
    569e:	0f 91       	pop	r16
    56a0:	08 95       	ret

000056a2 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    56a2:	df 93       	push	r29
    56a4:	cf 93       	push	r28
    56a6:	cd b7       	in	r28, 0x3d	; 61
    56a8:	de b7       	in	r29, 0x3e	; 62
    56aa:	6a 97       	sbiw	r28, 0x1a	; 26
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	6f 8b       	std	Y+23, r22	; 0x17
    56b8:	78 8f       	std	Y+24, r23	; 0x18
    56ba:	89 8f       	std	Y+25, r24	; 0x19
    56bc:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    56be:	8f 89       	ldd	r24, Y+23	; 0x17
    56c0:	98 8d       	ldd	r25, Y+24	; 0x18
    56c2:	a9 8d       	ldd	r26, Y+25	; 0x19
    56c4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    56c6:	00 97       	sbiw	r24, 0x00	; 0
    56c8:	a1 05       	cpc	r26, r1
    56ca:	b1 05       	cpc	r27, r1
    56cc:	99 f0       	breq	.+38     	; 0x56f4 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    56ce:	8f 89       	ldd	r24, Y+23	; 0x17
    56d0:	98 8d       	ldd	r25, Y+24	; 0x18
    56d2:	a9 8d       	ldd	r26, Y+25	; 0x19
    56d4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    56d6:	9e 01       	movw	r18, r28
    56d8:	2d 5f       	subi	r18, 0xFD	; 253
    56da:	3f 4f       	sbci	r19, 0xFF	; 255
    56dc:	bc 01       	movw	r22, r24
    56de:	cd 01       	movw	r24, r26
    56e0:	a9 01       	movw	r20, r18
    56e2:	0e 94 8c 2a 	call	0x5518	; 0x5518 <IntToString>
    56e6:	9a 83       	std	Y+2, r25	; 0x02
    56e8:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    56ea:	89 81       	ldd	r24, Y+1	; 0x01
    56ec:	9a 81       	ldd	r25, Y+2	; 0x02
    56ee:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
    56f2:	03 c0       	rjmp	.+6      	; 0x56fa <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    56f4:	80 e3       	ldi	r24, 0x30	; 48
    56f6:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
	}
}
    56fa:	6a 96       	adiw	r28, 0x1a	; 26
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	de bf       	out	0x3e, r29	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	cd bf       	out	0x3d, r28	; 61
    5706:	cf 91       	pop	r28
    5708:	df 91       	pop	r29
    570a:	08 95       	ret

0000570c <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    570c:	df 93       	push	r29
    570e:	cf 93       	push	r28
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
    5714:	a6 97       	sbiw	r28, 0x26	; 38
    5716:	0f b6       	in	r0, 0x3f	; 63
    5718:	f8 94       	cli
    571a:	de bf       	out	0x3e, r29	; 62
    571c:	0f be       	out	0x3f, r0	; 63
    571e:	cd bf       	out	0x3d, r28	; 61
    5720:	6b a3       	std	Y+35, r22	; 0x23
    5722:	7c a3       	std	Y+36, r23	; 0x24
    5724:	8d a3       	std	Y+37, r24	; 0x25
    5726:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    5728:	6b a1       	ldd	r22, Y+35	; 0x23
    572a:	7c a1       	ldd	r23, Y+36	; 0x24
    572c:	8d a1       	ldd	r24, Y+37	; 0x25
    572e:	9e a1       	ldd	r25, Y+38	; 0x26
    5730:	20 e0       	ldi	r18, 0x00	; 0
    5732:	30 e0       	ldi	r19, 0x00	; 0
    5734:	48 ec       	ldi	r20, 0xC8	; 200
    5736:	52 e4       	ldi	r21, 0x42	; 66
    5738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    573c:	dc 01       	movw	r26, r24
    573e:	cb 01       	movw	r24, r22
    5740:	bc 01       	movw	r22, r24
    5742:	cd 01       	movw	r24, r26
    5744:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	8b 87       	std	Y+11, r24	; 0x0b
    574e:	9c 87       	std	Y+12, r25	; 0x0c
    5750:	ad 87       	std	Y+13, r26	; 0x0d
    5752:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    5754:	8b 85       	ldd	r24, Y+11	; 0x0b
    5756:	9c 85       	ldd	r25, Y+12	; 0x0c
    5758:	ad 85       	ldd	r26, Y+13	; 0x0d
    575a:	be 85       	ldd	r27, Y+14	; 0x0e
    575c:	9e 01       	movw	r18, r28
    575e:	21 5f       	subi	r18, 0xF1	; 241
    5760:	3f 4f       	sbci	r19, 0xFF	; 255
    5762:	bc 01       	movw	r22, r24
    5764:	cd 01       	movw	r24, r26
    5766:	a9 01       	movw	r20, r18
    5768:	0e 94 8c 2a 	call	0x5518	; 0x5518 <IntToString>
    576c:	9a 87       	std	Y+10, r25	; 0x0a
    576e:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    5770:	1d 82       	std	Y+5, r1	; 0x05
    5772:	1e 82       	std	Y+6, r1	; 0x06
    5774:	1f 82       	std	Y+7, r1	; 0x07
    5776:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    5778:	19 82       	std	Y+1, r1	; 0x01
    577a:	1a 82       	std	Y+2, r1	; 0x02
    577c:	1b 82       	std	Y+3, r1	; 0x03
    577e:	1c 82       	std	Y+4, r1	; 0x04
    5780:	0b c0       	rjmp	.+22     	; 0x5798 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    5782:	8d 81       	ldd	r24, Y+5	; 0x05
    5784:	9e 81       	ldd	r25, Y+6	; 0x06
    5786:	af 81       	ldd	r26, Y+7	; 0x07
    5788:	b8 85       	ldd	r27, Y+8	; 0x08
    578a:	01 96       	adiw	r24, 0x01	; 1
    578c:	a1 1d       	adc	r26, r1
    578e:	b1 1d       	adc	r27, r1
    5790:	8d 83       	std	Y+5, r24	; 0x05
    5792:	9e 83       	std	Y+6, r25	; 0x06
    5794:	af 83       	std	Y+7, r26	; 0x07
    5796:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    5798:	2d 81       	ldd	r18, Y+5	; 0x05
    579a:	3e 81       	ldd	r19, Y+6	; 0x06
    579c:	89 85       	ldd	r24, Y+9	; 0x09
    579e:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a0:	fc 01       	movw	r30, r24
    57a2:	e2 0f       	add	r30, r18
    57a4:	f3 1f       	adc	r31, r19
    57a6:	80 81       	ld	r24, Z
    57a8:	88 23       	and	r24, r24
    57aa:	59 f7       	brne	.-42     	; 0x5782 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    57ac:	8d 81       	ldd	r24, Y+5	; 0x05
    57ae:	9e 81       	ldd	r25, Y+6	; 0x06
    57b0:	af 81       	ldd	r26, Y+7	; 0x07
    57b2:	b8 85       	ldd	r27, Y+8	; 0x08
    57b4:	02 97       	sbiw	r24, 0x02	; 2
    57b6:	a1 09       	sbc	r26, r1
    57b8:	b1 09       	sbc	r27, r1
    57ba:	8d 83       	std	Y+5, r24	; 0x05
    57bc:	9e 83       	std	Y+6, r25	; 0x06
    57be:	af 83       	std	Y+7, r26	; 0x07
    57c0:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    57c2:	8d 81       	ldd	r24, Y+5	; 0x05
    57c4:	9e 81       	ldd	r25, Y+6	; 0x06
    57c6:	af 81       	ldd	r26, Y+7	; 0x07
    57c8:	b8 85       	ldd	r27, Y+8	; 0x08
    57ca:	00 97       	sbiw	r24, 0x00	; 0
    57cc:	a1 05       	cpc	r26, r1
    57ce:	b1 05       	cpc	r27, r1
    57d0:	49 f5       	brne	.+82     	; 0x5824 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    57d2:	80 e3       	ldi	r24, 0x30	; 48
    57d4:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
    57d8:	25 c0       	rjmp	.+74     	; 0x5824 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    57da:	29 81       	ldd	r18, Y+1	; 0x01
    57dc:	3a 81       	ldd	r19, Y+2	; 0x02
    57de:	4b 81       	ldd	r20, Y+3	; 0x03
    57e0:	5c 81       	ldd	r21, Y+4	; 0x04
    57e2:	8d 81       	ldd	r24, Y+5	; 0x05
    57e4:	9e 81       	ldd	r25, Y+6	; 0x06
    57e6:	af 81       	ldd	r26, Y+7	; 0x07
    57e8:	b8 85       	ldd	r27, Y+8	; 0x08
    57ea:	28 17       	cp	r18, r24
    57ec:	39 07       	cpc	r19, r25
    57ee:	4a 07       	cpc	r20, r26
    57f0:	5b 07       	cpc	r21, r27
    57f2:	19 f4       	brne	.+6      	; 0x57fa <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    57f4:	8e e2       	ldi	r24, 0x2E	; 46
    57f6:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    57fa:	29 81       	ldd	r18, Y+1	; 0x01
    57fc:	3a 81       	ldd	r19, Y+2	; 0x02
    57fe:	89 85       	ldd	r24, Y+9	; 0x09
    5800:	9a 85       	ldd	r25, Y+10	; 0x0a
    5802:	fc 01       	movw	r30, r24
    5804:	e2 0f       	add	r30, r18
    5806:	f3 1f       	adc	r31, r19
    5808:	80 81       	ld	r24, Z
    580a:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
		counter2++;
    580e:	89 81       	ldd	r24, Y+1	; 0x01
    5810:	9a 81       	ldd	r25, Y+2	; 0x02
    5812:	ab 81       	ldd	r26, Y+3	; 0x03
    5814:	bc 81       	ldd	r27, Y+4	; 0x04
    5816:	01 96       	adiw	r24, 0x01	; 1
    5818:	a1 1d       	adc	r26, r1
    581a:	b1 1d       	adc	r27, r1
    581c:	89 83       	std	Y+1, r24	; 0x01
    581e:	9a 83       	std	Y+2, r25	; 0x02
    5820:	ab 83       	std	Y+3, r26	; 0x03
    5822:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    5824:	29 81       	ldd	r18, Y+1	; 0x01
    5826:	3a 81       	ldd	r19, Y+2	; 0x02
    5828:	89 85       	ldd	r24, Y+9	; 0x09
    582a:	9a 85       	ldd	r25, Y+10	; 0x0a
    582c:	fc 01       	movw	r30, r24
    582e:	e2 0f       	add	r30, r18
    5830:	f3 1f       	adc	r31, r19
    5832:	80 81       	ld	r24, Z
    5834:	88 23       	and	r24, r24
    5836:	89 f6       	brne	.-94     	; 0x57da <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    5838:	a6 96       	adiw	r28, 0x26	; 38
    583a:	0f b6       	in	r0, 0x3f	; 63
    583c:	f8 94       	cli
    583e:	de bf       	out	0x3e, r29	; 62
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	cd bf       	out	0x3d, r28	; 61
    5844:	cf 91       	pop	r28
    5846:	df 91       	pop	r29
    5848:	08 95       	ret

0000584a <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    584a:	df 93       	push	r29
    584c:	cf 93       	push	r28
    584e:	00 d0       	rcall	.+0      	; 0x5850 <LCD_voidGoToPosition+0x6>
    5850:	0f 92       	push	r0
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
    5856:	8a 83       	std	Y+2, r24	; 0x02
    5858:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    585a:	80 e8       	ldi	r24, 0x80	; 128
    585c:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    585e:	8a 81       	ldd	r24, Y+2	; 0x02
    5860:	88 23       	and	r24, r24
    5862:	21 f4       	brne	.+8      	; 0x586c <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    5864:	8b 81       	ldd	r24, Y+3	; 0x03
    5866:	80 58       	subi	r24, 0x80	; 128
    5868:	89 83       	std	Y+1, r24	; 0x01
    586a:	14 c0       	rjmp	.+40     	; 0x5894 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	81 30       	cpi	r24, 0x01	; 1
    5870:	21 f4       	brne	.+8      	; 0x587a <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    5872:	8b 81       	ldd	r24, Y+3	; 0x03
    5874:	80 54       	subi	r24, 0x40	; 64
    5876:	89 83       	std	Y+1, r24	; 0x01
    5878:	0d c0       	rjmp	.+26     	; 0x5894 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    587a:	8a 81       	ldd	r24, Y+2	; 0x02
    587c:	82 30       	cpi	r24, 0x02	; 2
    587e:	21 f4       	brne	.+8      	; 0x5888 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    5880:	8b 81       	ldd	r24, Y+3	; 0x03
    5882:	8c 56       	subi	r24, 0x6C	; 108
    5884:	89 83       	std	Y+1, r24	; 0x01
    5886:	06 c0       	rjmp	.+12     	; 0x5894 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    5888:	8a 81       	ldd	r24, Y+2	; 0x02
    588a:	83 30       	cpi	r24, 0x03	; 3
    588c:	19 f4       	brne	.+6      	; 0x5894 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    588e:	8b 81       	ldd	r24, Y+3	; 0x03
    5890:	8c 52       	subi	r24, 0x2C	; 44
    5892:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    5894:	89 81       	ldd	r24, Y+1	; 0x01
    5896:	80 68       	ori	r24, 0x80	; 128
    5898:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    589a:	89 81       	ldd	r24, Y+1	; 0x01
    589c:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
}
    58a0:	0f 90       	pop	r0
    58a2:	0f 90       	pop	r0
    58a4:	0f 90       	pop	r0
    58a6:	cf 91       	pop	r28
    58a8:	df 91       	pop	r29
    58aa:	08 95       	ret

000058ac <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    58ac:	df 93       	push	r29
    58ae:	cf 93       	push	r28
    58b0:	00 d0       	rcall	.+0      	; 0x58b2 <LCD_voidClearPosition+0x6>
    58b2:	cd b7       	in	r28, 0x3d	; 61
    58b4:	de b7       	in	r29, 0x3e	; 62
    58b6:	89 83       	std	Y+1, r24	; 0x01
    58b8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    58ba:	89 81       	ldd	r24, Y+1	; 0x01
    58bc:	6a 81       	ldd	r22, Y+2	; 0x02
    58be:	0e 94 25 2c 	call	0x584a	; 0x584a <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    58c2:	80 e2       	ldi	r24, 0x20	; 32
    58c4:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
}
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	08 95       	ret

000058d2 <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    58d2:	df 93       	push	r29
    58d4:	cf 93       	push	r28
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <LCD_voidClearLine+0x6>
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
    58dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    58de:	19 82       	std	Y+1, r1	; 0x01
    58e0:	07 c0       	rjmp	.+14     	; 0x58f0 <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	69 81       	ldd	r22, Y+1	; 0x01
    58e6:	0e 94 56 2c 	call	0x58ac	; 0x58ac <LCD_voidClearPosition>
		Y_Position++;
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	8f 5f       	subi	r24, 0xFF	; 255
    58ee:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    58f0:	89 81       	ldd	r24, Y+1	; 0x01
    58f2:	84 31       	cpi	r24, 0x14	; 20
    58f4:	b0 f3       	brcs	.-20     	; 0x58e2 <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    58f6:	0f 90       	pop	r0
    58f8:	0f 90       	pop	r0
    58fa:	cf 91       	pop	r28
    58fc:	df 91       	pop	r29
    58fe:	08 95       	ret

00005900 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    5900:	df 93       	push	r29
    5902:	cf 93       	push	r28
    5904:	cd b7       	in	r28, 0x3d	; 61
    5906:	de b7       	in	r29, 0x3e	; 62
    5908:	27 97       	sbiw	r28, 0x07	; 7
    590a:	0f b6       	in	r0, 0x3f	; 63
    590c:	f8 94       	cli
    590e:	de bf       	out	0x3e, r29	; 62
    5910:	0f be       	out	0x3f, r0	; 63
    5912:	cd bf       	out	0x3d, r28	; 61
    5914:	9c 83       	std	Y+4, r25	; 0x04
    5916:	8b 83       	std	Y+3, r24	; 0x03
    5918:	6d 83       	std	Y+5, r22	; 0x05
    591a:	4e 83       	std	Y+6, r20	; 0x06
    591c:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    591e:	8e 81       	ldd	r24, Y+6	; 0x06
    5920:	6f 81       	ldd	r22, Y+7	; 0x07
    5922:	0e 94 25 2c 	call	0x584a	; 0x584a <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    5926:	8d 81       	ldd	r24, Y+5	; 0x05
    5928:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
	u8 address = 0;
    592c:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    592e:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    5930:	8d 81       	ldd	r24, Y+5	; 0x05
    5932:	88 30       	cpi	r24, 0x08	; 8
    5934:	30 f5       	brcc	.+76     	; 0x5982 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    5936:	8d 81       	ldd	r24, Y+5	; 0x05
    5938:	88 2f       	mov	r24, r24
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	88 0f       	add	r24, r24
    593e:	99 1f       	adc	r25, r25
    5940:	88 0f       	add	r24, r24
    5942:	99 1f       	adc	r25, r25
    5944:	88 0f       	add	r24, r24
    5946:	99 1f       	adc	r25, r25
    5948:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    594a:	8a 81       	ldd	r24, Y+2	; 0x02
    594c:	80 64       	ori	r24, 0x40	; 64
    594e:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    5950:	8a 81       	ldd	r24, Y+2	; 0x02
    5952:	8f 77       	andi	r24, 0x7F	; 127
    5954:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    5956:	8a 81       	ldd	r24, Y+2	; 0x02
    5958:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    595c:	19 82       	std	Y+1, r1	; 0x01
    595e:	0e c0       	rjmp	.+28     	; 0x597c <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	28 2f       	mov	r18, r24
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	8b 81       	ldd	r24, Y+3	; 0x03
    5968:	9c 81       	ldd	r25, Y+4	; 0x04
    596a:	fc 01       	movw	r30, r24
    596c:	e2 0f       	add	r30, r18
    596e:	f3 1f       	adc	r31, r19
    5970:	80 81       	ld	r24, Z
    5972:	0e 94 73 29 	call	0x52e6	; 0x52e6 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	8f 5f       	subi	r24, 0xFF	; 255
    597a:	89 83       	std	Y+1, r24	; 0x01
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	88 30       	cpi	r24, 0x08	; 8
    5980:	78 f3       	brcs	.-34     	; 0x5960 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    5982:	82 e0       	ldi	r24, 0x02	; 2
    5984:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
}
    5988:	27 96       	adiw	r28, 0x07	; 7
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	cd bf       	out	0x3d, r28	; 61
    5994:	cf 91       	pop	r28
    5996:	df 91       	pop	r29
    5998:	08 95       	ret

0000599a <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    599a:	df 93       	push	r29
    599c:	cf 93       	push	r28
    599e:	cd b7       	in	r28, 0x3d	; 61
    59a0:	de b7       	in	r29, 0x3e	; 62
    59a2:	a1 97       	sbiw	r28, 0x21	; 33
    59a4:	0f b6       	in	r0, 0x3f	; 63
    59a6:	f8 94       	cli
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    59ae:	8f ef       	ldi	r24, 0xFF	; 255
    59b0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    59b2:	ce 01       	movw	r24, r28
    59b4:	04 96       	adiw	r24, 0x04	; 4
    59b6:	9e 8f       	std	Y+30, r25	; 0x1e
    59b8:	8d 8f       	std	Y+29, r24	; 0x1d
    59ba:	e9 ee       	ldi	r30, 0xE9	; 233
    59bc:	f1 e0       	ldi	r31, 0x01	; 1
    59be:	f8 a3       	std	Y+32, r31	; 0x20
    59c0:	ef 8f       	std	Y+31, r30	; 0x1f
    59c2:	f0 e1       	ldi	r31, 0x10	; 16
    59c4:	f9 a3       	std	Y+33, r31	; 0x21
    59c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    59c8:	f8 a1       	ldd	r31, Y+32	; 0x20
    59ca:	00 80       	ld	r0, Z
    59cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59ce:	98 a1       	ldd	r25, Y+32	; 0x20
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	98 a3       	std	Y+32, r25	; 0x20
    59d4:	8f 8f       	std	Y+31, r24	; 0x1f
    59d6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    59d8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    59da:	00 82       	st	Z, r0
    59dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e0:	01 96       	adiw	r24, 0x01	; 1
    59e2:	9e 8f       	std	Y+30, r25	; 0x1e
    59e4:	8d 8f       	std	Y+29, r24	; 0x1d
    59e6:	99 a1       	ldd	r25, Y+33	; 0x21
    59e8:	91 50       	subi	r25, 0x01	; 1
    59ea:	99 a3       	std	Y+33, r25	; 0x21
    59ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    59ee:	ee 23       	and	r30, r30
    59f0:	51 f7       	brne	.-44     	; 0x59c6 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    59f2:	87 e0       	ldi	r24, 0x07	; 7
    59f4:	8c 8b       	std	Y+20, r24	; 0x14
    59f6:	86 e0       	ldi	r24, 0x06	; 6
    59f8:	8d 8b       	std	Y+21, r24	; 0x15
    59fa:	85 e0       	ldi	r24, 0x05	; 5
    59fc:	8e 8b       	std	Y+22, r24	; 0x16
    59fe:	83 e0       	ldi	r24, 0x03	; 3
    5a00:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    5a02:	85 e0       	ldi	r24, 0x05	; 5
    5a04:	88 8f       	std	Y+24, r24	; 0x18
    5a06:	84 e0       	ldi	r24, 0x04	; 4
    5a08:	89 8f       	std	Y+25, r24	; 0x19
    5a0a:	83 e0       	ldi	r24, 0x03	; 3
    5a0c:	8a 8f       	std	Y+26, r24	; 0x1a
    5a0e:	82 e0       	ldi	r24, 0x02	; 2
    5a10:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    5a12:	1a 82       	std	Y+2, r1	; 0x02
    5a14:	6b c0       	rjmp	.+214    	; 0x5aec <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    5a16:	8a 81       	ldd	r24, Y+2	; 0x02
    5a18:	28 2f       	mov	r18, r24
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	ce 01       	movw	r24, r28
    5a1e:	44 96       	adiw	r24, 0x14	; 20
    5a20:	fc 01       	movw	r30, r24
    5a22:	e2 0f       	add	r30, r18
    5a24:	f3 1f       	adc	r31, r19
    5a26:	90 81       	ld	r25, Z
    5a28:	84 e0       	ldi	r24, 0x04	; 4
    5a2a:	69 2f       	mov	r22, r25
    5a2c:	40 e0       	ldi	r20, 0x00	; 0
    5a2e:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    5a32:	19 82       	std	Y+1, r1	; 0x01
    5a34:	46 c0       	rjmp	.+140    	; 0x5ac2 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    5a36:	89 81       	ldd	r24, Y+1	; 0x01
    5a38:	28 2f       	mov	r18, r24
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	ce 01       	movw	r24, r28
    5a3e:	48 96       	adiw	r24, 0x18	; 24
    5a40:	fc 01       	movw	r30, r24
    5a42:	e2 0f       	add	r30, r18
    5a44:	f3 1f       	adc	r31, r19
    5a46:	90 81       	ld	r25, Z
    5a48:	83 e0       	ldi	r24, 0x03	; 3
    5a4a:	69 2f       	mov	r22, r25
    5a4c:	0e 94 3f 12 	call	0x247e	; 0x247e <DIO_u8GetPinValue>
    5a50:	88 23       	and	r24, r24
    5a52:	a1 f5       	brne	.+104    	; 0x5abc <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	28 2f       	mov	r18, r24
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5c:	48 2f       	mov	r20, r24
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	22 0f       	add	r18, r18
    5a62:	33 1f       	adc	r19, r19
    5a64:	22 0f       	add	r18, r18
    5a66:	33 1f       	adc	r19, r19
    5a68:	ce 01       	movw	r24, r28
    5a6a:	01 96       	adiw	r24, 0x01	; 1
    5a6c:	82 0f       	add	r24, r18
    5a6e:	93 1f       	adc	r25, r19
    5a70:	84 0f       	add	r24, r20
    5a72:	95 1f       	adc	r25, r21
    5a74:	fc 01       	movw	r30, r24
    5a76:	33 96       	adiw	r30, 0x03	; 3
    5a78:	80 81       	ld	r24, Z
    5a7a:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
    5a7e:	28 2f       	mov	r18, r24
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	ce 01       	movw	r24, r28
    5a84:	48 96       	adiw	r24, 0x18	; 24
    5a86:	fc 01       	movw	r30, r24
    5a88:	e2 0f       	add	r30, r18
    5a8a:	f3 1f       	adc	r31, r19
    5a8c:	90 81       	ld	r25, Z
    5a8e:	83 e0       	ldi	r24, 0x03	; 3
    5a90:	69 2f       	mov	r22, r25
    5a92:	0e 94 3f 12 	call	0x247e	; 0x247e <DIO_u8GetPinValue>
    5a96:	88 23       	and	r24, r24
    5a98:	89 f3       	breq	.-30     	; 0x5a7c <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    5a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a9c:	28 2f       	mov	r18, r24
    5a9e:	30 e0       	ldi	r19, 0x00	; 0
    5aa0:	ce 01       	movw	r24, r28
    5aa2:	44 96       	adiw	r24, 0x14	; 20
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	e2 0f       	add	r30, r18
    5aa8:	f3 1f       	adc	r31, r19
    5aaa:	90 81       	ld	r25, Z
    5aac:	84 e0       	ldi	r24, 0x04	; 4
    5aae:	69 2f       	mov	r22, r25
    5ab0:	41 e0       	ldi	r20, 0x01	; 1
    5ab2:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    5ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    5ab8:	fc 8f       	std	Y+28, r31	; 0x1c
    5aba:	1e c0       	rjmp	.+60     	; 0x5af8 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    5abc:	89 81       	ldd	r24, Y+1	; 0x01
    5abe:	8f 5f       	subi	r24, 0xFF	; 255
    5ac0:	89 83       	std	Y+1, r24	; 0x01
    5ac2:	89 81       	ldd	r24, Y+1	; 0x01
    5ac4:	84 30       	cpi	r24, 0x04	; 4
    5ac6:	08 f4       	brcc	.+2      	; 0x5aca <KPD_u8GetPressedKey+0x130>
    5ac8:	b6 cf       	rjmp	.-148    	; 0x5a36 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    5aca:	8a 81       	ldd	r24, Y+2	; 0x02
    5acc:	28 2f       	mov	r18, r24
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	ce 01       	movw	r24, r28
    5ad2:	44 96       	adiw	r24, 0x14	; 20
    5ad4:	fc 01       	movw	r30, r24
    5ad6:	e2 0f       	add	r30, r18
    5ad8:	f3 1f       	adc	r31, r19
    5ada:	90 81       	ld	r25, Z
    5adc:	84 e0       	ldi	r24, 0x04	; 4
    5ade:	69 2f       	mov	r22, r25
    5ae0:	41 e0       	ldi	r20, 0x01	; 1
    5ae2:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    5ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae8:	8f 5f       	subi	r24, 0xFF	; 255
    5aea:	8a 83       	std	Y+2, r24	; 0x02
    5aec:	8a 81       	ldd	r24, Y+2	; 0x02
    5aee:	84 30       	cpi	r24, 0x04	; 4
    5af0:	08 f4       	brcc	.+2      	; 0x5af4 <KPD_u8GetPressedKey+0x15a>
    5af2:	91 cf       	rjmp	.-222    	; 0x5a16 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    5af4:	8b 81       	ldd	r24, Y+3	; 0x03
    5af6:	8c 8f       	std	Y+28, r24	; 0x1c
    5af8:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    5afa:	a1 96       	adiw	r28, 0x21	; 33
    5afc:	0f b6       	in	r0, 0x3f	; 63
    5afe:	f8 94       	cli
    5b00:	de bf       	out	0x3e, r29	; 62
    5b02:	0f be       	out	0x3f, r0	; 63
    5b04:	cd bf       	out	0x3d, r28	; 61
    5b06:	cf 91       	pop	r28
    5b08:	df 91       	pop	r29
    5b0a:	08 95       	ret

00005b0c <main>:
u8 errorFlag = 0;
u8 second =0;
u8 minute = 0;
u8 hour = 0;

int main(){
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	df 93       	push	r29
    5b12:	cf 93       	push	r28
    5b14:	cd b7       	in	r28, 0x3d	; 61
    5b16:	de b7       	in	r29, 0x3e	; 62
    5b18:	64 97       	sbiw	r28, 0x14	; 20
    5b1a:	0f b6       	in	r0, 0x3f	; 63
    5b1c:	f8 94       	cli
    5b1e:	de bf       	out	0x3e, r29	; 62
    5b20:	0f be       	out	0x3f, r0	; 63
    5b22:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    5b24:	0e 94 0c 10 	call	0x2018	; 0x2018 <DIO_voidInit>
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN7, Low);
    5b28:	83 e0       	ldi	r24, 0x03	; 3
    5b2a:	67 e0       	ldi	r22, 0x07	; 7
    5b2c:	40 e0       	ldi	r20, 0x00	; 0
    5b2e:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
	LCD_voidInit();
    5b32:	0e 94 c3 21 	call	0x4386	; 0x4386 <LCD_voidInit>
	GIE_voidEnable();
    5b36:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <GIE_voidEnable>
	I2C_Master_voidInit();
    5b3a:	0e 94 27 0c 	call	0x184e	; 0x184e <I2C_Master_voidInit>
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	a8 e4       	ldi	r26, 0x48	; 72
    5b44:	b3 e4       	ldi	r27, 0x43	; 67
    5b46:	8b 87       	std	Y+11, r24	; 0x0b
    5b48:	9c 87       	std	Y+12, r25	; 0x0c
    5b4a:	ad 87       	std	Y+13, r26	; 0x0d
    5b4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	4a e7       	ldi	r20, 0x7A	; 122
    5b5c:	55 e4       	ldi	r21, 0x45	; 69
    5b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b62:	dc 01       	movw	r26, r24
    5b64:	cb 01       	movw	r24, r22
    5b66:	8f 83       	std	Y+7, r24	; 0x07
    5b68:	98 87       	std	Y+8, r25	; 0x08
    5b6a:	a9 87       	std	Y+9, r26	; 0x09
    5b6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b70:	78 85       	ldd	r23, Y+8	; 0x08
    5b72:	89 85       	ldd	r24, Y+9	; 0x09
    5b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b76:	20 e0       	ldi	r18, 0x00	; 0
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	40 e8       	ldi	r20, 0x80	; 128
    5b7c:	5f e3       	ldi	r21, 0x3F	; 63
    5b7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b82:	88 23       	and	r24, r24
    5b84:	2c f4       	brge	.+10     	; 0x5b90 <main+0x84>
		__ticks = 1;
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	9e 83       	std	Y+6, r25	; 0x06
    5b8c:	8d 83       	std	Y+5, r24	; 0x05
    5b8e:	3f c0       	rjmp	.+126    	; 0x5c0e <main+0x102>
	else if (__tmp > 65535)
    5b90:	6f 81       	ldd	r22, Y+7	; 0x07
    5b92:	78 85       	ldd	r23, Y+8	; 0x08
    5b94:	89 85       	ldd	r24, Y+9	; 0x09
    5b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b98:	20 e0       	ldi	r18, 0x00	; 0
    5b9a:	3f ef       	ldi	r19, 0xFF	; 255
    5b9c:	4f e7       	ldi	r20, 0x7F	; 127
    5b9e:	57 e4       	ldi	r21, 0x47	; 71
    5ba0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ba4:	18 16       	cp	r1, r24
    5ba6:	4c f5       	brge	.+82     	; 0x5bfa <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bb0:	20 e0       	ldi	r18, 0x00	; 0
    5bb2:	30 e0       	ldi	r19, 0x00	; 0
    5bb4:	40 e2       	ldi	r20, 0x20	; 32
    5bb6:	51 e4       	ldi	r21, 0x41	; 65
    5bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	cd 01       	movw	r24, r26
    5bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	9e 83       	std	Y+6, r25	; 0x06
    5bce:	8d 83       	std	Y+5, r24	; 0x05
    5bd0:	0f c0       	rjmp	.+30     	; 0x5bf0 <main+0xe4>
    5bd2:	80 e9       	ldi	r24, 0x90	; 144
    5bd4:	91 e0       	ldi	r25, 0x01	; 1
    5bd6:	9c 83       	std	Y+4, r25	; 0x04
    5bd8:	8b 83       	std	Y+3, r24	; 0x03
    5bda:	8b 81       	ldd	r24, Y+3	; 0x03
    5bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    5bde:	01 97       	sbiw	r24, 0x01	; 1
    5be0:	f1 f7       	brne	.-4      	; 0x5bde <main+0xd2>
    5be2:	9c 83       	std	Y+4, r25	; 0x04
    5be4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5be6:	8d 81       	ldd	r24, Y+5	; 0x05
    5be8:	9e 81       	ldd	r25, Y+6	; 0x06
    5bea:	01 97       	sbiw	r24, 0x01	; 1
    5bec:	9e 83       	std	Y+6, r25	; 0x06
    5bee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bf4:	00 97       	sbiw	r24, 0x00	; 0
    5bf6:	69 f7       	brne	.-38     	; 0x5bd2 <main+0xc6>
    5bf8:	14 c0       	rjmp	.+40     	; 0x5c22 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    5bfc:	78 85       	ldd	r23, Y+8	; 0x08
    5bfe:	89 85       	ldd	r24, Y+9	; 0x09
    5c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c06:	dc 01       	movw	r26, r24
    5c08:	cb 01       	movw	r24, r22
    5c0a:	9e 83       	std	Y+6, r25	; 0x06
    5c0c:	8d 83       	std	Y+5, r24	; 0x05
    5c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c10:	9e 81       	ldd	r25, Y+6	; 0x06
    5c12:	9a 83       	std	Y+2, r25	; 0x02
    5c14:	89 83       	std	Y+1, r24	; 0x01
    5c16:	89 81       	ldd	r24, Y+1	; 0x01
    5c18:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1a:	01 97       	sbiw	r24, 0x01	; 1
    5c1c:	f1 f7       	brne	.-4      	; 0x5c1a <main+0x10e>
    5c1e:	9a 83       	std	Y+2, r25	; 0x02
    5c20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	RTC_Read_Clock();
    5c22:	0e 94 55 30 	call	0x60aa	; 0x60aa <RTC_Read_Clock>
	second = ConvertFromRTC(second);
    5c26:	80 91 14 02 	lds	r24, 0x0214
    5c2a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <ConvertFromRTC>
    5c2e:	80 93 14 02 	sts	0x0214, r24
	minute = ConvertFromRTC(minute);
    5c32:	80 91 15 02 	lds	r24, 0x0215
    5c36:	0e 94 79 30 	call	0x60f2	; 0x60f2 <ConvertFromRTC>
    5c3a:	80 93 15 02 	sts	0x0215, r24
	hour = ConvertFromRTC(hour);
    5c3e:	80 91 16 02 	lds	r24, 0x0216
    5c42:	0e 94 79 30 	call	0x60f2	; 0x60f2 <ConvertFromRTC>
    5c46:	80 93 16 02 	sts	0x0216, r24
	srand(second^minute^hour);
    5c4a:	90 91 14 02 	lds	r25, 0x0214
    5c4e:	80 91 15 02 	lds	r24, 0x0215
    5c52:	98 27       	eor	r25, r24
    5c54:	80 91 16 02 	lds	r24, 0x0216
    5c58:	89 27       	eor	r24, r25
    5c5a:	88 2f       	mov	r24, r24
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	0e 94 bf 31 	call	0x637e	; 0x637e <srand>
	u32 randNum = Random(1,250) * Random(1,250) * Random(1,250) * Random(1,250) + 0x12345678;
    5c62:	81 e0       	ldi	r24, 0x01	; 1
    5c64:	6a ef       	ldi	r22, 0xFA	; 250
    5c66:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <Random>
    5c6a:	08 2f       	mov	r16, r24
    5c6c:	10 e0       	ldi	r17, 0x00	; 0
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	6a ef       	ldi	r22, 0xFA	; 250
    5c72:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <Random>
    5c76:	88 2f       	mov	r24, r24
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	98 01       	movw	r18, r16
    5c7c:	28 9f       	mul	r18, r24
    5c7e:	80 01       	movw	r16, r0
    5c80:	29 9f       	mul	r18, r25
    5c82:	10 0d       	add	r17, r0
    5c84:	38 9f       	mul	r19, r24
    5c86:	10 0d       	add	r17, r0
    5c88:	11 24       	eor	r1, r1
    5c8a:	81 e0       	ldi	r24, 0x01	; 1
    5c8c:	6a ef       	ldi	r22, 0xFA	; 250
    5c8e:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <Random>
    5c92:	88 2f       	mov	r24, r24
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	98 01       	movw	r18, r16
    5c98:	28 9f       	mul	r18, r24
    5c9a:	80 01       	movw	r16, r0
    5c9c:	29 9f       	mul	r18, r25
    5c9e:	10 0d       	add	r17, r0
    5ca0:	38 9f       	mul	r19, r24
    5ca2:	10 0d       	add	r17, r0
    5ca4:	11 24       	eor	r1, r1
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	6a ef       	ldi	r22, 0xFA	; 250
    5caa:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <Random>
    5cae:	88 2f       	mov	r24, r24
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	9c 01       	movw	r18, r24
    5cb4:	02 9f       	mul	r16, r18
    5cb6:	c0 01       	movw	r24, r0
    5cb8:	03 9f       	mul	r16, r19
    5cba:	90 0d       	add	r25, r0
    5cbc:	12 9f       	mul	r17, r18
    5cbe:	90 0d       	add	r25, r0
    5cc0:	11 24       	eor	r1, r1
    5cc2:	aa 27       	eor	r26, r26
    5cc4:	97 fd       	sbrc	r25, 7
    5cc6:	a0 95       	com	r26
    5cc8:	ba 2f       	mov	r27, r26
    5cca:	88 58       	subi	r24, 0x88	; 136
    5ccc:	99 4a       	sbci	r25, 0xA9	; 169
    5cce:	ab 4c       	sbci	r26, 0xCB	; 203
    5cd0:	bd 4e       	sbci	r27, 0xED	; 237
    5cd2:	89 8b       	std	Y+17, r24	; 0x11
    5cd4:	9a 8b       	std	Y+18, r25	; 0x12
    5cd6:	ab 8b       	std	Y+19, r26	; 0x13
    5cd8:	bc 8b       	std	Y+20, r27	; 0x14
//	LCD_voidWriteIntData(randNum);
	//	LCD_voidSendCommand(LCD_DisplayOFF);
	USART_voidRXCSetCallBack(RXC);
    5cda:	8a e2       	ldi	r24, 0x2A	; 42
    5cdc:	9f e2       	ldi	r25, 0x2F	; 47
    5cde:	0e 94 45 08 	call	0x108a	; 0x108a <USART_voidRXCSetCallBack>
	USART_voidInit();
    5ce2:	0e 94 17 07 	call	0xe2e	; 0xe2e <USART_voidInit>
	USART_voidEnableRXCInterrupt();
    5ce6:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_voidEnableRXCInterrupt>
	while(1){
		if(doneFlag==1){
    5cea:	80 91 11 02 	lds	r24, 0x0211
    5cee:	81 30       	cpi	r24, 0x01	; 1
    5cf0:	e1 f7       	brne	.-8      	; 0x5cea <main+0x1de>
			doneFlag = 0;
    5cf2:	10 92 11 02 	sts	0x0211, r1
			if(memcmp(data, "2701", 4) == 0){
    5cf6:	80 e2       	ldi	r24, 0x20	; 32
    5cf8:	92 e0       	ldi	r25, 0x02	; 2
    5cfa:	20 e6       	ldi	r18, 0x60	; 96
    5cfc:	30 e0       	ldi	r19, 0x00	; 0
    5cfe:	b9 01       	movw	r22, r18
    5d00:	44 e0       	ldi	r20, 0x04	; 4
    5d02:	50 e0       	ldi	r21, 0x00	; 0
    5d04:	0e 94 ca 31 	call	0x6394	; 0x6394 <memcmp>
    5d08:	00 97       	sbiw	r24, 0x00	; 0
    5d0a:	09 f0       	breq	.+2      	; 0x5d0e <main+0x202>
    5d0c:	47 c0       	rjmp	.+142    	; 0x5d9c <main+0x290>
				strcat(successfulAccess, IntToString(randNum, tempStr));
    5d0e:	89 89       	ldd	r24, Y+17	; 0x11
    5d10:	9a 89       	ldd	r25, Y+18	; 0x12
    5d12:	ab 89       	ldd	r26, Y+19	; 0x13
    5d14:	bc 89       	ldd	r27, Y+20	; 0x14
    5d16:	24 e3       	ldi	r18, 0x34	; 52
    5d18:	32 e0       	ldi	r19, 0x02	; 2
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	a9 01       	movw	r20, r18
    5d20:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <IntToString>
    5d24:	9c 01       	movw	r18, r24
    5d26:	82 eb       	ldi	r24, 0xB2	; 178
    5d28:	91 e0       	ldi	r25, 0x01	; 1
    5d2a:	b9 01       	movw	r22, r18
    5d2c:	0e 94 d7 31 	call	0x63ae	; 0x63ae <strcat>
				LCD_voidWriteString(successfulAccess);
    5d30:	82 eb       	ldi	r24, 0xB2	; 178
    5d32:	91 e0       	ldi	r25, 0x01	; 1
    5d34:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
				for(u8 i = 4; i < 12; i++){
    5d38:	84 e0       	ldi	r24, 0x04	; 4
    5d3a:	88 8b       	std	Y+16, r24	; 0x10
    5d3c:	21 c0       	rjmp	.+66     	; 0x5d80 <main+0x274>
					cipher[i-4]= ((successfulAccess[i] - '0') ^ (key[i-4] - '0')) + '0';
    5d3e:	88 89       	ldd	r24, Y+16	; 0x10
    5d40:	88 2f       	mov	r24, r24
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	9c 01       	movw	r18, r24
    5d46:	24 50       	subi	r18, 0x04	; 4
    5d48:	30 40       	sbci	r19, 0x00	; 0
    5d4a:	88 89       	ldd	r24, Y+16	; 0x10
    5d4c:	88 2f       	mov	r24, r24
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	fc 01       	movw	r30, r24
    5d52:	ee 54       	subi	r30, 0x4E	; 78
    5d54:	fe 4f       	sbci	r31, 0xFE	; 254
    5d56:	80 81       	ld	r24, Z
    5d58:	80 53       	subi	r24, 0x30	; 48
    5d5a:	48 2f       	mov	r20, r24
    5d5c:	88 89       	ldd	r24, Y+16	; 0x10
    5d5e:	88 2f       	mov	r24, r24
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	04 97       	sbiw	r24, 0x04	; 4
    5d64:	fc 01       	movw	r30, r24
    5d66:	e7 55       	subi	r30, 0x57	; 87
    5d68:	fe 4f       	sbci	r31, 0xFE	; 254
    5d6a:	80 81       	ld	r24, Z
    5d6c:	80 53       	subi	r24, 0x30	; 48
    5d6e:	84 27       	eor	r24, r20
    5d70:	80 5d       	subi	r24, 0xD0	; 208
    5d72:	f9 01       	movw	r30, r18
    5d74:	e9 5e       	subi	r30, 0xE9	; 233
    5d76:	fd 4f       	sbci	r31, 0xFD	; 253
    5d78:	80 83       	st	Z, r24
		if(doneFlag==1){
			doneFlag = 0;
			if(memcmp(data, "2701", 4) == 0){
				strcat(successfulAccess, IntToString(randNum, tempStr));
				LCD_voidWriteString(successfulAccess);
				for(u8 i = 4; i < 12; i++){
    5d7a:	88 89       	ldd	r24, Y+16	; 0x10
    5d7c:	8f 5f       	subi	r24, 0xFF	; 255
    5d7e:	88 8b       	std	Y+16, r24	; 0x10
    5d80:	88 89       	ldd	r24, Y+16	; 0x10
    5d82:	8c 30       	cpi	r24, 0x0C	; 12
    5d84:	e0 f2       	brcs	.-72     	; 0x5d3e <main+0x232>
					cipher[i-4]= ((successfulAccess[i] - '0') ^ (key[i-4] - '0')) + '0';
				}
				cipher[8] = '\0';
    5d86:	10 92 1f 02 	sts	0x021F, r1
				LCD_voidGoToPosition(1,0);
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	60 e0       	ldi	r22, 0x00	; 0
    5d8e:	0e 94 25 2c 	call	0x584a	; 0x584a <LCD_voidGoToPosition>
				LCD_voidWriteString(cipher);
    5d92:	87 e1       	ldi	r24, 0x17	; 23
    5d94:	92 e0       	ldi	r25, 0x02	; 2
    5d96:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
    5d9a:	57 c0       	rjmp	.+174    	; 0x5e4a <main+0x33e>
			}
			else if(memcmp(data, "3101AA00", 8) == 0){
    5d9c:	80 e2       	ldi	r24, 0x20	; 32
    5d9e:	92 e0       	ldi	r25, 0x02	; 2
    5da0:	25 e6       	ldi	r18, 0x65	; 101
    5da2:	30 e0       	ldi	r19, 0x00	; 0
    5da4:	b9 01       	movw	r22, r18
    5da6:	48 e0       	ldi	r20, 0x08	; 8
    5da8:	50 e0       	ldi	r21, 0x00	; 0
    5daa:	0e 94 ca 31 	call	0x6394	; 0x6394 <memcmp>
    5dae:	00 97       	sbiw	r24, 0x00	; 0
    5db0:	99 f4       	brne	.+38     	; 0x5dd8 <main+0x2cc>
				if(securityAccess == 1){
    5db2:	80 91 12 02 	lds	r24, 0x0212
    5db6:	81 30       	cpi	r24, 0x01	; 1
    5db8:	51 f4       	brne	.+20     	; 0x5dce <main+0x2c2>
					LCD_voidWriteString((u8*)"7101AA00");
    5dba:	8e e6       	ldi	r24, 0x6E	; 110
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
					DIO_voidSetPinValue(DIO_PortC, DIO_PIN7, High);
    5dc2:	83 e0       	ldi	r24, 0x03	; 3
    5dc4:	67 e0       	ldi	r22, 0x07	; 7
    5dc6:	41 e0       	ldi	r20, 0x01	; 1
    5dc8:	0e 94 31 11 	call	0x2262	; 0x2262 <DIO_voidSetPinValue>
    5dcc:	3e c0       	rjmp	.+124    	; 0x5e4a <main+0x33e>
				}
				else{
					LCD_voidWriteString((u8*)"7F3135");
    5dce:	87 e7       	ldi	r24, 0x77	; 119
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
    5dd6:	39 c0       	rjmp	.+114    	; 0x5e4a <main+0x33e>
				}
			}
			else if(memcmp(data, "2702", 4) == 0){
    5dd8:	80 e2       	ldi	r24, 0x20	; 32
    5dda:	92 e0       	ldi	r25, 0x02	; 2
    5ddc:	2e e7       	ldi	r18, 0x7E	; 126
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	b9 01       	movw	r22, r18
    5de2:	44 e0       	ldi	r20, 0x04	; 4
    5de4:	50 e0       	ldi	r21, 0x00	; 0
    5de6:	0e 94 ca 31 	call	0x6394	; 0x6394 <memcmp>
    5dea:	00 97       	sbiw	r24, 0x00	; 0
    5dec:	71 f5       	brne	.+92     	; 0x5e4a <main+0x33e>
				for(u8 i = 4; i < 12; i++){
    5dee:	84 e0       	ldi	r24, 0x04	; 4
    5df0:	8f 87       	std	Y+15, r24	; 0x0f
    5df2:	18 c0       	rjmp	.+48     	; 0x5e24 <main+0x318>
					if(cipher[i-4] != data[i]){
    5df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5df6:	88 2f       	mov	r24, r24
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	04 97       	sbiw	r24, 0x04	; 4
    5dfc:	fc 01       	movw	r30, r24
    5dfe:	e9 5e       	subi	r30, 0xE9	; 233
    5e00:	fd 4f       	sbci	r31, 0xFD	; 253
    5e02:	20 81       	ld	r18, Z
    5e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e06:	88 2f       	mov	r24, r24
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	e0 5e       	subi	r30, 0xE0	; 224
    5e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    5e10:	80 81       	ld	r24, Z
    5e12:	28 17       	cp	r18, r24
    5e14:	21 f0       	breq	.+8      	; 0x5e1e <main+0x312>
						errorFlag = 1;
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	80 93 13 02 	sts	0x0213, r24
    5e1c:	06 c0       	rjmp	.+12     	; 0x5e2a <main+0x31e>
				else{
					LCD_voidWriteString((u8*)"7F3135");
				}
			}
			else if(memcmp(data, "2702", 4) == 0){
				for(u8 i = 4; i < 12; i++){
    5e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e20:	8f 5f       	subi	r24, 0xFF	; 255
    5e22:	8f 87       	std	Y+15, r24	; 0x0f
    5e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e26:	8c 30       	cpi	r24, 0x0C	; 12
    5e28:	28 f3       	brcs	.-54     	; 0x5df4 <main+0x2e8>
					if(cipher[i-4] != data[i]){
						errorFlag = 1;
						break;
					}
				}
				if(errorFlag == 0){
    5e2a:	80 91 13 02 	lds	r24, 0x0213
    5e2e:	88 23       	and	r24, r24
    5e30:	41 f4       	brne	.+16     	; 0x5e42 <main+0x336>
					LCD_voidWriteString((u8*)"6702");
    5e32:	83 e8       	ldi	r24, 0x83	; 131
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
					securityAccess = 1;
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	80 93 12 02 	sts	0x0212, r24
    5e40:	04 c0       	rjmp	.+8      	; 0x5e4a <main+0x33e>
				}
				else{
					LCD_voidWriteString((u8*)"7F2735");
    5e42:	88 e8       	ldi	r24, 0x88	; 136
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <LCD_voidWriteString>
				}

			}
			//			USART_voidEnableUDREInterrupt();
			RX_Index = 0;
    5e4a:	10 92 10 02 	sts	0x0210, r1
			USART_voidEnableRXCInterrupt();
    5e4e:	0e 94 95 07 	call	0xf2a	; 0xf2a <USART_voidEnableRXCInterrupt>
    5e52:	4b cf       	rjmp	.-362    	; 0x5cea <main+0x1de>

00005e54 <RXC>:
	}
	return 0;
}


void RXC(){
    5e54:	df 93       	push	r29
    5e56:	cf 93       	push	r28
    5e58:	0f 92       	push	r0
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
	u8 temp = USART_u8ReceiveInterruptByte();
    5e5e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <USART_u8ReceiveInterruptByte>
    5e62:	89 83       	std	Y+1, r24	; 0x01
	if(temp == '\r'){
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	8d 30       	cpi	r24, 0x0D	; 13
    5e68:	89 f4       	brne	.+34     	; 0x5e8c <RXC+0x38>
		data[RX_Index] = '\0';
    5e6a:	80 91 10 02 	lds	r24, 0x0210
    5e6e:	88 2f       	mov	r24, r24
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	fc 01       	movw	r30, r24
    5e74:	e0 5e       	subi	r30, 0xE0	; 224
    5e76:	fd 4f       	sbci	r31, 0xFD	; 253
    5e78:	10 82       	st	Z, r1
		doneFlag = 1;
    5e7a:	81 e0       	ldi	r24, 0x01	; 1
    5e7c:	80 93 11 02 	sts	0x0211, r24
		USART_voidDisableRXCInterrupt();
    5e80:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_voidDisableRXCInterrupt>
		LCD_voidSendCommand(LCD_ClearDisplay);
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_voidSendCommand>
    5e8a:	1f c0       	rjmp	.+62     	; 0x5eca <RXC+0x76>
	}
	else if(temp == 0x08){
    5e8c:	89 81       	ldd	r24, Y+1	; 0x01
    5e8e:	88 30       	cpi	r24, 0x08	; 8
    5e90:	71 f4       	brne	.+28     	; 0x5eae <RXC+0x5a>
		data[--RX_Index] = '\0';
    5e92:	80 91 10 02 	lds	r24, 0x0210
    5e96:	81 50       	subi	r24, 0x01	; 1
    5e98:	80 93 10 02 	sts	0x0210, r24
    5e9c:	80 91 10 02 	lds	r24, 0x0210
    5ea0:	88 2f       	mov	r24, r24
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	e0 5e       	subi	r30, 0xE0	; 224
    5ea8:	fd 4f       	sbci	r31, 0xFD	; 253
    5eaa:	10 82       	st	Z, r1
    5eac:	0e c0       	rjmp	.+28     	; 0x5eca <RXC+0x76>
	}
	else{
		data[RX_Index] = temp;
    5eae:	80 91 10 02 	lds	r24, 0x0210
    5eb2:	88 2f       	mov	r24, r24
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	e0 5e       	subi	r30, 0xE0	; 224
    5eba:	fd 4f       	sbci	r31, 0xFD	; 253
    5ebc:	89 81       	ldd	r24, Y+1	; 0x01
    5ebe:	80 83       	st	Z, r24
		RX_Index++;
    5ec0:	80 91 10 02 	lds	r24, 0x0210
    5ec4:	8f 5f       	subi	r24, 0xFF	; 255
    5ec6:	80 93 10 02 	sts	0x0210, r24
		//		LCD_voidWriteChar(data[RX_Index]);
	}

}
    5eca:	0f 90       	pop	r0
    5ecc:	cf 91       	pop	r28
    5ece:	df 91       	pop	r29
    5ed0:	08 95       	ret

00005ed2 <Random>:


u8 Random(u8 lower, u8 upper){
    5ed2:	df 93       	push	r29
    5ed4:	cf 93       	push	r28
    5ed6:	00 d0       	rcall	.+0      	; 0x5ed8 <Random+0x6>
    5ed8:	0f 92       	push	r0
    5eda:	cd b7       	in	r28, 0x3d	; 61
    5edc:	de b7       	in	r29, 0x3e	; 62
    5ede:	8a 83       	std	Y+2, r24	; 0x02
    5ee0:	6b 83       	std	Y+3, r22	; 0x03
	u8 num = (rand() %  (upper - lower + 1)) + lower;
    5ee2:	0e 94 ba 31 	call	0x6374	; 0x6374 <rand>
    5ee6:	ac 01       	movw	r20, r24
    5ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    5eea:	28 2f       	mov	r18, r24
    5eec:	30 e0       	ldi	r19, 0x00	; 0
    5eee:	8a 81       	ldd	r24, Y+2	; 0x02
    5ef0:	88 2f       	mov	r24, r24
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	b9 01       	movw	r22, r18
    5ef6:	68 1b       	sub	r22, r24
    5ef8:	79 0b       	sbc	r23, r25
    5efa:	cb 01       	movw	r24, r22
    5efc:	9c 01       	movw	r18, r24
    5efe:	2f 5f       	subi	r18, 0xFF	; 255
    5f00:	3f 4f       	sbci	r19, 0xFF	; 255
    5f02:	ca 01       	movw	r24, r20
    5f04:	b9 01       	movw	r22, r18
    5f06:	0e 94 c2 30 	call	0x6184	; 0x6184 <__divmodhi4>
    5f0a:	98 2f       	mov	r25, r24
    5f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0e:	89 0f       	add	r24, r25
    5f10:	89 83       	std	Y+1, r24	; 0x01
	return num;
    5f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f14:	0f 90       	pop	r0
    5f16:	0f 90       	pop	r0
    5f18:	0f 90       	pop	r0
    5f1a:	cf 91       	pop	r28
    5f1c:	df 91       	pop	r29
    5f1e:	08 95       	ret

00005f20 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    5f20:	0f 93       	push	r16
    5f22:	1f 93       	push	r17
    5f24:	df 93       	push	r29
    5f26:	cf 93       	push	r28
    5f28:	cd b7       	in	r28, 0x3d	; 61
    5f2a:	de b7       	in	r29, 0x3e	; 62
    5f2c:	2e 97       	sbiw	r28, 0x0e	; 14
    5f2e:	0f b6       	in	r0, 0x3f	; 63
    5f30:	f8 94       	cli
    5f32:	de bf       	out	0x3e, r29	; 62
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	cd bf       	out	0x3d, r28	; 61
    5f38:	69 87       	std	Y+9, r22	; 0x09
    5f3a:	7a 87       	std	Y+10, r23	; 0x0a
    5f3c:	8b 87       	std	Y+11, r24	; 0x0b
    5f3e:	9c 87       	std	Y+12, r25	; 0x0c
    5f40:	5e 87       	std	Y+14, r21	; 0x0e
    5f42:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    5f44:	1d 82       	std	Y+5, r1	; 0x05
    5f46:	1e 82       	std	Y+6, r1	; 0x06
    5f48:	1f 82       	std	Y+7, r1	; 0x07
    5f4a:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    5f4c:	83 e1       	ldi	r24, 0x13	; 19
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	a0 e0       	ldi	r26, 0x00	; 0
    5f52:	b0 e0       	ldi	r27, 0x00	; 0
    5f54:	89 83       	std	Y+1, r24	; 0x01
    5f56:	9a 83       	std	Y+2, r25	; 0x02
    5f58:	ab 83       	std	Y+3, r26	; 0x03
    5f5a:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    5f5c:	29 81       	ldd	r18, Y+1	; 0x01
    5f5e:	3a 81       	ldd	r19, Y+2	; 0x02
    5f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f64:	fc 01       	movw	r30, r24
    5f66:	e2 0f       	add	r30, r18
    5f68:	f3 1f       	adc	r31, r19
    5f6a:	10 82       	st	Z, r1
    5f6c:	89 81       	ldd	r24, Y+1	; 0x01
    5f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f70:	ab 81       	ldd	r26, Y+3	; 0x03
    5f72:	bc 81       	ldd	r27, Y+4	; 0x04
    5f74:	01 97       	sbiw	r24, 0x01	; 1
    5f76:	a1 09       	sbc	r26, r1
    5f78:	b1 09       	sbc	r27, r1
    5f7a:	89 83       	std	Y+1, r24	; 0x01
    5f7c:	9a 83       	std	Y+2, r25	; 0x02
    5f7e:	ab 83       	std	Y+3, r26	; 0x03
    5f80:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    5f82:	89 85       	ldd	r24, Y+9	; 0x09
    5f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f86:	ab 85       	ldd	r26, Y+11	; 0x0b
    5f88:	bc 85       	ldd	r27, Y+12	; 0x0c
    5f8a:	bb 23       	and	r27, r27
    5f8c:	0c f0       	brlt	.+2      	; 0x5f90 <IntToString+0x70>
    5f8e:	4d c0       	rjmp	.+154    	; 0x602a <IntToString+0x10a>
		flag = 1;
    5f90:	81 e0       	ldi	r24, 0x01	; 1
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	a0 e0       	ldi	r26, 0x00	; 0
    5f96:	b0 e0       	ldi	r27, 0x00	; 0
    5f98:	8d 83       	std	Y+5, r24	; 0x05
    5f9a:	9e 83       	std	Y+6, r25	; 0x06
    5f9c:	af 83       	std	Y+7, r26	; 0x07
    5f9e:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    5fa0:	89 85       	ldd	r24, Y+9	; 0x09
    5fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fa4:	ab 85       	ldd	r26, Y+11	; 0x0b
    5fa6:	bc 85       	ldd	r27, Y+12	; 0x0c
    5fa8:	b0 95       	com	r27
    5faa:	a0 95       	com	r26
    5fac:	90 95       	com	r25
    5fae:	81 95       	neg	r24
    5fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb2:	af 4f       	sbci	r26, 0xFF	; 255
    5fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    5fb6:	89 87       	std	Y+9, r24	; 0x09
    5fb8:	9a 87       	std	Y+10, r25	; 0x0a
    5fba:	ab 87       	std	Y+11, r26	; 0x0b
    5fbc:	bc 87       	std	Y+12, r27	; 0x0c
    5fbe:	35 c0       	rjmp	.+106    	; 0x602a <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    5fc0:	29 81       	ldd	r18, Y+1	; 0x01
    5fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    5fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fc8:	8c 01       	movw	r16, r24
    5fca:	02 0f       	add	r16, r18
    5fcc:	13 1f       	adc	r17, r19
    5fce:	89 85       	ldd	r24, Y+9	; 0x09
    5fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fd2:	ab 85       	ldd	r26, Y+11	; 0x0b
    5fd4:	bc 85       	ldd	r27, Y+12	; 0x0c
    5fd6:	2a e0       	ldi	r18, 0x0A	; 10
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	40 e0       	ldi	r20, 0x00	; 0
    5fdc:	50 e0       	ldi	r21, 0x00	; 0
    5fde:	bc 01       	movw	r22, r24
    5fe0:	cd 01       	movw	r24, r26
    5fe2:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    5fe6:	dc 01       	movw	r26, r24
    5fe8:	cb 01       	movw	r24, r22
    5fea:	80 5d       	subi	r24, 0xD0	; 208
    5fec:	f8 01       	movw	r30, r16
    5fee:	80 83       	st	Z, r24
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ff6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ff8:	01 97       	sbiw	r24, 0x01	; 1
    5ffa:	a1 09       	sbc	r26, r1
    5ffc:	b1 09       	sbc	r27, r1
    5ffe:	89 83       	std	Y+1, r24	; 0x01
    6000:	9a 83       	std	Y+2, r25	; 0x02
    6002:	ab 83       	std	Y+3, r26	; 0x03
    6004:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    6006:	89 85       	ldd	r24, Y+9	; 0x09
    6008:	9a 85       	ldd	r25, Y+10	; 0x0a
    600a:	ab 85       	ldd	r26, Y+11	; 0x0b
    600c:	bc 85       	ldd	r27, Y+12	; 0x0c
    600e:	2a e0       	ldi	r18, 0x0A	; 10
    6010:	30 e0       	ldi	r19, 0x00	; 0
    6012:	40 e0       	ldi	r20, 0x00	; 0
    6014:	50 e0       	ldi	r21, 0x00	; 0
    6016:	bc 01       	movw	r22, r24
    6018:	cd 01       	movw	r24, r26
    601a:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    601e:	da 01       	movw	r26, r20
    6020:	c9 01       	movw	r24, r18
    6022:	89 87       	std	Y+9, r24	; 0x09
    6024:	9a 87       	std	Y+10, r25	; 0x0a
    6026:	ab 87       	std	Y+11, r26	; 0x0b
    6028:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    602a:	89 85       	ldd	r24, Y+9	; 0x09
    602c:	9a 85       	ldd	r25, Y+10	; 0x0a
    602e:	ab 85       	ldd	r26, Y+11	; 0x0b
    6030:	bc 85       	ldd	r27, Y+12	; 0x0c
    6032:	00 97       	sbiw	r24, 0x00	; 0
    6034:	a1 05       	cpc	r26, r1
    6036:	b1 05       	cpc	r27, r1
    6038:	19 f6       	brne	.-122    	; 0x5fc0 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    603a:	8d 81       	ldd	r24, Y+5	; 0x05
    603c:	9e 81       	ldd	r25, Y+6	; 0x06
    603e:	af 81       	ldd	r26, Y+7	; 0x07
    6040:	b8 85       	ldd	r27, Y+8	; 0x08
    6042:	00 97       	sbiw	r24, 0x00	; 0
    6044:	a1 05       	cpc	r26, r1
    6046:	b1 05       	cpc	r27, r1
    6048:	a1 f0       	breq	.+40     	; 0x6072 <IntToString+0x152>
		str[i--] = '-';
    604a:	29 81       	ldd	r18, Y+1	; 0x01
    604c:	3a 81       	ldd	r19, Y+2	; 0x02
    604e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6050:	9e 85       	ldd	r25, Y+14	; 0x0e
    6052:	fc 01       	movw	r30, r24
    6054:	e2 0f       	add	r30, r18
    6056:	f3 1f       	adc	r31, r19
    6058:	8d e2       	ldi	r24, 0x2D	; 45
    605a:	80 83       	st	Z, r24
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	9a 81       	ldd	r25, Y+2	; 0x02
    6060:	ab 81       	ldd	r26, Y+3	; 0x03
    6062:	bc 81       	ldd	r27, Y+4	; 0x04
    6064:	01 97       	sbiw	r24, 0x01	; 1
    6066:	a1 09       	sbc	r26, r1
    6068:	b1 09       	sbc	r27, r1
    606a:	89 83       	std	Y+1, r24	; 0x01
    606c:	9a 83       	std	Y+2, r25	; 0x02
    606e:	ab 83       	std	Y+3, r26	; 0x03
    6070:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    6072:	89 81       	ldd	r24, Y+1	; 0x01
    6074:	9a 81       	ldd	r25, Y+2	; 0x02
    6076:	ab 81       	ldd	r26, Y+3	; 0x03
    6078:	bc 81       	ldd	r27, Y+4	; 0x04
    607a:	01 96       	adiw	r24, 0x01	; 1
    607c:	a1 1d       	adc	r26, r1
    607e:	b1 1d       	adc	r27, r1
    6080:	89 83       	std	Y+1, r24	; 0x01
    6082:	9a 83       	std	Y+2, r25	; 0x02
    6084:	ab 83       	std	Y+3, r26	; 0x03
    6086:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    6088:	29 81       	ldd	r18, Y+1	; 0x01
    608a:	3a 81       	ldd	r19, Y+2	; 0x02
    608c:	8d 85       	ldd	r24, Y+13	; 0x0d
    608e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6090:	82 0f       	add	r24, r18
    6092:	93 1f       	adc	r25, r19

}
    6094:	2e 96       	adiw	r28, 0x0e	; 14
    6096:	0f b6       	in	r0, 0x3f	; 63
    6098:	f8 94       	cli
    609a:	de bf       	out	0x3e, r29	; 62
    609c:	0f be       	out	0x3f, r0	; 63
    609e:	cd bf       	out	0x3d, r28	; 61
    60a0:	cf 91       	pop	r28
    60a2:	df 91       	pop	r29
    60a4:	1f 91       	pop	r17
    60a6:	0f 91       	pop	r16
    60a8:	08 95       	ret

000060aa <RTC_Read_Clock>:

void RTC_Read_Clock(){
    60aa:	df 93       	push	r29
    60ac:	cf 93       	push	r28
    60ae:	cd b7       	in	r28, 0x3d	; 61
    60b0:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    60b2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    60b6:	80 ed       	ldi	r24, 0xD0	; 208
    60b8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(TIME_REGISTER_ADDRESS);
    60bc:	80 e0       	ldi	r24, 0x00	; 0
    60be:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    60c2:	0e 94 83 0c 	call	0x1906	; 0x1906 <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(SLAVE_ADDRESS);
    60c6:	80 ed       	ldi	r24, 0xD0	; 208
    60c8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <I2C_Master_enuSendSlaveAddressWithRead>
	I2C_Master_enuReadu8Data(&second);
    60cc:	84 e1       	ldi	r24, 0x14	; 20
    60ce:	92 e0       	ldi	r25, 0x02	; 2
    60d0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&minute);
    60d4:	85 e1       	ldi	r24, 0x15	; 21
    60d6:	92 e0       	ldi	r25, 0x02	; 2
    60d8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&hour);
    60dc:	86 e1       	ldi	r24, 0x16	; 22
    60de:	92 e0       	ldi	r25, 0x02	; 2
    60e0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <I2C_Master_enuReadu8Data>
	I2C_Master_voidFlush();
    60e4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    60e8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <I2C_Master_enuSendStopCond>
}
    60ec:	cf 91       	pop	r28
    60ee:	df 91       	pop	r29
    60f0:	08 95       	ret

000060f2 <ConvertFromRTC>:

u8 ConvertFromRTC(u8 num){
    60f2:	df 93       	push	r29
    60f4:	cf 93       	push	r28
    60f6:	0f 92       	push	r0
    60f8:	cd b7       	in	r28, 0x3d	; 61
    60fa:	de b7       	in	r29, 0x3e	; 62
    60fc:	89 83       	std	Y+1, r24	; 0x01
	return ((num>>4) * 10 + (num&0x0F));
    60fe:	89 81       	ldd	r24, Y+1	; 0x01
    6100:	82 95       	swap	r24
    6102:	8f 70       	andi	r24, 0x0F	; 15
    6104:	88 2f       	mov	r24, r24
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	9c 01       	movw	r18, r24
    610a:	22 0f       	add	r18, r18
    610c:	33 1f       	adc	r19, r19
    610e:	c9 01       	movw	r24, r18
    6110:	88 0f       	add	r24, r24
    6112:	99 1f       	adc	r25, r25
    6114:	88 0f       	add	r24, r24
    6116:	99 1f       	adc	r25, r25
    6118:	82 0f       	add	r24, r18
    611a:	93 1f       	adc	r25, r19
    611c:	98 2f       	mov	r25, r24
    611e:	89 81       	ldd	r24, Y+1	; 0x01
    6120:	8f 70       	andi	r24, 0x0F	; 15
    6122:	89 0f       	add	r24, r25
}
    6124:	0f 90       	pop	r0
    6126:	cf 91       	pop	r28
    6128:	df 91       	pop	r29
    612a:	08 95       	ret

0000612c <__mulsi3>:
    612c:	62 9f       	mul	r22, r18
    612e:	d0 01       	movw	r26, r0
    6130:	73 9f       	mul	r23, r19
    6132:	f0 01       	movw	r30, r0
    6134:	82 9f       	mul	r24, r18
    6136:	e0 0d       	add	r30, r0
    6138:	f1 1d       	adc	r31, r1
    613a:	64 9f       	mul	r22, r20
    613c:	e0 0d       	add	r30, r0
    613e:	f1 1d       	adc	r31, r1
    6140:	92 9f       	mul	r25, r18
    6142:	f0 0d       	add	r31, r0
    6144:	83 9f       	mul	r24, r19
    6146:	f0 0d       	add	r31, r0
    6148:	74 9f       	mul	r23, r20
    614a:	f0 0d       	add	r31, r0
    614c:	65 9f       	mul	r22, r21
    614e:	f0 0d       	add	r31, r0
    6150:	99 27       	eor	r25, r25
    6152:	72 9f       	mul	r23, r18
    6154:	b0 0d       	add	r27, r0
    6156:	e1 1d       	adc	r30, r1
    6158:	f9 1f       	adc	r31, r25
    615a:	63 9f       	mul	r22, r19
    615c:	b0 0d       	add	r27, r0
    615e:	e1 1d       	adc	r30, r1
    6160:	f9 1f       	adc	r31, r25
    6162:	bd 01       	movw	r22, r26
    6164:	cf 01       	movw	r24, r30
    6166:	11 24       	eor	r1, r1
    6168:	08 95       	ret

0000616a <__divmodqi4>:
    616a:	87 fb       	bst	r24, 7
    616c:	08 2e       	mov	r0, r24
    616e:	06 26       	eor	r0, r22
    6170:	87 fd       	sbrc	r24, 7
    6172:	81 95       	neg	r24
    6174:	67 fd       	sbrc	r22, 7
    6176:	61 95       	neg	r22
    6178:	33 d0       	rcall	.+102    	; 0x61e0 <__udivmodqi4>
    617a:	0e f4       	brtc	.+2      	; 0x617e <__divmodqi4_1>
    617c:	91 95       	neg	r25

0000617e <__divmodqi4_1>:
    617e:	07 fc       	sbrc	r0, 7
    6180:	81 95       	neg	r24

00006182 <__divmodqi4_exit>:
    6182:	08 95       	ret

00006184 <__divmodhi4>:
    6184:	97 fb       	bst	r25, 7
    6186:	09 2e       	mov	r0, r25
    6188:	07 26       	eor	r0, r23
    618a:	0a d0       	rcall	.+20     	; 0x61a0 <__divmodhi4_neg1>
    618c:	77 fd       	sbrc	r23, 7
    618e:	04 d0       	rcall	.+8      	; 0x6198 <__divmodhi4_neg2>
    6190:	33 d0       	rcall	.+102    	; 0x61f8 <__udivmodhi4>
    6192:	06 d0       	rcall	.+12     	; 0x61a0 <__divmodhi4_neg1>
    6194:	00 20       	and	r0, r0
    6196:	1a f4       	brpl	.+6      	; 0x619e <__divmodhi4_exit>

00006198 <__divmodhi4_neg2>:
    6198:	70 95       	com	r23
    619a:	61 95       	neg	r22
    619c:	7f 4f       	sbci	r23, 0xFF	; 255

0000619e <__divmodhi4_exit>:
    619e:	08 95       	ret

000061a0 <__divmodhi4_neg1>:
    61a0:	f6 f7       	brtc	.-4      	; 0x619e <__divmodhi4_exit>
    61a2:	90 95       	com	r25
    61a4:	81 95       	neg	r24
    61a6:	9f 4f       	sbci	r25, 0xFF	; 255
    61a8:	08 95       	ret

000061aa <__divmodsi4>:
    61aa:	97 fb       	bst	r25, 7
    61ac:	09 2e       	mov	r0, r25
    61ae:	05 26       	eor	r0, r21
    61b0:	0e d0       	rcall	.+28     	; 0x61ce <__divmodsi4_neg1>
    61b2:	57 fd       	sbrc	r21, 7
    61b4:	04 d0       	rcall	.+8      	; 0x61be <__divmodsi4_neg2>
    61b6:	34 d0       	rcall	.+104    	; 0x6220 <__udivmodsi4>
    61b8:	0a d0       	rcall	.+20     	; 0x61ce <__divmodsi4_neg1>
    61ba:	00 1c       	adc	r0, r0
    61bc:	38 f4       	brcc	.+14     	; 0x61cc <__divmodsi4_exit>

000061be <__divmodsi4_neg2>:
    61be:	50 95       	com	r21
    61c0:	40 95       	com	r20
    61c2:	30 95       	com	r19
    61c4:	21 95       	neg	r18
    61c6:	3f 4f       	sbci	r19, 0xFF	; 255
    61c8:	4f 4f       	sbci	r20, 0xFF	; 255
    61ca:	5f 4f       	sbci	r21, 0xFF	; 255

000061cc <__divmodsi4_exit>:
    61cc:	08 95       	ret

000061ce <__divmodsi4_neg1>:
    61ce:	f6 f7       	brtc	.-4      	; 0x61cc <__divmodsi4_exit>
    61d0:	90 95       	com	r25
    61d2:	80 95       	com	r24
    61d4:	70 95       	com	r23
    61d6:	61 95       	neg	r22
    61d8:	7f 4f       	sbci	r23, 0xFF	; 255
    61da:	8f 4f       	sbci	r24, 0xFF	; 255
    61dc:	9f 4f       	sbci	r25, 0xFF	; 255
    61de:	08 95       	ret

000061e0 <__udivmodqi4>:
    61e0:	99 1b       	sub	r25, r25
    61e2:	79 e0       	ldi	r23, 0x09	; 9
    61e4:	04 c0       	rjmp	.+8      	; 0x61ee <__udivmodqi4_ep>

000061e6 <__udivmodqi4_loop>:
    61e6:	99 1f       	adc	r25, r25
    61e8:	96 17       	cp	r25, r22
    61ea:	08 f0       	brcs	.+2      	; 0x61ee <__udivmodqi4_ep>
    61ec:	96 1b       	sub	r25, r22

000061ee <__udivmodqi4_ep>:
    61ee:	88 1f       	adc	r24, r24
    61f0:	7a 95       	dec	r23
    61f2:	c9 f7       	brne	.-14     	; 0x61e6 <__udivmodqi4_loop>
    61f4:	80 95       	com	r24
    61f6:	08 95       	ret

000061f8 <__udivmodhi4>:
    61f8:	aa 1b       	sub	r26, r26
    61fa:	bb 1b       	sub	r27, r27
    61fc:	51 e1       	ldi	r21, 0x11	; 17
    61fe:	07 c0       	rjmp	.+14     	; 0x620e <__udivmodhi4_ep>

00006200 <__udivmodhi4_loop>:
    6200:	aa 1f       	adc	r26, r26
    6202:	bb 1f       	adc	r27, r27
    6204:	a6 17       	cp	r26, r22
    6206:	b7 07       	cpc	r27, r23
    6208:	10 f0       	brcs	.+4      	; 0x620e <__udivmodhi4_ep>
    620a:	a6 1b       	sub	r26, r22
    620c:	b7 0b       	sbc	r27, r23

0000620e <__udivmodhi4_ep>:
    620e:	88 1f       	adc	r24, r24
    6210:	99 1f       	adc	r25, r25
    6212:	5a 95       	dec	r21
    6214:	a9 f7       	brne	.-22     	; 0x6200 <__udivmodhi4_loop>
    6216:	80 95       	com	r24
    6218:	90 95       	com	r25
    621a:	bc 01       	movw	r22, r24
    621c:	cd 01       	movw	r24, r26
    621e:	08 95       	ret

00006220 <__udivmodsi4>:
    6220:	a1 e2       	ldi	r26, 0x21	; 33
    6222:	1a 2e       	mov	r1, r26
    6224:	aa 1b       	sub	r26, r26
    6226:	bb 1b       	sub	r27, r27
    6228:	fd 01       	movw	r30, r26
    622a:	0d c0       	rjmp	.+26     	; 0x6246 <__udivmodsi4_ep>

0000622c <__udivmodsi4_loop>:
    622c:	aa 1f       	adc	r26, r26
    622e:	bb 1f       	adc	r27, r27
    6230:	ee 1f       	adc	r30, r30
    6232:	ff 1f       	adc	r31, r31
    6234:	a2 17       	cp	r26, r18
    6236:	b3 07       	cpc	r27, r19
    6238:	e4 07       	cpc	r30, r20
    623a:	f5 07       	cpc	r31, r21
    623c:	20 f0       	brcs	.+8      	; 0x6246 <__udivmodsi4_ep>
    623e:	a2 1b       	sub	r26, r18
    6240:	b3 0b       	sbc	r27, r19
    6242:	e4 0b       	sbc	r30, r20
    6244:	f5 0b       	sbc	r31, r21

00006246 <__udivmodsi4_ep>:
    6246:	66 1f       	adc	r22, r22
    6248:	77 1f       	adc	r23, r23
    624a:	88 1f       	adc	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	1a 94       	dec	r1
    6250:	69 f7       	brne	.-38     	; 0x622c <__udivmodsi4_loop>
    6252:	60 95       	com	r22
    6254:	70 95       	com	r23
    6256:	80 95       	com	r24
    6258:	90 95       	com	r25
    625a:	9b 01       	movw	r18, r22
    625c:	ac 01       	movw	r20, r24
    625e:	bd 01       	movw	r22, r26
    6260:	cf 01       	movw	r24, r30
    6262:	08 95       	ret

00006264 <__prologue_saves__>:
    6264:	2f 92       	push	r2
    6266:	3f 92       	push	r3
    6268:	4f 92       	push	r4
    626a:	5f 92       	push	r5
    626c:	6f 92       	push	r6
    626e:	7f 92       	push	r7
    6270:	8f 92       	push	r8
    6272:	9f 92       	push	r9
    6274:	af 92       	push	r10
    6276:	bf 92       	push	r11
    6278:	cf 92       	push	r12
    627a:	df 92       	push	r13
    627c:	ef 92       	push	r14
    627e:	ff 92       	push	r15
    6280:	0f 93       	push	r16
    6282:	1f 93       	push	r17
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	cd b7       	in	r28, 0x3d	; 61
    628a:	de b7       	in	r29, 0x3e	; 62
    628c:	ca 1b       	sub	r28, r26
    628e:	db 0b       	sbc	r29, r27
    6290:	0f b6       	in	r0, 0x3f	; 63
    6292:	f8 94       	cli
    6294:	de bf       	out	0x3e, r29	; 62
    6296:	0f be       	out	0x3f, r0	; 63
    6298:	cd bf       	out	0x3d, r28	; 61
    629a:	09 94       	ijmp

0000629c <__epilogue_restores__>:
    629c:	2a 88       	ldd	r2, Y+18	; 0x12
    629e:	39 88       	ldd	r3, Y+17	; 0x11
    62a0:	48 88       	ldd	r4, Y+16	; 0x10
    62a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    62a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    62a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    62a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    62aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    62ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    62ae:	b9 84       	ldd	r11, Y+9	; 0x09
    62b0:	c8 84       	ldd	r12, Y+8	; 0x08
    62b2:	df 80       	ldd	r13, Y+7	; 0x07
    62b4:	ee 80       	ldd	r14, Y+6	; 0x06
    62b6:	fd 80       	ldd	r15, Y+5	; 0x05
    62b8:	0c 81       	ldd	r16, Y+4	; 0x04
    62ba:	1b 81       	ldd	r17, Y+3	; 0x03
    62bc:	aa 81       	ldd	r26, Y+2	; 0x02
    62be:	b9 81       	ldd	r27, Y+1	; 0x01
    62c0:	ce 0f       	add	r28, r30
    62c2:	d1 1d       	adc	r29, r1
    62c4:	0f b6       	in	r0, 0x3f	; 63
    62c6:	f8 94       	cli
    62c8:	de bf       	out	0x3e, r29	; 62
    62ca:	0f be       	out	0x3f, r0	; 63
    62cc:	cd bf       	out	0x3d, r28	; 61
    62ce:	ed 01       	movw	r28, r26
    62d0:	08 95       	ret

000062d2 <do_rand>:
    62d2:	a0 e0       	ldi	r26, 0x00	; 0
    62d4:	b0 e0       	ldi	r27, 0x00	; 0
    62d6:	ef e6       	ldi	r30, 0x6F	; 111
    62d8:	f1 e3       	ldi	r31, 0x31	; 49
    62da:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__prologue_saves__+0x10>
    62de:	ec 01       	movw	r28, r24
    62e0:	a8 80       	ld	r10, Y
    62e2:	b9 80       	ldd	r11, Y+1	; 0x01
    62e4:	ca 80       	ldd	r12, Y+2	; 0x02
    62e6:	db 80       	ldd	r13, Y+3	; 0x03
    62e8:	a1 14       	cp	r10, r1
    62ea:	b1 04       	cpc	r11, r1
    62ec:	c1 04       	cpc	r12, r1
    62ee:	d1 04       	cpc	r13, r1
    62f0:	41 f4       	brne	.+16     	; 0x6302 <do_rand+0x30>
    62f2:	84 e2       	ldi	r24, 0x24	; 36
    62f4:	a8 2e       	mov	r10, r24
    62f6:	89 ed       	ldi	r24, 0xD9	; 217
    62f8:	b8 2e       	mov	r11, r24
    62fa:	8b e5       	ldi	r24, 0x5B	; 91
    62fc:	c8 2e       	mov	r12, r24
    62fe:	87 e0       	ldi	r24, 0x07	; 7
    6300:	d8 2e       	mov	r13, r24
    6302:	c6 01       	movw	r24, r12
    6304:	b5 01       	movw	r22, r10
    6306:	2d e1       	ldi	r18, 0x1D	; 29
    6308:	33 ef       	ldi	r19, 0xF3	; 243
    630a:	41 e0       	ldi	r20, 0x01	; 1
    630c:	50 e0       	ldi	r21, 0x00	; 0
    630e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    6312:	27 ea       	ldi	r18, 0xA7	; 167
    6314:	31 e4       	ldi	r19, 0x41	; 65
    6316:	40 e0       	ldi	r20, 0x00	; 0
    6318:	50 e0       	ldi	r21, 0x00	; 0
    631a:	0e 94 96 30 	call	0x612c	; 0x612c <__mulsi3>
    631e:	7b 01       	movw	r14, r22
    6320:	8c 01       	movw	r16, r24
    6322:	c6 01       	movw	r24, r12
    6324:	b5 01       	movw	r22, r10
    6326:	2d e1       	ldi	r18, 0x1D	; 29
    6328:	33 ef       	ldi	r19, 0xF3	; 243
    632a:	41 e0       	ldi	r20, 0x01	; 1
    632c:	50 e0       	ldi	r21, 0x00	; 0
    632e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__divmodsi4>
    6332:	ca 01       	movw	r24, r20
    6334:	b9 01       	movw	r22, r18
    6336:	2c ee       	ldi	r18, 0xEC	; 236
    6338:	34 ef       	ldi	r19, 0xF4	; 244
    633a:	4f ef       	ldi	r20, 0xFF	; 255
    633c:	5f ef       	ldi	r21, 0xFF	; 255
    633e:	0e 94 96 30 	call	0x612c	; 0x612c <__mulsi3>
    6342:	6e 0d       	add	r22, r14
    6344:	7f 1d       	adc	r23, r15
    6346:	80 1f       	adc	r24, r16
    6348:	91 1f       	adc	r25, r17
    634a:	97 ff       	sbrs	r25, 7
    634c:	04 c0       	rjmp	.+8      	; 0x6356 <do_rand+0x84>
    634e:	61 50       	subi	r22, 0x01	; 1
    6350:	70 40       	sbci	r23, 0x00	; 0
    6352:	80 40       	sbci	r24, 0x00	; 0
    6354:	90 48       	sbci	r25, 0x80	; 128
    6356:	68 83       	st	Y, r22
    6358:	79 83       	std	Y+1, r23	; 0x01
    635a:	8a 83       	std	Y+2, r24	; 0x02
    635c:	9b 83       	std	Y+3, r25	; 0x03
    635e:	9b 01       	movw	r18, r22
    6360:	3f 77       	andi	r19, 0x7F	; 127
    6362:	c9 01       	movw	r24, r18
    6364:	cd b7       	in	r28, 0x3d	; 61
    6366:	de b7       	in	r29, 0x3e	; 62
    6368:	ea e0       	ldi	r30, 0x0A	; 10
    636a:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__epilogue_restores__+0x10>

0000636e <rand_r>:
    636e:	0e 94 69 31 	call	0x62d2	; 0x62d2 <do_rand>
    6372:	08 95       	ret

00006374 <rand>:
    6374:	87 e9       	ldi	r24, 0x97	; 151
    6376:	91 e0       	ldi	r25, 0x01	; 1
    6378:	0e 94 69 31 	call	0x62d2	; 0x62d2 <do_rand>
    637c:	08 95       	ret

0000637e <srand>:
    637e:	a0 e0       	ldi	r26, 0x00	; 0
    6380:	b0 e0       	ldi	r27, 0x00	; 0
    6382:	80 93 97 01 	sts	0x0197, r24
    6386:	90 93 98 01 	sts	0x0198, r25
    638a:	a0 93 99 01 	sts	0x0199, r26
    638e:	b0 93 9a 01 	sts	0x019A, r27
    6392:	08 95       	ret

00006394 <memcmp>:
    6394:	fb 01       	movw	r30, r22
    6396:	dc 01       	movw	r26, r24
    6398:	04 c0       	rjmp	.+8      	; 0x63a2 <memcmp+0xe>
    639a:	8d 91       	ld	r24, X+
    639c:	01 90       	ld	r0, Z+
    639e:	80 19       	sub	r24, r0
    63a0:	21 f4       	brne	.+8      	; 0x63aa <memcmp+0x16>
    63a2:	41 50       	subi	r20, 0x01	; 1
    63a4:	50 40       	sbci	r21, 0x00	; 0
    63a6:	c8 f7       	brcc	.-14     	; 0x639a <memcmp+0x6>
    63a8:	88 1b       	sub	r24, r24
    63aa:	99 0b       	sbc	r25, r25
    63ac:	08 95       	ret

000063ae <strcat>:
    63ae:	fb 01       	movw	r30, r22
    63b0:	dc 01       	movw	r26, r24
    63b2:	0d 90       	ld	r0, X+
    63b4:	00 20       	and	r0, r0
    63b6:	e9 f7       	brne	.-6      	; 0x63b2 <strcat+0x4>
    63b8:	11 97       	sbiw	r26, 0x01	; 1
    63ba:	01 90       	ld	r0, Z+
    63bc:	0d 92       	st	X+, r0
    63be:	00 20       	and	r0, r0
    63c0:	e1 f7       	brne	.-8      	; 0x63ba <strcat+0xc>
    63c2:	08 95       	ret

000063c4 <_exit>:
    63c4:	f8 94       	cli

000063c6 <__stop_program>:
    63c6:	ff cf       	rjmp	.-2      	; 0x63c6 <__stop_program>
